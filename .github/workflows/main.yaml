on: [push]

name: build

env:
  RUST_BACKTRACE: 1

jobs:
  lint:
    name: Code lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2019-12-19
          override: true
          components: rustfmt, clippy
      - run: make lint
  
  # Uncomment this once LLVM toolchain is added to the CI
  # docs:
  #   name: Docs
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Install Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: nightly-2019-12-19
  #         override: true
  #         components: rustfmt, clippy
  #     - run: make doc-local

  test:
    name: Test in ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: nightly-2019-12-19
          - build: macos
            os: macos-latest
            rust: nightly-2019-12-19
          - build: windows
            os: windows-latest
            rust: nightly-2019-12-19
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Install LLVM (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          curl https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/LLVM-10.0.0-win64.exe -L -o llvm-installer.exe
          7z x llvm-installer.exe -oC:/llvm-10
          echo ::add-path::C:/llvm-10/bin
          echo ::set-env name=LLVM_SYS_100_PREFIX::C:/llvm-10
          echo ::set-env name=LIBCLANG_PATH::C:/llvm-10/bin/libclang.dll
      - name: Install LLVM (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          curl https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang+llvm-10.0.0-x86_64-apple-darwin.tar.xz -L -o llvm.tar.xz
          mkdir -p /opt/llvm-10
          tar xf llvm.tar.xz --strip-components=1 -C /opt/llvm-10
          echo ::add-path::/opt/llvm-10/bin
          echo ::set-env name=LLVM_SYS_100_PREFIX::/opt/llvm-10
      - name: Install LLVM (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz -L -o llvm.tar.xz
          mkdir -p /opt/llvm-10
          tar xf llvm.tar.xz --strip-components=1 -C /opt/llvm-10
          echo ::add-path::/opt/llvm-10/bin
          echo ::set-env name=LLVM_SYS_100_PREFIX::/opt/llvm-10
      - name: Set up dependencies for Mac OS
        run: brew install automake
        if: matrix.os == 'macos-latest'
      - run: make test
      # - name: Set up dependencies for Windows
      #   run: choco install llvm
      #   if: matrix.os == 'windows-latest'
      - name: Build and Test C API
        run: |
          make capi
          make test-capi-cranelift
        if: matrix.os != 'windows-latest'
      - name: Build C API on Windows
        run: make capi
        if: matrix.os == 'windows-latest'
