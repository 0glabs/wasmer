// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/i32_.wast

use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, VmCtx, Export};
use wabt::wat2wasm;


// Line 3
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param i32 i32) (result i32)))
      (type (;1;) (func (param i32) (result i32)))
      (func (;0;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.add)
      (func (;1;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.sub)
      (func (;2;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.mul)
      (func (;3;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.div_s)
      (func (;4;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.div_u)
      (func (;5;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.rem_s)
      (func (;6;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.rem_u)
      (func (;7;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.and)
      (func (;8;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.or)
      (func (;9;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.xor)
      (func (;10;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.shl)
      (func (;11;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.shr_s)
      (func (;12;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.shr_u)
      (func (;13;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.rotl)
      (func (;14;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.rotr)
      (func (;15;) (type 1) (param i32) (result i32)
        get_local 0
        i32.clz)
      (func (;16;) (type 1) (param i32) (result i32)
        get_local 0
        i32.ctz)
      (func (;17;) (type 1) (param i32) (result i32)
        get_local 0
        i32.popcnt)
      (func (;18;) (type 1) (param i32) (result i32)
        get_local 0
        i32.eqz)
      (func (;19;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.eq)
      (func (;20;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.ne)
      (func (;21;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.lt_s)
      (func (;22;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.lt_u)
      (func (;23;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.le_s)
      (func (;24;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.le_u)
      (func (;25;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.gt_s)
      (func (;26;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.gt_u)
      (func (;27;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.ge_s)
      (func (;28;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.ge_u)
      (export \"add\" (func 0))
      (export \"sub\" (func 1))
      (export \"mul\" (func 2))
      (export \"div_s\" (func 3))
      (export \"div_u\" (func 4))
      (export \"rem_s\" (func 5))
      (export \"rem_u\" (func 6))
      (export \"and\" (func 7))
      (export \"or\" (func 8))
      (export \"xor\" (func 9))
      (export \"shl\" (func 10))
      (export \"shr_s\" (func 11))
      (export \"shr_u\" (func 12))
      (export \"rotl\" (func 13))
      (export \"rotr\" (func 14))
      (export \"clz\" (func 15))
      (export \"ctz\" (func 16))
      (export \"popcnt\" (func 17))
      (export \"eqz\" (func 18))
      (export \"eq\" (func 19))
      (export \"ne\" (func 20))
      (export \"lt_s\" (func 21))
      (export \"lt_u\" (func 22))
      (export \"le_s\" (func 23))
      (export \"le_u\" (func 24))
      (export \"gt_s\" (func 25))
      (export \"gt_u\" (func 26))
      (export \"ge_s\" (func 27))
      (export \"ge_u\" (func 28)))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, ImportObject::new()).expect("WASM can't be instantiated")
}

// Line 35
#[test]
fn l35_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 36
#[test]
fn l36_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 37
#[test]
fn l37_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, -2 as i32);
}

// Line 38
#[test]
fn l38_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 39
#[test]
fn l39_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, 1 as i32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 40
#[test]
fn l40_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 2147483647 as i32);
}

// Line 41
#[test]
fn l41_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 42
#[test]
fn l42_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1073741823 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1073741824 as i32);
}

// Line 44
#[test]
fn l44_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 45
#[test]
fn l45_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 46
#[test]
fn l46_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 47
#[test]
fn l47_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, -1 as i32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 48
#[test]
fn l48_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 2147483647 as i32);
}

// Line 49
#[test]
fn l49_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 50
#[test]
fn l50_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1073741823 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 1073741824 as i32);
}

// Line 52
#[test]
fn l52_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 53
#[test]
fn l53_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 54
#[test]
fn l54_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 55
#[test]
fn l55_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(268435456 as i32, 4096 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 56
#[test]
fn l56_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 57
#[test]
fn l57_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 58
#[test]
fn l58_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, -1 as i32, &vm_context);
    assert_eq!(result, -2147483647 as i32);
}

// Line 59
#[test]
fn l59_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(19088743 as i32, 1985229328 as i32, &vm_context);
    assert_eq!(result, 898528368 as i32);
}

// Line 60
#[test]
fn l60_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 62

// Line 63

// Line 64

// Line 65
#[test]
fn l65_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 66
#[test]
fn l66_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 67
#[test]
fn l67_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 68
#[test]
fn l68_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 69
#[test]
fn l69_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 2 as i32, &vm_context);
    assert_eq!(result, -1073741824 as i32);
}

// Line 70
#[test]
fn l70_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483647 as i32, 1000 as i32, &vm_context);
    assert_eq!(result, -2147483 as i32);
}

// Line 71
#[test]
fn l71_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(5 as i32, 2 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 72
#[test]
fn l72_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-5 as i32, 2 as i32, &vm_context);
    assert_eq!(result, -2 as i32);
}

// Line 73
#[test]
fn l73_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(5 as i32, -2 as i32, &vm_context);
    assert_eq!(result, -2 as i32);
}

// Line 74
#[test]
fn l74_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-5 as i32, -2 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 75
#[test]
fn l75_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(7 as i32, 3 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 76
#[test]
fn l76_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-7 as i32, 3 as i32, &vm_context);
    assert_eq!(result, -2 as i32);
}

// Line 77
#[test]
fn l77_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(7 as i32, -3 as i32, &vm_context);
    assert_eq!(result, -2 as i32);
}

// Line 78
#[test]
fn l78_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-7 as i32, -3 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 79
#[test]
fn l79_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(11 as i32, 5 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 80
#[test]
fn l80_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(17 as i32, 7 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 82

// Line 83

// Line 84
#[test]
fn l84_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 85
#[test]
fn l85_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 86
#[test]
fn l86_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 87
#[test]
fn l87_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 88
#[test]
fn l88_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 2 as i32, &vm_context);
    assert_eq!(result, 1073741824 as i32);
}

// Line 89
#[test]
fn l89_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1880092688 as i32, 65537 as i32, &vm_context);
    assert_eq!(result, 36847 as i32);
}

// Line 90
#[test]
fn l90_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483647 as i32, 1000 as i32, &vm_context);
    assert_eq!(result, 2147483 as i32);
}

// Line 91
#[test]
fn l91_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(5 as i32, 2 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 92
#[test]
fn l92_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-5 as i32, 2 as i32, &vm_context);
    assert_eq!(result, 2147483645 as i32);
}

// Line 93
#[test]
fn l93_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(5 as i32, -2 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 94
#[test]
fn l94_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-5 as i32, -2 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 95
#[test]
fn l95_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(7 as i32, 3 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 96
#[test]
fn l96_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(11 as i32, 5 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 97
#[test]
fn l97_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(17 as i32, 7 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 99

// Line 100

// Line 101
#[test]
fn l101_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 102
#[test]
fn l102_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 103
#[test]
fn l103_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 104
#[test]
fn l104_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 105
#[test]
fn l105_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 106
#[test]
fn l106_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 107
#[test]
fn l107_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 2 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 108
#[test]
fn l108_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483647 as i32, 1000 as i32, &vm_context);
    assert_eq!(result, -647 as i32);
}

// Line 109
#[test]
fn l109_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(5 as i32, 2 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 110
#[test]
fn l110_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-5 as i32, 2 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 111
#[test]
fn l111_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(5 as i32, -2 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 112
#[test]
fn l112_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-5 as i32, -2 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 113
#[test]
fn l113_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(7 as i32, 3 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 114
#[test]
fn l114_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-7 as i32, 3 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 115
#[test]
fn l115_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(7 as i32, -3 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 116
#[test]
fn l116_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-7 as i32, -3 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 117
#[test]
fn l117_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(11 as i32, 5 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 118
#[test]
fn l118_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(17 as i32, 7 as i32, &vm_context);
    assert_eq!(result, 3 as i32);
}

// Line 120

// Line 121

// Line 122
#[test]
fn l122_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 123
#[test]
fn l123_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 124
#[test]
fn l124_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 125
#[test]
fn l125_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 126
#[test]
fn l126_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 2 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 127
#[test]
fn l127_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1880092688 as i32, 65537 as i32, &vm_context);
    assert_eq!(result, 32769 as i32);
}

// Line 128
#[test]
fn l128_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483647 as i32, 1000 as i32, &vm_context);
    assert_eq!(result, 649 as i32);
}

// Line 129
#[test]
fn l129_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(5 as i32, 2 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 130
#[test]
fn l130_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-5 as i32, 2 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 131
#[test]
fn l131_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(5 as i32, -2 as i32, &vm_context);
    assert_eq!(result, 5 as i32);
}

// Line 132
#[test]
fn l132_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-5 as i32, -2 as i32, &vm_context);
    assert_eq!(result, -5 as i32);
}

// Line 133
#[test]
fn l133_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(7 as i32, 3 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 134
#[test]
fn l134_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(11 as i32, 5 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 135
#[test]
fn l135_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(17 as i32, 7 as i32, &vm_context);
    assert_eq!(result, 3 as i32);
}

// Line 137
#[test]
fn l137_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 138
#[test]
fn l138_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 139
#[test]
fn l139_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 140
#[test]
fn l140_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 141
#[test]
fn l141_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 142
#[test]
fn l142_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 2147483647 as i32);
}

// Line 143
#[test]
fn l143_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-252641281 as i32, -3856 as i32, &vm_context);
    assert_eq!(result, -252645136 as i32);
}

// Line 144
#[test]
fn l144_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 146
#[test]
fn l146_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 147
#[test]
fn l147_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 148
#[test]
fn l148_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 149
#[test]
fn l149_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 150
#[test]
fn l150_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 151
#[test]
fn l151_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 152
#[test]
fn l152_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-252641281 as i32, -3856 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 153
#[test]
fn l153_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 155
#[test]
fn l155_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 156
#[test]
fn l156_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 157
#[test]
fn l157_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 158
#[test]
fn l158_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 159
#[test]
fn l159_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 160
#[test]
fn l160_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 161
#[test]
fn l161_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 2147483647 as i32);
}

// Line 162
#[test]
fn l162_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 163
#[test]
fn l163_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-252641281 as i32, -3856 as i32, &vm_context);
    assert_eq!(result, 252645135 as i32);
}

// Line 164
#[test]
fn l164_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 166
#[test]
fn l166_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 167
#[test]
fn l167_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 168
#[test]
fn l168_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, 1 as i32, &vm_context);
    assert_eq!(result, -2 as i32);
}

// Line 169
#[test]
fn l169_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, -2 as i32);
}

// Line 170
#[test]
fn l170_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 171
#[test]
fn l171_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1073741824 as i32, 1 as i32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 172
#[test]
fn l172_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 31 as i32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 173
#[test]
fn l173_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 32 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 174
#[test]
fn l174_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 33 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 175
#[test]
fn l175_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 176
#[test]
fn l176_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 178
#[test]
fn l178_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 179
#[test]
fn l179_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 180
#[test]
fn l180_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 181
#[test]
fn l181_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1073741823 as i32);
}

// Line 182
#[test]
fn l182_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 1 as i32, &vm_context);
    assert_eq!(result, -1073741824 as i32);
}

// Line 183
#[test]
fn l183_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1073741824 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 536870912 as i32);
}

// Line 184
#[test]
fn l184_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 32 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 185
#[test]
fn l185_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 33 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 186
#[test]
fn l186_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 187
#[test]
fn l187_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 188
#[test]
fn l188_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 189
#[test]
fn l189_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 31 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 190
#[test]
fn l190_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 32 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 191
#[test]
fn l191_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 33 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 192
#[test]
fn l192_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 193
#[test]
fn l193_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 194
#[test]
fn l194_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 196
#[test]
fn l196_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 197
#[test]
fn l197_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 198
#[test]
fn l198_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 2147483647 as i32);
}

// Line 199
#[test]
fn l199_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1073741823 as i32);
}

// Line 200
#[test]
fn l200_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1073741824 as i32);
}

// Line 201
#[test]
fn l201_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1073741824 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 536870912 as i32);
}

// Line 202
#[test]
fn l202_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 32 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 203
#[test]
fn l203_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 33 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 204
#[test]
fn l204_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 205
#[test]
fn l205_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 206
#[test]
fn l206_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 207
#[test]
fn l207_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 31 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 208
#[test]
fn l208_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 32 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 209
#[test]
fn l209_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 33 as i32, &vm_context);
    assert_eq!(result, 2147483647 as i32);
}

// Line 210
#[test]
fn l210_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 211
#[test]
fn l211_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 212
#[test]
fn l212_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 214
#[test]
fn l214_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 215
#[test]
fn l215_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 216
#[test]
fn l216_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 217
#[test]
fn l217_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 32 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 218
#[test]
fn l218_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1412589450 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1469788397 as i32);
}

// Line 219
#[test]
fn l219_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-33498112 as i32, 4 as i32, &vm_context);
    assert_eq!(result, -535969777 as i32);
}

// Line 220
#[test]
fn l220_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1329474845 as i32, 5 as i32, &vm_context);
    assert_eq!(result, 406477942 as i32);
}

// Line 221
#[test]
fn l221_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(32768 as i32, 37 as i32, &vm_context);
    assert_eq!(result, 1048576 as i32);
}

// Line 222
#[test]
fn l222_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1329474845 as i32, 65285 as i32, &vm_context);
    assert_eq!(result, 406477942 as i32);
}

// Line 223
#[test]
fn l223_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1989852383 as i32, -19 as i32, &vm_context);
    assert_eq!(result, 1469837011 as i32);
}

// Line 224
#[test]
fn l224_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1989852383 as i32, -2147483635 as i32, &vm_context);
    assert_eq!(result, 1469837011 as i32);
}

// Line 225
#[test]
fn l225_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 31 as i32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 226
#[test]
fn l226_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 228
#[test]
fn l228_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 229
#[test]
fn l229_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 230
#[test]
fn l230_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 231
#[test]
fn l231_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 32 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 232
#[test]
fn l232_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-16724992 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 2139121152 as i32);
}

// Line 233
#[test]
fn l233_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(524288 as i32, 4 as i32, &vm_context);
    assert_eq!(result, 32768 as i32);
}

// Line 234
#[test]
fn l234_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1329474845 as i32, 5 as i32, &vm_context);
    assert_eq!(result, 495324823 as i32);
}

// Line 235
#[test]
fn l235_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(32768 as i32, 37 as i32, &vm_context);
    assert_eq!(result, 1024 as i32);
}

// Line 236
#[test]
fn l236_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1329474845 as i32, 65285 as i32, &vm_context);
    assert_eq!(result, 495324823 as i32);
}

// Line 237
#[test]
fn l237_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1989852383 as i32, -19 as i32, &vm_context);
    assert_eq!(result, -419711787 as i32);
}

// Line 238
#[test]
fn l238_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1989852383 as i32, -2147483635 as i32, &vm_context);
    assert_eq!(result, -419711787 as i32);
}

// Line 239
#[test]
fn l239_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 31 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 240
#[test]
fn l240_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 31 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 242
#[test]
fn l242_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 243
#[test]
fn l243_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 32 as i32);
}

// Line 244
#[test]
fn l244_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(32768 as i32, &vm_context);
    assert_eq!(result, 16 as i32);
}

// Line 245
#[test]
fn l245_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(255 as i32, &vm_context);
    assert_eq!(result, 24 as i32);
}

// Line 246
#[test]
fn l246_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 247
#[test]
fn l247_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 31 as i32);
}

// Line 248
#[test]
fn l248_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2 as i32, &vm_context);
    assert_eq!(result, 30 as i32);
}

// Line 249
#[test]
fn l249_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 251
#[test]
fn l251_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 252
#[test]
fn l252_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 32 as i32);
}

// Line 253
#[test]
fn l253_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(32768 as i32, &vm_context);
    assert_eq!(result, 15 as i32);
}

// Line 254
#[test]
fn l254_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(65536 as i32, &vm_context);
    assert_eq!(result, 16 as i32);
}

// Line 255
#[test]
fn l255_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, 31 as i32);
}

// Line 256
#[test]
fn l256_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 258
#[test]
fn l258_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, 32 as i32);
}

// Line 259
#[test]
fn l259_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 260
#[test]
fn l260_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(32768 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 261
#[test]
fn l261_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147450880 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 262
#[test]
fn l262_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 31 as i32);
}

// Line 263
#[test]
fn l263_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1431655766 as i32, &vm_context);
    assert_eq!(result, 16 as i32);
}

// Line 264
#[test]
fn l264_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1431655765 as i32, &vm_context);
    assert_eq!(result, 16 as i32);
}

// Line 265
#[test]
fn l265_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-559038737 as i32, &vm_context);
    assert_eq!(result, 24 as i32);
}

// Line 267
#[test]
fn l267_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 268
#[test]
fn l268_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 269
#[test]
fn l269_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 270
#[test]
fn l270_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 271
#[test]
fn l271_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 273
#[test]
fn l273_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 274
#[test]
fn l274_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 275
#[test]
fn l275_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 276
#[test]
fn l276_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 277
#[test]
fn l277_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 278
#[test]
fn l278_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 279
#[test]
fn l279_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 280
#[test]
fn l280_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 281
#[test]
fn l281_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 282
#[test]
fn l282_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 283
#[test]
fn l283_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 284
#[test]
fn l284_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 285
#[test]
fn l285_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 286
#[test]
fn l286_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 288
#[test]
fn l288_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 289
#[test]
fn l289_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 290
#[test]
fn l290_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 291
#[test]
fn l291_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 292
#[test]
fn l292_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 293
#[test]
fn l293_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 294
#[test]
fn l294_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 295
#[test]
fn l295_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 296
#[test]
fn l296_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 297
#[test]
fn l297_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 298
#[test]
fn l298_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 299
#[test]
fn l299_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 300
#[test]
fn l300_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 301
#[test]
fn l301_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 303
#[test]
fn l303_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 304
#[test]
fn l304_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 305
#[test]
fn l305_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 306
#[test]
fn l306_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 307
#[test]
fn l307_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 308
#[test]
fn l308_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 309
#[test]
fn l309_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 310
#[test]
fn l310_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 311
#[test]
fn l311_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 312
#[test]
fn l312_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 313
#[test]
fn l313_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 314
#[test]
fn l314_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 315
#[test]
fn l315_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 316
#[test]
fn l316_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 318
#[test]
fn l318_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 319
#[test]
fn l319_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 320
#[test]
fn l320_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 321
#[test]
fn l321_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 322
#[test]
fn l322_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 323
#[test]
fn l323_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 324
#[test]
fn l324_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 325
#[test]
fn l325_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 326
#[test]
fn l326_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 327
#[test]
fn l327_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 328
#[test]
fn l328_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 329
#[test]
fn l329_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 330
#[test]
fn l330_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 331
#[test]
fn l331_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 333
#[test]
fn l333_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 334
#[test]
fn l334_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 335
#[test]
fn l335_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 336
#[test]
fn l336_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 337
#[test]
fn l337_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 338
#[test]
fn l338_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 339
#[test]
fn l339_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 340
#[test]
fn l340_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 341
#[test]
fn l341_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 342
#[test]
fn l342_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 343
#[test]
fn l343_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 344
#[test]
fn l344_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 345
#[test]
fn l345_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 346
#[test]
fn l346_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 348
#[test]
fn l348_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 349
#[test]
fn l349_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 350
#[test]
fn l350_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 351
#[test]
fn l351_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 352
#[test]
fn l352_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 353
#[test]
fn l353_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 354
#[test]
fn l354_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 355
#[test]
fn l355_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 356
#[test]
fn l356_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 357
#[test]
fn l357_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 358
#[test]
fn l358_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 359
#[test]
fn l359_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 360
#[test]
fn l360_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 361
#[test]
fn l361_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 363
#[test]
fn l363_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 364
#[test]
fn l364_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 365
#[test]
fn l365_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 366
#[test]
fn l366_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 367
#[test]
fn l367_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 368
#[test]
fn l368_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 369
#[test]
fn l369_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 370
#[test]
fn l370_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 371
#[test]
fn l371_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 372
#[test]
fn l372_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 373
#[test]
fn l373_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 374
#[test]
fn l374_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 375
#[test]
fn l375_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 376
#[test]
fn l376_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 378
#[test]
fn l378_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 379
#[test]
fn l379_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 380
#[test]
fn l380_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 381
#[test]
fn l381_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 382
#[test]
fn l382_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 383
#[test]
fn l383_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 384
#[test]
fn l384_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 385
#[test]
fn l385_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 386
#[test]
fn l386_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 387
#[test]
fn l387_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 388
#[test]
fn l388_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 389
#[test]
fn l389_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 390
#[test]
fn l390_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 391
#[test]
fn l391_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 393
#[test]
fn l393_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 394
#[test]
fn l394_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 395
#[test]
fn l395_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 396
#[test]
fn l396_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 397
#[test]
fn l397_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 398
#[test]
fn l398_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 399
#[test]
fn l399_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 400
#[test]
fn l400_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 401
#[test]
fn l401_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 402
#[test]
fn l402_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 403
#[test]
fn l403_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 404
#[test]
fn l404_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 405
#[test]
fn l405_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 406
#[test]
fn l406_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 408
#[test]
fn l408_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 409
#[test]
fn l409_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 410
#[test]
fn l410_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 411
#[test]
fn l411_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 412
#[test]
fn l412_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 413
#[test]
fn l413_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 414
#[test]
fn l414_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 415
#[test]
fn l415_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 416
#[test]
fn l416_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 417
#[test]
fn l417_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 418
#[test]
fn l418_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 419
#[test]
fn l419_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 420
#[test]
fn l420_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 421
#[test]
fn l421_assert_return_invoke() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}
