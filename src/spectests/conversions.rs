// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/conversions.wast
#![allow(
    warnings,
    dead_code
)]
use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, VmCtx, Export};
use super::_common::spectest_importobject;
use std::{f32, f64};
use wabt::wat2wasm;


// Line 1
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param i32) (result i64)))
      (type (;1;) (func (param i64) (result i32)))
      (type (;2;) (func (param f32) (result i32)))
      (type (;3;) (func (param f64) (result i32)))
      (type (;4;) (func (param f32) (result i64)))
      (type (;5;) (func (param f64) (result i64)))
      (type (;6;) (func (param i32) (result f32)))
      (type (;7;) (func (param i64) (result f32)))
      (type (;8;) (func (param i32) (result f64)))
      (type (;9;) (func (param i64) (result f64)))
      (type (;10;) (func (param f32) (result f64)))
      (type (;11;) (func (param f64) (result f32)))
      (func (;0;) (type 0) (param i32) (result i64)
        get_local 0
        i64.extend_s/i32)
      (func (;1;) (type 0) (param i32) (result i64)
        get_local 0
        i64.extend_u/i32)
      (func (;2;) (type 1) (param i64) (result i32)
        get_local 0
        i32.wrap/i64)
      (func (;3;) (type 2) (param f32) (result i32)
        get_local 0
        i32.trunc_s/f32)
      (func (;4;) (type 2) (param f32) (result i32)
        get_local 0
        i32.trunc_u/f32)
      (func (;5;) (type 3) (param f64) (result i32)
        get_local 0
        i32.trunc_s/f64)
      (func (;6;) (type 3) (param f64) (result i32)
        get_local 0
        i32.trunc_u/f64)
      (func (;7;) (type 4) (param f32) (result i64)
        get_local 0
        i64.trunc_s/f32)
      (func (;8;) (type 4) (param f32) (result i64)
        get_local 0
        i64.trunc_u/f32)
      (func (;9;) (type 5) (param f64) (result i64)
        get_local 0
        i64.trunc_s/f64)
      (func (;10;) (type 5) (param f64) (result i64)
        get_local 0
        i64.trunc_u/f64)
      (func (;11;) (type 6) (param i32) (result f32)
        get_local 0
        f32.convert_s/i32)
      (func (;12;) (type 7) (param i64) (result f32)
        get_local 0
        f32.convert_s/i64)
      (func (;13;) (type 8) (param i32) (result f64)
        get_local 0
        f64.convert_s/i32)
      (func (;14;) (type 9) (param i64) (result f64)
        get_local 0
        f64.convert_s/i64)
      (func (;15;) (type 6) (param i32) (result f32)
        get_local 0
        f32.convert_u/i32)
      (func (;16;) (type 7) (param i64) (result f32)
        get_local 0
        f32.convert_u/i64)
      (func (;17;) (type 8) (param i32) (result f64)
        get_local 0
        f64.convert_u/i32)
      (func (;18;) (type 9) (param i64) (result f64)
        get_local 0
        f64.convert_u/i64)
      (func (;19;) (type 10) (param f32) (result f64)
        get_local 0
        f64.promote/f32)
      (func (;20;) (type 11) (param f64) (result f32)
        get_local 0
        f32.demote/f64)
      (func (;21;) (type 6) (param i32) (result f32)
        get_local 0
        f32.reinterpret/i32)
      (func (;22;) (type 9) (param i64) (result f64)
        get_local 0
        f64.reinterpret/i64)
      (func (;23;) (type 2) (param f32) (result i32)
        get_local 0
        i32.reinterpret/f32)
      (func (;24;) (type 5) (param f64) (result i64)
        get_local 0
        i64.reinterpret/f64)
      (export \"i64.extend_s_i32\" (func 0))
      (export \"i64.extend_u_i32\" (func 1))
      (export \"i32.wrap_i64\" (func 2))
      (export \"i32.trunc_s_f32\" (func 3))
      (export \"i32.trunc_u_f32\" (func 4))
      (export \"i32.trunc_s_f64\" (func 5))
      (export \"i32.trunc_u_f64\" (func 6))
      (export \"i64.trunc_s_f32\" (func 7))
      (export \"i64.trunc_u_f32\" (func 8))
      (export \"i64.trunc_s_f64\" (func 9))
      (export \"i64.trunc_u_f64\" (func 10))
      (export \"f32.convert_s_i32\" (func 11))
      (export \"f32.convert_s_i64\" (func 12))
      (export \"f64.convert_s_i32\" (func 13))
      (export \"f64.convert_s_i64\" (func 14))
      (export \"f32.convert_u_i32\" (func 15))
      (export \"f32.convert_u_i64\" (func 16))
      (export \"f64.convert_u_i32\" (func 17))
      (export \"f64.convert_u_i64\" (func 18))
      (export \"f64.promote_f32\" (func 19))
      (export \"f32.demote_f64\" (func 20))
      (export \"f32.reinterpret_i32\" (func 21))
      (export \"f64.reinterpret_i64\" (func 22))
      (export \"i32.reinterpret_f32\" (func 23))
      (export \"i64.reinterpret_f64\" (func 24)))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}
fn start_module_1(result_object: &ResultObject, vm_context: &VmCtx) {
    result_object.instance.start(&vm_context);
}

// Line 29
fn c1_l29_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c1_l29_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 30
fn c2_l30_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c2_l30_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(10000 as i32, &vm_context);
    assert_eq!(result, 10000 as i64);
}

// Line 31
fn c3_l31_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c3_l31_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-10000 as i32, &vm_context);
    assert_eq!(result, -10000 as i64);
}

// Line 32
fn c4_l32_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c4_l32_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 33
fn c5_l33_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c5_l33_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 2147483647 as i64);
}

// Line 34
fn c6_l34_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c6_l34_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, -2147483648 as i64);
}

// Line 36
fn c7_l36_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c7_l36_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 37
fn c8_l37_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c8_l37_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(10000 as i32, &vm_context);
    assert_eq!(result, 10000 as i64);
}

// Line 38
fn c9_l38_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c9_l38_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-10000 as i32, &vm_context);
    assert_eq!(result, 4294957296 as i64);
}

// Line 39
fn c10_l39_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c10_l39_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, 4294967295 as i64);
}

// Line 40
fn c11_l40_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c11_l40_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 2147483647 as i64);
}

// Line 41
fn c12_l41_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c12_l41_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, 2147483648 as i64);
}

// Line 43
fn c13_l43_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c13_l43_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 44
fn c14_l44_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c14_l44_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-100000 as i64, &vm_context);
    assert_eq!(result, -100000 as i32);
}

// Line 45
fn c15_l45_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c15_l45_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483648 as i64, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 46
fn c16_l46_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c16_l46_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483649 as i64, &vm_context);
    assert_eq!(result, 2147483647 as i32);
}

// Line 47
fn c17_l47_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c17_l47_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4294967296 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 48
fn c18_l48_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c18_l48_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4294967297 as i64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 49
fn c19_l49_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c19_l49_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4294967295 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 50
fn c20_l50_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c20_l50_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 51
fn c21_l51_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c21_l51_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1311768467463790320 as i64, &vm_context);
    assert_eq!(result, -1698898192 as i32);
}

// Line 52
fn c22_l52_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c22_l52_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967295 as i64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 53
fn c23_l53_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c23_l53_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967296 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 54
fn c24_l54_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c24_l54_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967297 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 56
fn c25_l56_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c25_l56_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 57
fn c26_l57_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c26_l57_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 58
fn c27_l58_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c27_l58_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 59
fn c28_l59_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c28_l59_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 60
fn c29_l60_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c29_l60_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 61
fn c30_l61_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c30_l61_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 62
fn c31_l62_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c31_l62_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 63
fn c32_l63_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c32_l63_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 64
fn c33_l64_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c33_l64_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.1 as f32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 65
fn c34_l65_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c34_l65_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.5 as f32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 66
fn c35_l66_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c35_l66_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.9 as f32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 67
fn c36_l67_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c36_l67_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2.0 as f32, &vm_context);
    assert_eq!(result, -2 as i32);
}

// Line 68
fn c37_l68_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c37_l68_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483500.0 as f32, &vm_context);
    assert_eq!(result, 2147483520 as i32);
}

// Line 69
fn c38_l69_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c38_l69_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483600.0 as f32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 70

// Line 71

// Line 72

// Line 73

// Line 74

// Line 75

// Line 76

// Line 77

// Line 79
fn c47_l79_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c47_l79_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 80
fn c48_l80_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c48_l80_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 81
fn c49_l81_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c49_l81_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 82
fn c50_l82_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c50_l82_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 83
fn c51_l83_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c51_l83_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 84
fn c52_l84_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c52_l84_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 85
fn c53_l85_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c53_l85_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 86
fn c54_l86_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c54_l86_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.9 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 87
fn c55_l87_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c55_l87_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2.0 as f32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 88
fn c56_l88_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c56_l88_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483600.0 as f32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 89
fn c57_l89_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c57_l89_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967000.0 as f32, &vm_context);
    assert_eq!(result, -256 as i32);
}

// Line 90
fn c58_l90_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c58_l90_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.9 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 91
fn c59_l91_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c59_l91_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.99999994 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 92

// Line 93

// Line 94

// Line 95

// Line 96

// Line 97

// Line 98

// Line 99

// Line 101
fn c68_l101_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c68_l101_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 102
fn c69_l102_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c69_l102_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 103
fn c70_l103_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c70_l103_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 104
fn c71_l104_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c71_l104_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 105
fn c72_l105_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c72_l105_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 106
fn c73_l106_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c73_l106_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 107
fn c74_l107_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c74_l107_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 108
fn c75_l108_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c75_l108_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 109
fn c76_l109_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c76_l109_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.1 as f64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 110
fn c77_l110_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c77_l110_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.5 as f64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 111
fn c78_l111_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c78_l111_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.9 as f64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 112
fn c79_l112_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c79_l112_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2.0 as f64, &vm_context);
    assert_eq!(result, -2 as i32);
}

// Line 113
fn c80_l113_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c80_l113_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647.0 as f64, &vm_context);
    assert_eq!(result, 2147483647 as i32);
}

// Line 114
fn c81_l114_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c81_l114_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648.0 as f64, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 115

// Line 116

// Line 117

// Line 118

// Line 119

// Line 120

// Line 121

// Line 122

// Line 124
fn c90_l124_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c90_l124_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 125
fn c91_l125_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c91_l125_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 126
fn c92_l126_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c92_l126_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 127
fn c93_l127_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c93_l127_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 128
fn c94_l128_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c94_l128_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 129
fn c95_l129_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c95_l129_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 130
fn c96_l130_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c96_l130_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 131
fn c97_l131_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c97_l131_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.9 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 132
fn c98_l132_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c98_l132_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2.0 as f64, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 133
fn c99_l133_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c99_l133_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483648.0 as f64, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 134
fn c100_l134_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c100_l134_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967295.0 as f64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 135
fn c101_l135_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c101_l135_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.9 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 136
fn c102_l136_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c102_l136_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.9999999999999999 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 137
fn c103_l137_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c103_l137_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(100000000.0 as f64, &vm_context);
    assert_eq!(result, 100000000 as i32);
}

// Line 138

// Line 139

// Line 140

// Line 141

// Line 142

// Line 143

// Line 144

// Line 145

// Line 146

// Line 147

// Line 148

// Line 150
fn c115_l150_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c115_l150_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 151
fn c116_l151_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c116_l151_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 152
fn c117_l152_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c117_l152_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 153
fn c118_l153_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c118_l153_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 154
fn c119_l154_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c119_l154_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 155
fn c120_l155_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c120_l155_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f32, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 156
fn c121_l156_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c121_l156_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f32, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 157
fn c122_l157_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c122_l157_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 158
fn c123_l158_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c123_l158_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.1 as f32, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 159
fn c124_l159_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c124_l159_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.5 as f32, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 160
fn c125_l160_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c125_l160_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.9 as f32, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 161
fn c126_l161_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c126_l161_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2.0 as f32, &vm_context);
    assert_eq!(result, -2 as i64);
}

// Line 162
fn c127_l162_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c127_l162_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967300.0 as f32, &vm_context);
    assert_eq!(result, 4294967296 as i64);
}

// Line 163
fn c128_l163_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c128_l163_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4294967300.0 as f32, &vm_context);
    assert_eq!(result, -4294967296 as i64);
}

// Line 164
fn c129_l164_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c129_l164_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223371500000000000.0 as f32, &vm_context);
    assert_eq!(result, 9223371487098961920 as i64);
}

// Line 165
fn c130_l165_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c130_l165_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372000000000000.0 as f32, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 166

// Line 167

// Line 168

// Line 169

// Line 170

// Line 171

// Line 172

// Line 173

// Line 175
fn c139_l175_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c139_l175_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 176
fn c140_l176_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c140_l176_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 177
fn c141_l177_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c141_l177_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 178
fn c142_l178_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c142_l178_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 179
fn c143_l179_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c143_l179_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 180
fn c144_l180_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c144_l180_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f32, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 181
fn c145_l181_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c145_l181_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f32, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 182
fn c146_l182_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c146_l182_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967300.0 as f32, &vm_context);
    assert_eq!(result, 4294967296 as i64);
}

// Line 183
fn c147_l183_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c147_l183_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(18446743000000000000.0 as f32, &vm_context);
    assert_eq!(result, -1099511627776 as i64);
}

// Line 184
fn c148_l184_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c148_l184_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.9 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 185
fn c149_l185_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c149_l185_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.99999994 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 186

// Line 187

// Line 188

// Line 189

// Line 190

// Line 191

// Line 192

// Line 193

// Line 195
fn c158_l195_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c158_l195_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 196
fn c159_l196_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c159_l196_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 197
fn c160_l197_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c160_l197_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 198
fn c161_l198_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c161_l198_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 199
fn c162_l199_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c162_l199_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 200
fn c163_l200_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c163_l200_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 201
fn c164_l201_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c164_l201_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 202
fn c165_l202_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c165_l202_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 203
fn c166_l203_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c166_l203_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.1 as f64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 204
fn c167_l204_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c167_l204_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.5 as f64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 205
fn c168_l205_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c168_l205_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.9 as f64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 206
fn c169_l206_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c169_l206_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2.0 as f64, &vm_context);
    assert_eq!(result, -2 as i64);
}

// Line 207
fn c170_l207_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c170_l207_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967296.0 as f64, &vm_context);
    assert_eq!(result, 4294967296 as i64);
}

// Line 208
fn c171_l208_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c171_l208_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4294967296.0 as f64, &vm_context);
    assert_eq!(result, -4294967296 as i64);
}

// Line 209
fn c172_l209_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c172_l209_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775000.0 as f64, &vm_context);
    assert_eq!(result, 9223372036854774784 as i64);
}

// Line 210
fn c173_l210_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c173_l210_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854776000.0 as f64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 211

// Line 212

// Line 213

// Line 214

// Line 215

// Line 216

// Line 217

// Line 218

// Line 220
fn c182_l220_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c182_l220_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 221
fn c183_l221_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c183_l221_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 222
fn c184_l222_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c184_l222_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 223
fn c185_l223_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c185_l223_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 224
fn c186_l224_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c186_l224_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 225
fn c187_l225_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c187_l225_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 226
fn c188_l226_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c188_l226_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 227
fn c189_l227_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c189_l227_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967295.0 as f64, &vm_context);
    assert_eq!(result, 4294967295 as i64);
}

// Line 228
fn c190_l228_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c190_l228_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967296.0 as f64, &vm_context);
    assert_eq!(result, 4294967296 as i64);
}

// Line 229
fn c191_l229_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c191_l229_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(18446744073709550000.0 as f64, &vm_context);
    assert_eq!(result, -2048 as i64);
}

// Line 230
fn c192_l230_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c192_l230_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.9 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 231
fn c193_l231_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c193_l231_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.9999999999999999 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 232
fn c194_l232_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c194_l232_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(100000000.0 as f64, &vm_context);
    assert_eq!(result, 100000000 as i64);
}

// Line 233
fn c195_l233_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c195_l233_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(10000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 10000000000000000 as i64);
}

// Line 234
fn c196_l234_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c196_l234_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854776000.0 as f64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 235

// Line 236

// Line 237

// Line 238

// Line 239

// Line 240

// Line 241

// Line 242

// Line 244
fn c205_l244_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c205_l244_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 245
fn c206_l245_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c206_l245_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, -1.0 as f32);
}

// Line 246
fn c207_l246_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c207_l246_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 247
fn c208_l247_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c208_l247_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 2147483600.0 as f32);
}

// Line 248
fn c209_l248_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c209_l248_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, -2147483600.0 as f32);
}

// Line 249
fn c210_l249_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c210_l249_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1234567890 as i32, &vm_context);
    assert_eq!(result, 1234568000.0 as f32);
}

// Line 251
fn c211_l251_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c211_l251_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777217 as i32, &vm_context);
    assert_eq!(result, 16777216.0 as f32);
}

// Line 252
fn c212_l252_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c212_l252_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-16777217 as i32, &vm_context);
    assert_eq!(result, -16777216.0 as f32);
}

// Line 253
fn c213_l253_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c213_l253_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777219 as i32, &vm_context);
    assert_eq!(result, 16777220.0 as f32);
}

// Line 254
fn c214_l254_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c214_l254_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-16777219 as i32, &vm_context);
    assert_eq!(result, -16777220.0 as f32);
}

// Line 256
fn c215_l256_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c215_l256_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 257
fn c216_l257_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c216_l257_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, -1.0 as f32);
}

// Line 258
fn c217_l258_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c217_l258_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 259
fn c218_l259_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c218_l259_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 9223372000000000000.0 as f32);
}

// Line 260
fn c219_l260_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c219_l260_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &vm_context);
    assert_eq!(result, -9223372000000000000.0 as f32);
}

// Line 261
fn c220_l261_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c220_l261_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(314159265358979 as i64, &vm_context);
    assert_eq!(result, 314159280000000.0 as f32);
}

// Line 263
fn c221_l263_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c221_l263_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777217 as i64, &vm_context);
    assert_eq!(result, 16777216.0 as f32);
}

// Line 264
fn c222_l264_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c222_l264_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-16777217 as i64, &vm_context);
    assert_eq!(result, -16777216.0 as f32);
}

// Line 265
fn c223_l265_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c223_l265_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777219 as i64, &vm_context);
    assert_eq!(result, 16777220.0 as f32);
}

// Line 266
fn c224_l266_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c224_l266_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-16777219 as i64, &vm_context);
    assert_eq!(result, -16777220.0 as f32);
}

// Line 268
fn c225_l268_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c225_l268_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 269
fn c226_l269_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c226_l269_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 270
fn c227_l270_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c227_l270_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 271
fn c228_l271_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c228_l271_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 2147483647.0 as f64);
}

// Line 272
fn c229_l272_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c229_l272_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, -2147483648.0 as f64);
}

// Line 273
fn c230_l273_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c230_l273_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(987654321 as i32, &vm_context);
    assert_eq!(result, 987654321.0 as f64);
}

// Line 275
fn c231_l275_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c231_l275_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 276
fn c232_l276_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c232_l276_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 277
fn c233_l277_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c233_l277_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 278
fn c234_l278_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c234_l278_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 9223372036854776000.0 as f64);
}

// Line 279
fn c235_l279_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c235_l279_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &vm_context);
    assert_eq!(result, -9223372036854776000.0 as f64);
}

// Line 280
fn c236_l280_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c236_l280_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4669201609102990 as i64, &vm_context);
    assert_eq!(result, 4669201609102990.0 as f64);
}

// Line 282
fn c237_l282_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c237_l282_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9007199254740993 as i64, &vm_context);
    assert_eq!(result, 9007199254740992.0 as f64);
}

// Line 283
fn c238_l283_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c238_l283_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9007199254740993 as i64, &vm_context);
    assert_eq!(result, -9007199254740992.0 as f64);
}

// Line 284
fn c239_l284_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c239_l284_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9007199254740995 as i64, &vm_context);
    assert_eq!(result, 9007199254740996.0 as f64);
}

// Line 285
fn c240_l285_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c240_l285_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9007199254740995 as i64, &vm_context);
    assert_eq!(result, -9007199254740996.0 as f64);
}

// Line 287
fn c241_l287_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c241_l287_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 288
fn c242_l288_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c242_l288_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 289
fn c243_l289_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c243_l289_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 2147483600.0 as f32);
}

// Line 290
fn c244_l290_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c244_l290_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, 2147483600.0 as f32);
}

// Line 291
fn c245_l291_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c245_l291_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(305419896 as i32, &vm_context);
    assert_eq!(result, 305419900.0 as f32);
}

// Line 292
fn c246_l292_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c246_l292_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, 4294967300.0 as f32);
}

// Line 293
fn c247_l293_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c247_l293_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483520 as i32, &vm_context);
    assert_eq!(result, 2147483600.0 as f32);
}

// Line 294
fn c248_l294_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c248_l294_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483519 as i32, &vm_context);
    assert_eq!(result, 2147484000.0 as f32);
}

// Line 295
fn c249_l295_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c249_l295_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483518 as i32, &vm_context);
    assert_eq!(result, 2147484000.0 as f32);
}

// Line 296
fn c250_l296_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c250_l296_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-384 as i32, &vm_context);
    assert_eq!(result, 4294966800.0 as f32);
}

// Line 297
fn c251_l297_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c251_l297_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-383 as i32, &vm_context);
    assert_eq!(result, 4294967000.0 as f32);
}

// Line 298
fn c252_l298_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c252_l298_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-382 as i32, &vm_context);
    assert_eq!(result, 4294967000.0 as f32);
}

// Line 300
fn c253_l300_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c253_l300_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777217 as i32, &vm_context);
    assert_eq!(result, 16777216.0 as f32);
}

// Line 301
fn c254_l301_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c254_l301_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777219 as i32, &vm_context);
    assert_eq!(result, 16777220.0 as f32);
}

// Line 303
fn c255_l303_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c255_l303_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 304
fn c256_l304_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c256_l304_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 305
fn c257_l305_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c257_l305_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 9223372000000000000.0 as f32);
}

// Line 306
fn c258_l306_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c258_l306_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 9223372000000000000.0 as f32);
}

// Line 307
fn c259_l307_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c259_l307_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, 18446744000000000000.0 as f32);
}

// Line 309
fn c260_l309_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c260_l309_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777217 as i64, &vm_context);
    assert_eq!(result, 16777216.0 as f32);
}

// Line 310
fn c261_l310_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c261_l310_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777219 as i64, &vm_context);
    assert_eq!(result, 16777220.0 as f32);
}

// Line 312
fn c262_l312_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c262_l312_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 313
fn c263_l313_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c263_l313_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 314
fn c264_l314_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c264_l314_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 2147483647.0 as f64);
}

// Line 315
fn c265_l315_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c265_l315_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, 2147483648.0 as f64);
}

// Line 316
fn c266_l316_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c266_l316_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, 4294967295.0 as f64);
}

// Line 318
fn c267_l318_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c267_l318_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 319
fn c268_l319_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c268_l319_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 320
fn c269_l320_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c269_l320_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 9223372036854776000.0 as f64);
}

// Line 321
fn c270_l321_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c270_l321_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 9223372036854776000.0 as f64);
}

// Line 322
fn c271_l322_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c271_l322_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, 18446744073709552000.0 as f64);
}

// Line 323
fn c272_l323_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c272_l323_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854774784 as i64, &vm_context);
    assert_eq!(result, 9223372036854776000.0 as f64);
}

// Line 324
fn c273_l324_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c273_l324_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854774783 as i64, &vm_context);
    assert_eq!(result, 9223372036854778000.0 as f64);
}

// Line 325
fn c274_l325_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c274_l325_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854774782 as i64, &vm_context);
    assert_eq!(result, 9223372036854778000.0 as f64);
}

// Line 326
fn c275_l326_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c275_l326_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-3072 as i64, &vm_context);
    assert_eq!(result, 18446744073709548000.0 as f64);
}

// Line 327
fn c276_l327_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c276_l327_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-3071 as i64, &vm_context);
    assert_eq!(result, 18446744073709550000.0 as f64);
}

// Line 328
fn c277_l328_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c277_l328_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-3070 as i64, &vm_context);
    assert_eq!(result, 18446744073709550000.0 as f64);
}

// Line 330
fn c278_l330_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c278_l330_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9007199254740993 as i64, &vm_context);
    assert_eq!(result, 9007199254740992.0 as f64);
}

// Line 331
fn c279_l331_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c279_l331_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9007199254740995 as i64, &vm_context);
    assert_eq!(result, 9007199254740996.0 as f64);
}

// Line 333
fn c280_l333_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c280_l333_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 334
fn c281_l334_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c281_l334_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 335
fn c282_l335_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c282_l335_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001401298464324817 as f64);
}

// Line 336
fn c283_l336_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c283_l336_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001401298464324817 as f64);
}

// Line 337
fn c284_l337_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c284_l337_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 338
fn c285_l338_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c285_l338_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 339
fn c286_l339_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c286_l339_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, &vm_context);
    assert_eq!(result, -340282346638528860000000000000000000000.0 as f64);
}

// Line 340
fn c287_l340_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c287_l340_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, &vm_context);
    assert_eq!(result, 340282346638528860000000000000000000000.0 as f64);
}

// Line 342
fn c288_l342_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c288_l342_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0000000000000000000000000000000000015046328 as f32, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000001504632769052528 as f64);
}

// Line 344
fn c289_l344_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c289_l344_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(66382537000000000000000000000000000000.0 as f32, &vm_context);
    assert_eq!(result, 66382536710104395000000000000000000000.0 as f64);
}

// Line 345
fn c290_l345_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c290_l345_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, &vm_context);
    assert_eq!(result, f64::INFINITY);
}

// Line 346
fn c291_l346_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c291_l346_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, &vm_context);
    assert_eq!(result, f64::NEG_INFINITY);
}

// Line 347

// Line 348

// Line 349

// Line 350

// Line 352
fn c296_l352_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c296_l352_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 353
fn c297_l353_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c297_l353_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f32);
}

// Line 354
fn c298_l354_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c298_l354_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 355
fn c299_l355_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c299_l355_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f32);
}

// Line 356
fn c300_l356_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c300_l356_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 357
fn c301_l357_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c301_l357_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f32);
}

// Line 358
fn c302_l358_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c302_l358_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754942807573643 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 359
fn c303_l359_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c303_l359_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754942807573643 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 360
fn c304_l360_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c304_l360_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754942807573642 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000011754942 as f32);
}

// Line 361
fn c305_l361_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c305_l361_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754942807573642 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000011754942 as f32);
}

// Line 362
fn c306_l362_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c306_l362_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001401298464324817 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 363
fn c307_l363_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c307_l363_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001401298464324817 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 364
fn c308_l364_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c308_l364_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282336497324060000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 340282330000000000000000000000000000000.0 as f32);
}

// Line 365
fn c309_l365_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c309_l365_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282336497324060000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -340282330000000000000000000000000000000.0 as f32);
}

// Line 366
fn c310_l366_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c310_l366_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282336497324100000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 367
fn c311_l367_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c311_l367_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282336497324100000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 368
fn c312_l368_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c312_l368_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282346638528860000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 369
fn c313_l369_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c313_l369_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282346638528860000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 370
fn c314_l370_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c314_l370_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282356779733620000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 371
fn c315_l371_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c315_l371_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282356779733620000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 372
fn c316_l372_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c316_l372_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282356779733660000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, f32::INFINITY);
}

// Line 373
fn c317_l373_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c317_l373_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282356779733660000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 374
fn c318_l374_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c318_l374_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000001504632769052528 as f64, &vm_context);
    assert_eq!(result, 0.0000000000000000000000000000000000015046328 as f32);
}

// Line 375
fn c319_l375_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c319_l375_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(66382536710104395000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 66382537000000000000000000000000000000.0 as f32);
}

// Line 376
fn c320_l376_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c320_l376_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f64::INFINITY, &vm_context);
    assert_eq!(result, f32::INFINITY);
}

// Line 377
fn c321_l377_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c321_l377_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 378
fn c322_l378_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c322_l378_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0000000000000002 as f64, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 379
fn c323_l379_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c323_l379_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.9999999999999999 as f64, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 380
fn c324_l380_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c324_l380_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0000000596046448 as f64, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 381
fn c325_l381_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c325_l381_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.000000059604645 as f64, &vm_context);
    assert_eq!(result, 1.0000001 as f32);
}

// Line 382
fn c326_l382_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c326_l382_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.000000178813934 as f64, &vm_context);
    assert_eq!(result, 1.0000001 as f32);
}

// Line 383
fn c327_l383_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c327_l383_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0000001788139343 as f64, &vm_context);
    assert_eq!(result, 1.0000002 as f32);
}

// Line 384
fn c328_l384_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c328_l384_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0000002980232239 as f64, &vm_context);
    assert_eq!(result, 1.0000002 as f32);
}

// Line 385
fn c329_l385_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c329_l385_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777217.0 as f64, &vm_context);
    assert_eq!(result, 16777216.0 as f32);
}

// Line 386
fn c330_l386_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c330_l386_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777217.000000004 as f64, &vm_context);
    assert_eq!(result, 16777218.0 as f32);
}

// Line 387
fn c331_l387_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c331_l387_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777218.999999996 as f64, &vm_context);
    assert_eq!(result, 16777218.0 as f32);
}

// Line 388
fn c332_l388_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c332_l388_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777219.0 as f64, &vm_context);
    assert_eq!(result, 16777220.0 as f32);
}

// Line 389
fn c333_l389_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c333_l389_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(424258443299142700000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 424258450000000000000000000000000.0 as f32);
}

// Line 390
fn c334_l390_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c334_l390_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0000000000000000000000000000000001569262107843488 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000015692621 as f32);
}

// Line 391
fn c335_l391_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c335_l391_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000010551773688605172 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000010551773 as f32);
}

// Line 392
fn c336_l392_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c336_l392_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2.8238128484141933 as f64, &vm_context);
    assert_eq!(result, -2.823813 as f32);
}

// Line 393
fn c337_l393_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c337_l393_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9063376370095757000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -9063376000000000000000000000000000.0 as f32);
}

// Line 394

// Line 395

// Line 396

// Line 397

// Line 398
fn c342_l398_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c342_l398_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 399
fn c343_l399_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c343_l399_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f32);
}

// Line 400
fn c344_l400_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c344_l400_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0000000000000000000000000000000000000000000007006492321624085 as f64, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 401
fn c345_l401_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c345_l401_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0000000000000000000000000000000000000000000007006492321624085 as f64, &vm_context);
    assert_eq!(result, -0.0 as f32);
}

// Line 402
fn c346_l402_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c346_l402_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0000000000000000000000000000000000000000000007006492321624087 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 403
fn c347_l403_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c347_l403_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0000000000000000000000000000000000000000000007006492321624087 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 405
fn c348_l405_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c348_l405_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 406
fn c349_l406_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c349_l406_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, -0.0 as f32);
}

// Line 407
fn c350_l407_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c350_l407_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 408
fn c351_l408_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c351_l408_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (f32::from_bits(4294967295)).is_sign_positive());
}

// Line 409
fn c352_l409_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c352_l409_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(123456789 as i32, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000016535997 as f32);
}

// Line 410
fn c353_l410_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c353_l410_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483647 as i32, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 411
fn c354_l411_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c354_l411_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2139095040 as i32, &vm_context);
    assert_eq!(result, f32::INFINITY);
}

// Line 412
fn c355_l412_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c355_l412_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-8388608 as i32, &vm_context);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 413
fn c356_l413_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c356_l413_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2143289344 as i32, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (f32::from_bits(2143289344)).is_sign_positive());
}

// Line 414
fn c357_l414_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c357_l414_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4194304 as i32, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (f32::from_bits(4290772992)).is_sign_positive());
}

// Line 415
fn c358_l415_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c358_l415_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2141192192 as i32, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (f32::from_bits(2141192192)).is_sign_positive());
}

// Line 416
fn c359_l416_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c359_l416_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6291456 as i32, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (f32::from_bits(4288675840)).is_sign_positive());
}

// Line 418
fn c360_l418_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c360_l418_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 419
fn c361_l419_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c361_l419_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 420
fn c362_l420_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c362_l420_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (f64::from_bits(18446744073709551615)).is_sign_positive());
}

// Line 421
fn c363_l421_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c363_l421_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 422
fn c364_l422_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c364_l422_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1234567890 as i64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000609957582 as f64);
}

// Line 423
fn c365_l423_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c365_l423_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775807 as i64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 424
fn c366_l424_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c366_l424_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9218868437227405312 as i64, &vm_context);
    assert_eq!(result, f64::INFINITY);
}

// Line 425
fn c367_l425_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c367_l425_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4503599627370496 as i64, &vm_context);
    assert_eq!(result, f64::NEG_INFINITY);
}

// Line 426
fn c368_l426_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c368_l426_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9221120237041090560 as i64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (f64::from_bits(9221120237041090560)).is_sign_positive());
}

// Line 427
fn c369_l427_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c369_l427_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2251799813685248 as i64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (f64::from_bits(18444492273895866368)).is_sign_positive());
}

// Line 428
fn c370_l428_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c370_l428_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9219994337134247936 as i64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (f64::from_bits(9219994337134247936)).is_sign_positive());
}

// Line 429
fn c371_l429_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c371_l429_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-3377699720527872 as i64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (f64::from_bits(18443366373989023744)).is_sign_positive());
}

// Line 431
fn c372_l431_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c372_l431_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 432
fn c373_l432_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c373_l432_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 433
fn c374_l433_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c374_l433_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 434
fn c375_l434_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c375_l434_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4294967295), &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 435
fn c376_l435_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c376_l435_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, -2147483647 as i32);
}

// Line 436
fn c377_l436_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c377_l436_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1065353216 as i32);
}

// Line 437
fn c378_l437_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c378_l437_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(3.1415925 as f32, &vm_context);
    assert_eq!(result, 1078530010 as i32);
}

// Line 438
fn c379_l438_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c379_l438_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, &vm_context);
    assert_eq!(result, 2139095039 as i32);
}

// Line 439
fn c380_l439_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c380_l439_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, &vm_context);
    assert_eq!(result, -8388609 as i32);
}

// Line 440
fn c381_l440_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c381_l440_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, &vm_context);
    assert_eq!(result, 2139095040 as i32);
}

// Line 441
fn c382_l441_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c382_l441_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, &vm_context);
    assert_eq!(result, -8388608 as i32);
}

// Line 442
fn c383_l442_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c383_l442_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), &vm_context);
    assert_eq!(result, 2143289344 as i32);
}

// Line 443
fn c384_l443_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c384_l443_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), &vm_context);
    assert_eq!(result, -4194304 as i32);
}

// Line 444
fn c385_l444_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c385_l444_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), &vm_context);
    assert_eq!(result, 2141192192 as i32);
}

// Line 445
fn c386_l445_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c386_l445_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), &vm_context);
    assert_eq!(result, -6291456 as i32);
}

// Line 447
fn c387_l447_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c387_l447_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 448
fn c388_l448_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c388_l448_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 449
fn c389_l449_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c389_l449_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 450
fn c390_l450_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c390_l450_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f64::from_bits(18446744073709551615), &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 451
fn c391_l451_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c391_l451_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -9223372036854775807 as i64);
}

// Line 452
fn c392_l452_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c392_l452_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 4607182418800017408 as i64);
}

// Line 453
fn c393_l453_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c393_l453_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(3.14159265358979 as f64, &vm_context);
    assert_eq!(result, 4614256656552045841 as i64);
}

// Line 454
fn c394_l454_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c394_l454_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 9218868437227405311 as i64);
}

// Line 455
fn c395_l455_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c395_l455_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -4503599627370497 as i64);
}

// Line 456
fn c396_l456_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c396_l456_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f64::INFINITY, &vm_context);
    assert_eq!(result, 9218868437227405312 as i64);
}

// Line 457
fn c397_l457_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c397_l457_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -4503599627370496 as i64);
}

// Line 458
fn c398_l458_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c398_l458_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f64::from_bits(9221120237041090560), &vm_context);
    assert_eq!(result, 9221120237041090560 as i64);
}

// Line 459
fn c399_l459_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c399_l459_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f64::from_bits(18444492273895866368), &vm_context);
    assert_eq!(result, -2251799813685248 as i64);
}

// Line 460
fn c400_l460_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c400_l460_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f64::from_bits(9219994337134247936), &vm_context);
    assert_eq!(result, 9219994337134247936 as i64);
}

// Line 461
fn c401_l461_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c401_l461_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f64::from_bits(18443366373989023744), &vm_context);
    assert_eq!(result, -3377699720527872 as i64);
}

#[test]
fn test_module_1() {
    let result_object = create_module_1();
    let vm_context = result_object.instance.generate_context();
    // We group the calls together
    start_module_1(&result_object, &vm_context);
    c1_l29_action_invoke(&result_object, &vm_context);
    c2_l30_action_invoke(&result_object, &vm_context);
    c3_l31_action_invoke(&result_object, &vm_context);
    c4_l32_action_invoke(&result_object, &vm_context);
    c5_l33_action_invoke(&result_object, &vm_context);
    c6_l34_action_invoke(&result_object, &vm_context);
    c7_l36_action_invoke(&result_object, &vm_context);
    c8_l37_action_invoke(&result_object, &vm_context);
    c9_l38_action_invoke(&result_object, &vm_context);
    c10_l39_action_invoke(&result_object, &vm_context);
    c11_l40_action_invoke(&result_object, &vm_context);
    c12_l41_action_invoke(&result_object, &vm_context);
    c13_l43_action_invoke(&result_object, &vm_context);
    c14_l44_action_invoke(&result_object, &vm_context);
    c15_l45_action_invoke(&result_object, &vm_context);
    c16_l46_action_invoke(&result_object, &vm_context);
    c17_l47_action_invoke(&result_object, &vm_context);
    c18_l48_action_invoke(&result_object, &vm_context);
    c19_l49_action_invoke(&result_object, &vm_context);
    c20_l50_action_invoke(&result_object, &vm_context);
    c21_l51_action_invoke(&result_object, &vm_context);
    c22_l52_action_invoke(&result_object, &vm_context);
    c23_l53_action_invoke(&result_object, &vm_context);
    c24_l54_action_invoke(&result_object, &vm_context);
    c25_l56_action_invoke(&result_object, &vm_context);
    c26_l57_action_invoke(&result_object, &vm_context);
    c27_l58_action_invoke(&result_object, &vm_context);
    c28_l59_action_invoke(&result_object, &vm_context);
    c29_l60_action_invoke(&result_object, &vm_context);
    c30_l61_action_invoke(&result_object, &vm_context);
    c31_l62_action_invoke(&result_object, &vm_context);
    c32_l63_action_invoke(&result_object, &vm_context);
    c33_l64_action_invoke(&result_object, &vm_context);
    c34_l65_action_invoke(&result_object, &vm_context);
    c35_l66_action_invoke(&result_object, &vm_context);
    c36_l67_action_invoke(&result_object, &vm_context);
    c37_l68_action_invoke(&result_object, &vm_context);
    c38_l69_action_invoke(&result_object, &vm_context);
    c47_l79_action_invoke(&result_object, &vm_context);
    c48_l80_action_invoke(&result_object, &vm_context);
    c49_l81_action_invoke(&result_object, &vm_context);
    c50_l82_action_invoke(&result_object, &vm_context);
    c51_l83_action_invoke(&result_object, &vm_context);
    c52_l84_action_invoke(&result_object, &vm_context);
    c53_l85_action_invoke(&result_object, &vm_context);
    c54_l86_action_invoke(&result_object, &vm_context);
    c55_l87_action_invoke(&result_object, &vm_context);
    c56_l88_action_invoke(&result_object, &vm_context);
    c57_l89_action_invoke(&result_object, &vm_context);
    c58_l90_action_invoke(&result_object, &vm_context);
    c59_l91_action_invoke(&result_object, &vm_context);
    c68_l101_action_invoke(&result_object, &vm_context);
    c69_l102_action_invoke(&result_object, &vm_context);
    c70_l103_action_invoke(&result_object, &vm_context);
    c71_l104_action_invoke(&result_object, &vm_context);
    c72_l105_action_invoke(&result_object, &vm_context);
    c73_l106_action_invoke(&result_object, &vm_context);
    c74_l107_action_invoke(&result_object, &vm_context);
    c75_l108_action_invoke(&result_object, &vm_context);
    c76_l109_action_invoke(&result_object, &vm_context);
    c77_l110_action_invoke(&result_object, &vm_context);
    c78_l111_action_invoke(&result_object, &vm_context);
    c79_l112_action_invoke(&result_object, &vm_context);
    c80_l113_action_invoke(&result_object, &vm_context);
    c81_l114_action_invoke(&result_object, &vm_context);
    c90_l124_action_invoke(&result_object, &vm_context);
    c91_l125_action_invoke(&result_object, &vm_context);
    c92_l126_action_invoke(&result_object, &vm_context);
    c93_l127_action_invoke(&result_object, &vm_context);
    c94_l128_action_invoke(&result_object, &vm_context);
    c95_l129_action_invoke(&result_object, &vm_context);
    c96_l130_action_invoke(&result_object, &vm_context);
    c97_l131_action_invoke(&result_object, &vm_context);
    c98_l132_action_invoke(&result_object, &vm_context);
    c99_l133_action_invoke(&result_object, &vm_context);
    c100_l134_action_invoke(&result_object, &vm_context);
    c101_l135_action_invoke(&result_object, &vm_context);
    c102_l136_action_invoke(&result_object, &vm_context);
    c103_l137_action_invoke(&result_object, &vm_context);
    c115_l150_action_invoke(&result_object, &vm_context);
    c116_l151_action_invoke(&result_object, &vm_context);
    c117_l152_action_invoke(&result_object, &vm_context);
    c118_l153_action_invoke(&result_object, &vm_context);
    c119_l154_action_invoke(&result_object, &vm_context);
    c120_l155_action_invoke(&result_object, &vm_context);
    c121_l156_action_invoke(&result_object, &vm_context);
    c122_l157_action_invoke(&result_object, &vm_context);
    c123_l158_action_invoke(&result_object, &vm_context);
    c124_l159_action_invoke(&result_object, &vm_context);
    c125_l160_action_invoke(&result_object, &vm_context);
    c126_l161_action_invoke(&result_object, &vm_context);
    c127_l162_action_invoke(&result_object, &vm_context);
    c128_l163_action_invoke(&result_object, &vm_context);
    c129_l164_action_invoke(&result_object, &vm_context);
    c130_l165_action_invoke(&result_object, &vm_context);
    c139_l175_action_invoke(&result_object, &vm_context);
    c140_l176_action_invoke(&result_object, &vm_context);
    c141_l177_action_invoke(&result_object, &vm_context);
    c142_l178_action_invoke(&result_object, &vm_context);
    c143_l179_action_invoke(&result_object, &vm_context);
    c144_l180_action_invoke(&result_object, &vm_context);
    c145_l181_action_invoke(&result_object, &vm_context);
    c146_l182_action_invoke(&result_object, &vm_context);
    c147_l183_action_invoke(&result_object, &vm_context);
    c148_l184_action_invoke(&result_object, &vm_context);
    c149_l185_action_invoke(&result_object, &vm_context);
    c158_l195_action_invoke(&result_object, &vm_context);
    c159_l196_action_invoke(&result_object, &vm_context);
    c160_l197_action_invoke(&result_object, &vm_context);
    c161_l198_action_invoke(&result_object, &vm_context);
    c162_l199_action_invoke(&result_object, &vm_context);
    c163_l200_action_invoke(&result_object, &vm_context);
    c164_l201_action_invoke(&result_object, &vm_context);
    c165_l202_action_invoke(&result_object, &vm_context);
    c166_l203_action_invoke(&result_object, &vm_context);
    c167_l204_action_invoke(&result_object, &vm_context);
    c168_l205_action_invoke(&result_object, &vm_context);
    c169_l206_action_invoke(&result_object, &vm_context);
    c170_l207_action_invoke(&result_object, &vm_context);
    c171_l208_action_invoke(&result_object, &vm_context);
    c172_l209_action_invoke(&result_object, &vm_context);
    c173_l210_action_invoke(&result_object, &vm_context);
    c182_l220_action_invoke(&result_object, &vm_context);
    c183_l221_action_invoke(&result_object, &vm_context);
    c184_l222_action_invoke(&result_object, &vm_context);
    c185_l223_action_invoke(&result_object, &vm_context);
    c186_l224_action_invoke(&result_object, &vm_context);
    c187_l225_action_invoke(&result_object, &vm_context);
    c188_l226_action_invoke(&result_object, &vm_context);
    c189_l227_action_invoke(&result_object, &vm_context);
    c190_l228_action_invoke(&result_object, &vm_context);
    c191_l229_action_invoke(&result_object, &vm_context);
    c192_l230_action_invoke(&result_object, &vm_context);
    c193_l231_action_invoke(&result_object, &vm_context);
    c194_l232_action_invoke(&result_object, &vm_context);
    c195_l233_action_invoke(&result_object, &vm_context);
    c196_l234_action_invoke(&result_object, &vm_context);
    c205_l244_action_invoke(&result_object, &vm_context);
    c206_l245_action_invoke(&result_object, &vm_context);
    c207_l246_action_invoke(&result_object, &vm_context);
    c208_l247_action_invoke(&result_object, &vm_context);
    c209_l248_action_invoke(&result_object, &vm_context);
    c210_l249_action_invoke(&result_object, &vm_context);
    c211_l251_action_invoke(&result_object, &vm_context);
    c212_l252_action_invoke(&result_object, &vm_context);
    c213_l253_action_invoke(&result_object, &vm_context);
    c214_l254_action_invoke(&result_object, &vm_context);
    c215_l256_action_invoke(&result_object, &vm_context);
    c216_l257_action_invoke(&result_object, &vm_context);
    c217_l258_action_invoke(&result_object, &vm_context);
    c218_l259_action_invoke(&result_object, &vm_context);
    c219_l260_action_invoke(&result_object, &vm_context);
    c220_l261_action_invoke(&result_object, &vm_context);
    c221_l263_action_invoke(&result_object, &vm_context);
    c222_l264_action_invoke(&result_object, &vm_context);
    c223_l265_action_invoke(&result_object, &vm_context);
    c224_l266_action_invoke(&result_object, &vm_context);
    c225_l268_action_invoke(&result_object, &vm_context);
    c226_l269_action_invoke(&result_object, &vm_context);
    c227_l270_action_invoke(&result_object, &vm_context);
    c228_l271_action_invoke(&result_object, &vm_context);
    c229_l272_action_invoke(&result_object, &vm_context);
    c230_l273_action_invoke(&result_object, &vm_context);
    c231_l275_action_invoke(&result_object, &vm_context);
    c232_l276_action_invoke(&result_object, &vm_context);
    c233_l277_action_invoke(&result_object, &vm_context);
    c234_l278_action_invoke(&result_object, &vm_context);
    c235_l279_action_invoke(&result_object, &vm_context);
    c236_l280_action_invoke(&result_object, &vm_context);
    c237_l282_action_invoke(&result_object, &vm_context);
    c238_l283_action_invoke(&result_object, &vm_context);
    c239_l284_action_invoke(&result_object, &vm_context);
    c240_l285_action_invoke(&result_object, &vm_context);
    c241_l287_action_invoke(&result_object, &vm_context);
    c242_l288_action_invoke(&result_object, &vm_context);
    c243_l289_action_invoke(&result_object, &vm_context);
    c244_l290_action_invoke(&result_object, &vm_context);
    c245_l291_action_invoke(&result_object, &vm_context);
    c246_l292_action_invoke(&result_object, &vm_context);
    c247_l293_action_invoke(&result_object, &vm_context);
    c248_l294_action_invoke(&result_object, &vm_context);
    c249_l295_action_invoke(&result_object, &vm_context);
    c250_l296_action_invoke(&result_object, &vm_context);
    c251_l297_action_invoke(&result_object, &vm_context);
    c252_l298_action_invoke(&result_object, &vm_context);
    c253_l300_action_invoke(&result_object, &vm_context);
    c254_l301_action_invoke(&result_object, &vm_context);
    c255_l303_action_invoke(&result_object, &vm_context);
    c256_l304_action_invoke(&result_object, &vm_context);
    c257_l305_action_invoke(&result_object, &vm_context);
    c258_l306_action_invoke(&result_object, &vm_context);
    c259_l307_action_invoke(&result_object, &vm_context);
    c260_l309_action_invoke(&result_object, &vm_context);
    c261_l310_action_invoke(&result_object, &vm_context);
    c262_l312_action_invoke(&result_object, &vm_context);
    c263_l313_action_invoke(&result_object, &vm_context);
    c264_l314_action_invoke(&result_object, &vm_context);
    c265_l315_action_invoke(&result_object, &vm_context);
    c266_l316_action_invoke(&result_object, &vm_context);
    c267_l318_action_invoke(&result_object, &vm_context);
    c268_l319_action_invoke(&result_object, &vm_context);
    c269_l320_action_invoke(&result_object, &vm_context);
    c270_l321_action_invoke(&result_object, &vm_context);
    c271_l322_action_invoke(&result_object, &vm_context);
    c272_l323_action_invoke(&result_object, &vm_context);
    c273_l324_action_invoke(&result_object, &vm_context);
    c274_l325_action_invoke(&result_object, &vm_context);
    c275_l326_action_invoke(&result_object, &vm_context);
    c276_l327_action_invoke(&result_object, &vm_context);
    c277_l328_action_invoke(&result_object, &vm_context);
    c278_l330_action_invoke(&result_object, &vm_context);
    c279_l331_action_invoke(&result_object, &vm_context);
    c280_l333_action_invoke(&result_object, &vm_context);
    c281_l334_action_invoke(&result_object, &vm_context);
    c282_l335_action_invoke(&result_object, &vm_context);
    c283_l336_action_invoke(&result_object, &vm_context);
    c284_l337_action_invoke(&result_object, &vm_context);
    c285_l338_action_invoke(&result_object, &vm_context);
    c286_l339_action_invoke(&result_object, &vm_context);
    c287_l340_action_invoke(&result_object, &vm_context);
    c288_l342_action_invoke(&result_object, &vm_context);
    c289_l344_action_invoke(&result_object, &vm_context);
    c290_l345_action_invoke(&result_object, &vm_context);
    c291_l346_action_invoke(&result_object, &vm_context);
    c296_l352_action_invoke(&result_object, &vm_context);
    c297_l353_action_invoke(&result_object, &vm_context);
    c298_l354_action_invoke(&result_object, &vm_context);
    c299_l355_action_invoke(&result_object, &vm_context);
    c300_l356_action_invoke(&result_object, &vm_context);
    c301_l357_action_invoke(&result_object, &vm_context);
    c302_l358_action_invoke(&result_object, &vm_context);
    c303_l359_action_invoke(&result_object, &vm_context);
    c304_l360_action_invoke(&result_object, &vm_context);
    c305_l361_action_invoke(&result_object, &vm_context);
    c306_l362_action_invoke(&result_object, &vm_context);
    c307_l363_action_invoke(&result_object, &vm_context);
    c308_l364_action_invoke(&result_object, &vm_context);
    c309_l365_action_invoke(&result_object, &vm_context);
    c310_l366_action_invoke(&result_object, &vm_context);
    c311_l367_action_invoke(&result_object, &vm_context);
    c312_l368_action_invoke(&result_object, &vm_context);
    c313_l369_action_invoke(&result_object, &vm_context);
    c314_l370_action_invoke(&result_object, &vm_context);
    c315_l371_action_invoke(&result_object, &vm_context);
    c316_l372_action_invoke(&result_object, &vm_context);
    c317_l373_action_invoke(&result_object, &vm_context);
    c318_l374_action_invoke(&result_object, &vm_context);
    c319_l375_action_invoke(&result_object, &vm_context);
    c320_l376_action_invoke(&result_object, &vm_context);
    c321_l377_action_invoke(&result_object, &vm_context);
    c322_l378_action_invoke(&result_object, &vm_context);
    c323_l379_action_invoke(&result_object, &vm_context);
    c324_l380_action_invoke(&result_object, &vm_context);
    c325_l381_action_invoke(&result_object, &vm_context);
    c326_l382_action_invoke(&result_object, &vm_context);
    c327_l383_action_invoke(&result_object, &vm_context);
    c328_l384_action_invoke(&result_object, &vm_context);
    c329_l385_action_invoke(&result_object, &vm_context);
    c330_l386_action_invoke(&result_object, &vm_context);
    c331_l387_action_invoke(&result_object, &vm_context);
    c332_l388_action_invoke(&result_object, &vm_context);
    c333_l389_action_invoke(&result_object, &vm_context);
    c334_l390_action_invoke(&result_object, &vm_context);
    c335_l391_action_invoke(&result_object, &vm_context);
    c336_l392_action_invoke(&result_object, &vm_context);
    c337_l393_action_invoke(&result_object, &vm_context);
    c342_l398_action_invoke(&result_object, &vm_context);
    c343_l399_action_invoke(&result_object, &vm_context);
    c344_l400_action_invoke(&result_object, &vm_context);
    c345_l401_action_invoke(&result_object, &vm_context);
    c346_l402_action_invoke(&result_object, &vm_context);
    c347_l403_action_invoke(&result_object, &vm_context);
    c348_l405_action_invoke(&result_object, &vm_context);
    c349_l406_action_invoke(&result_object, &vm_context);
    c350_l407_action_invoke(&result_object, &vm_context);
    c351_l408_action_invoke(&result_object, &vm_context);
    c352_l409_action_invoke(&result_object, &vm_context);
    c353_l410_action_invoke(&result_object, &vm_context);
    c354_l411_action_invoke(&result_object, &vm_context);
    c355_l412_action_invoke(&result_object, &vm_context);
    c356_l413_action_invoke(&result_object, &vm_context);
    c357_l414_action_invoke(&result_object, &vm_context);
    c358_l415_action_invoke(&result_object, &vm_context);
    c359_l416_action_invoke(&result_object, &vm_context);
    c360_l418_action_invoke(&result_object, &vm_context);
    c361_l419_action_invoke(&result_object, &vm_context);
    c362_l420_action_invoke(&result_object, &vm_context);
    c363_l421_action_invoke(&result_object, &vm_context);
    c364_l422_action_invoke(&result_object, &vm_context);
    c365_l423_action_invoke(&result_object, &vm_context);
    c366_l424_action_invoke(&result_object, &vm_context);
    c367_l425_action_invoke(&result_object, &vm_context);
    c368_l426_action_invoke(&result_object, &vm_context);
    c369_l427_action_invoke(&result_object, &vm_context);
    c370_l428_action_invoke(&result_object, &vm_context);
    c371_l429_action_invoke(&result_object, &vm_context);
    c372_l431_action_invoke(&result_object, &vm_context);
    c373_l432_action_invoke(&result_object, &vm_context);
    c374_l433_action_invoke(&result_object, &vm_context);
    c375_l434_action_invoke(&result_object, &vm_context);
    c376_l435_action_invoke(&result_object, &vm_context);
    c377_l436_action_invoke(&result_object, &vm_context);
    c378_l437_action_invoke(&result_object, &vm_context);
    c379_l438_action_invoke(&result_object, &vm_context);
    c380_l439_action_invoke(&result_object, &vm_context);
    c381_l440_action_invoke(&result_object, &vm_context);
    c382_l441_action_invoke(&result_object, &vm_context);
    c383_l442_action_invoke(&result_object, &vm_context);
    c384_l443_action_invoke(&result_object, &vm_context);
    c385_l444_action_invoke(&result_object, &vm_context);
    c386_l445_action_invoke(&result_object, &vm_context);
    c387_l447_action_invoke(&result_object, &vm_context);
    c388_l448_action_invoke(&result_object, &vm_context);
    c389_l449_action_invoke(&result_object, &vm_context);
    c390_l450_action_invoke(&result_object, &vm_context);
    c391_l451_action_invoke(&result_object, &vm_context);
    c392_l452_action_invoke(&result_object, &vm_context);
    c393_l453_action_invoke(&result_object, &vm_context);
    c394_l454_action_invoke(&result_object, &vm_context);
    c395_l455_action_invoke(&result_object, &vm_context);
    c396_l456_action_invoke(&result_object, &vm_context);
    c397_l457_action_invoke(&result_object, &vm_context);
    c398_l458_action_invoke(&result_object, &vm_context);
    c399_l459_action_invoke(&result_object, &vm_context);
    c400_l460_action_invoke(&result_object, &vm_context);
    c401_l461_action_invoke(&result_object, &vm_context);
}
