// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/conversions.wast
#![allow(
    warnings,
    dead_code
)]
use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, VmCtx, Export};
use super::_common::spectest_importobject;
use wabt::wat2wasm;


// Line 1
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param i32) (result i64)))
      (type (;1;) (func (param i64) (result i32)))
      (type (;2;) (func (param f32) (result i32)))
      (type (;3;) (func (param f64) (result i32)))
      (type (;4;) (func (param f32) (result i64)))
      (type (;5;) (func (param f64) (result i64)))
      (type (;6;) (func (param i32) (result f32)))
      (type (;7;) (func (param i64) (result f32)))
      (type (;8;) (func (param i32) (result f64)))
      (type (;9;) (func (param i64) (result f64)))
      (type (;10;) (func (param f32) (result f64)))
      (type (;11;) (func (param f64) (result f32)))
      (func (;0;) (type 0) (param i32) (result i64)
        get_local 0
        i64.extend_s/i32)
      (func (;1;) (type 0) (param i32) (result i64)
        get_local 0
        i64.extend_u/i32)
      (func (;2;) (type 1) (param i64) (result i32)
        get_local 0
        i32.wrap/i64)
      (func (;3;) (type 2) (param f32) (result i32)
        get_local 0
        i32.trunc_s/f32)
      (func (;4;) (type 2) (param f32) (result i32)
        get_local 0
        i32.trunc_u/f32)
      (func (;5;) (type 3) (param f64) (result i32)
        get_local 0
        i32.trunc_s/f64)
      (func (;6;) (type 3) (param f64) (result i32)
        get_local 0
        i32.trunc_u/f64)
      (func (;7;) (type 4) (param f32) (result i64)
        get_local 0
        i64.trunc_s/f32)
      (func (;8;) (type 4) (param f32) (result i64)
        get_local 0
        i64.trunc_u/f32)
      (func (;9;) (type 5) (param f64) (result i64)
        get_local 0
        i64.trunc_s/f64)
      (func (;10;) (type 5) (param f64) (result i64)
        get_local 0
        i64.trunc_u/f64)
      (func (;11;) (type 6) (param i32) (result f32)
        get_local 0
        f32.convert_s/i32)
      (func (;12;) (type 7) (param i64) (result f32)
        get_local 0
        f32.convert_s/i64)
      (func (;13;) (type 8) (param i32) (result f64)
        get_local 0
        f64.convert_s/i32)
      (func (;14;) (type 9) (param i64) (result f64)
        get_local 0
        f64.convert_s/i64)
      (func (;15;) (type 6) (param i32) (result f32)
        get_local 0
        f32.convert_u/i32)
      (func (;16;) (type 7) (param i64) (result f32)
        get_local 0
        f32.convert_u/i64)
      (func (;17;) (type 8) (param i32) (result f64)
        get_local 0
        f64.convert_u/i32)
      (func (;18;) (type 9) (param i64) (result f64)
        get_local 0
        f64.convert_u/i64)
      (func (;19;) (type 10) (param f32) (result f64)
        get_local 0
        f64.promote/f32)
      (func (;20;) (type 11) (param f64) (result f32)
        get_local 0
        f32.demote/f64)
      (func (;21;) (type 6) (param i32) (result f32)
        get_local 0
        f32.reinterpret/i32)
      (func (;22;) (type 9) (param i64) (result f64)
        get_local 0
        f64.reinterpret/i64)
      (func (;23;) (type 2) (param f32) (result i32)
        get_local 0
        i32.reinterpret/f32)
      (func (;24;) (type 5) (param f64) (result i64)
        get_local 0
        i64.reinterpret/f64)
      (export \"i64.extend_s_i32\" (func 0))
      (export \"i64.extend_u_i32\" (func 1))
      (export \"i32.wrap_i64\" (func 2))
      (export \"i32.trunc_s_f32\" (func 3))
      (export \"i32.trunc_u_f32\" (func 4))
      (export \"i32.trunc_s_f64\" (func 5))
      (export \"i32.trunc_u_f64\" (func 6))
      (export \"i64.trunc_s_f32\" (func 7))
      (export \"i64.trunc_u_f32\" (func 8))
      (export \"i64.trunc_s_f64\" (func 9))
      (export \"i64.trunc_u_f64\" (func 10))
      (export \"f32.convert_s_i32\" (func 11))
      (export \"f32.convert_s_i64\" (func 12))
      (export \"f64.convert_s_i32\" (func 13))
      (export \"f64.convert_s_i64\" (func 14))
      (export \"f32.convert_u_i32\" (func 15))
      (export \"f32.convert_u_i64\" (func 16))
      (export \"f64.convert_u_i32\" (func 17))
      (export \"f64.convert_u_i64\" (func 18))
      (export \"f64.promote_f32\" (func 19))
      (export \"f32.demote_f64\" (func 20))
      (export \"f32.reinterpret_i32\" (func 21))
      (export \"f64.reinterpret_i64\" (func 22))
      (export \"i32.reinterpret_f32\" (func 23))
      (export \"i64.reinterpret_f64\" (func 24)))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 29
fn l29_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l29_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 30
fn l30_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l30_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(10000 as i32, &vm_context);
    assert_eq!(result, 10000 as i64);
}

// Line 31
fn l31_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l31_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-10000 as i32, &vm_context);
    assert_eq!(result, -10000 as i64);
}

// Line 32
fn l32_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l32_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 33
fn l33_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l33_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 2147483647 as i64);
}

// Line 34
fn l34_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l34_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, -2147483648 as i64);
}

// Line 36
fn l36_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l36_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 37
fn l37_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l37_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(10000 as i32, &vm_context);
    assert_eq!(result, 10000 as i64);
}

// Line 38
fn l38_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l38_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-10000 as i32, &vm_context);
    assert_eq!(result, 4294957296 as i64);
}

// Line 39
fn l39_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l39_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, 4294967295 as i64);
}

// Line 40
fn l40_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l40_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 2147483647 as i64);
}

// Line 41
fn l41_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l41_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, 2147483648 as i64);
}

// Line 43
fn l43_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l43_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 44
fn l44_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l44_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-100000 as i64, &vm_context);
    assert_eq!(result, -100000 as i32);
}

// Line 45
fn l45_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l45_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483648 as i64, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 46
fn l46_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l46_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483649 as i64, &vm_context);
    assert_eq!(result, 2147483647 as i32);
}

// Line 47
fn l47_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l47_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4294967296 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 48
fn l48_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l48_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4294967297 as i64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 49
fn l49_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l49_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4294967295 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 50
fn l50_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l50_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 51
fn l51_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l51_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1311768467463790320 as i64, &vm_context);
    assert_eq!(result, -1698898192 as i32);
}

// Line 52
fn l52_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l52_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967295 as i64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 53
fn l53_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l53_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967296 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 54
fn l54_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l54_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967297 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 56
fn l56_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l56_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 57
fn l57_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l57_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 58
fn l58_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l58_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 59
fn l59_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l59_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 60
fn l60_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l60_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 61
fn l61_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l61_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 62
fn l62_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l62_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 63
fn l63_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l63_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 64
fn l64_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l64_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.1 as f32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 65
fn l65_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l65_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.5 as f32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 66
fn l66_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l66_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.9 as f32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 67
fn l67_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l67_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2.0 as f32, &vm_context);
    assert_eq!(result, -2 as i32);
}

// Line 68
fn l68_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l68_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483500.0 as f32, &vm_context);
    assert_eq!(result, 2147483520 as i32);
}

// Line 69
fn l69_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l69_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483600.0 as f32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 70

// Line 71

// Line 72

// Line 73

// Line 74

// Line 77

// Line 81
fn l81_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l81_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 82
fn l82_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l82_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 83
fn l83_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l83_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 84
fn l84_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l84_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 85
fn l85_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l85_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 86
fn l86_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l86_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 87
fn l87_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l87_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 88
fn l88_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l88_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.9 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 89
fn l89_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l89_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2.0 as f32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 90
fn l90_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l90_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483600.0 as f32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 91
fn l91_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l91_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967000.0 as f32, &vm_context);
    assert_eq!(result, -256 as i32);
}

// Line 92
fn l92_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l92_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.9 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 93
fn l93_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l93_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.99999994 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 94

// Line 95

// Line 96

// Line 97

// Line 98

// Line 101

// Line 105
fn l105_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l105_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 106
fn l106_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l106_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 107
fn l107_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l107_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 108
fn l108_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l108_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 109
fn l109_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l109_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 110
fn l110_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l110_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 111
fn l111_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l111_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 112
fn l112_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l112_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 113
fn l113_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l113_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.1 as f64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 114
fn l114_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l114_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.5 as f64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 115
fn l115_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l115_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.9 as f64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 116
fn l116_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l116_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2.0 as f64, &vm_context);
    assert_eq!(result, -2 as i32);
}

// Line 117
fn l117_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l117_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647.0 as f64, &vm_context);
    assert_eq!(result, 2147483647 as i32);
}

// Line 118
fn l118_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l118_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648.0 as f64, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 119

// Line 120

// Line 121

// Line 122

// Line 123

// Line 126

// Line 130
fn l130_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l130_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 131
fn l131_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l131_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 132
fn l132_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l132_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 133
fn l133_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l133_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 134
fn l134_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l134_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 135
fn l135_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l135_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 136
fn l136_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l136_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 137
fn l137_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l137_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.9 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 138
fn l138_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l138_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2.0 as f64, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 139
fn l139_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l139_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483648.0 as f64, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 140
fn l140_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l140_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967295.0 as f64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 141
fn l141_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l141_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.9 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 142
fn l142_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l142_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.9999999999999999 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 143
fn l143_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l143_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(100000000.0 as f64, &vm_context);
    assert_eq!(result, 100000000 as i32);
}

// Line 144

// Line 145

// Line 146

// Line 147

// Line 148

// Line 149

// Line 150

// Line 151

// Line 154

// Line 158
fn l158_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l158_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 159
fn l159_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l159_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 160
fn l160_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l160_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 161
fn l161_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l161_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 162
fn l162_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l162_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 163
fn l163_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l163_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f32, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 164
fn l164_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l164_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f32, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 165
fn l165_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l165_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 166
fn l166_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l166_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.1 as f32, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 167
fn l167_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l167_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.5 as f32, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 168
fn l168_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l168_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.9 as f32, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 169
fn l169_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l169_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2.0 as f32, &vm_context);
    assert_eq!(result, -2 as i64);
}

// Line 170
fn l170_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l170_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967300.0 as f32, &vm_context);
    assert_eq!(result, 4294967296 as i64);
}

// Line 171
fn l171_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l171_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4294967300.0 as f32, &vm_context);
    assert_eq!(result, -4294967296 as i64);
}

// Line 172
fn l172_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l172_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223371500000000000.0 as f32, &vm_context);
    assert_eq!(result, 9223371487098961920 as i64);
}

// Line 173
fn l173_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l173_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372000000000000.0 as f32, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 174

// Line 175

// Line 176

// Line 177

// Line 178

// Line 181

// Line 185
fn l185_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l185_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 186
fn l186_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l186_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 187
fn l187_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l187_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 188
fn l188_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l188_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 189
fn l189_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l189_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 190
fn l190_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l190_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f32, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 191
fn l191_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l191_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f32, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 192
fn l192_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l192_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967300.0 as f32, &vm_context);
    assert_eq!(result, 4294967296 as i64);
}

// Line 193
fn l193_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l193_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(18446743000000000000.0 as f32, &vm_context);
    assert_eq!(result, -1099511627776 as i64);
}

// Line 194
fn l194_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l194_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.9 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 195
fn l195_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l195_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.99999994 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 196

// Line 197

// Line 198

// Line 199

// Line 200

// Line 203

// Line 207
fn l207_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l207_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 208
fn l208_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l208_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 209
fn l209_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l209_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 210
fn l210_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l210_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 211
fn l211_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l211_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 212
fn l212_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l212_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 213
fn l213_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l213_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 214
fn l214_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l214_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 215
fn l215_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l215_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.1 as f64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 216
fn l216_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l216_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.5 as f64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 217
fn l217_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l217_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.9 as f64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 218
fn l218_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l218_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2.0 as f64, &vm_context);
    assert_eq!(result, -2 as i64);
}

// Line 219
fn l219_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l219_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967296.0 as f64, &vm_context);
    assert_eq!(result, 4294967296 as i64);
}

// Line 220
fn l220_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l220_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4294967296.0 as f64, &vm_context);
    assert_eq!(result, -4294967296 as i64);
}

// Line 221
fn l221_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l221_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775000.0 as f64, &vm_context);
    assert_eq!(result, 9223372036854774784 as i64);
}

// Line 222
fn l222_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l222_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854776000.0 as f64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 223

// Line 224

// Line 225

// Line 226

// Line 227

// Line 230

// Line 234
fn l234_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l234_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 235
fn l235_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l235_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 236
fn l236_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l236_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 237
fn l237_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l237_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 238
fn l238_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l238_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 239
fn l239_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l239_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 240
fn l240_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l240_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 241
fn l241_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l241_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967295.0 as f64, &vm_context);
    assert_eq!(result, 4294967295 as i64);
}

// Line 242
fn l242_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l242_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967296.0 as f64, &vm_context);
    assert_eq!(result, 4294967296 as i64);
}

// Line 243
fn l243_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l243_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(18446744073709550000.0 as f64, &vm_context);
    assert_eq!(result, -2048 as i64);
}

// Line 244
fn l244_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l244_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.9 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 245
fn l245_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l245_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.9999999999999999 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 246
fn l246_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l246_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(100000000.0 as f64, &vm_context);
    assert_eq!(result, 100000000 as i64);
}

// Line 247
fn l247_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l247_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(10000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 10000000000000000 as i64);
}

// Line 248
fn l248_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l248_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854776000.0 as f64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 249

// Line 250

// Line 251

// Line 252

// Line 253

// Line 256

// Line 260
fn l260_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l260_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 261
fn l261_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l261_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, -1.0 as f32);
}

// Line 262
fn l262_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l262_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 263
fn l263_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l263_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 2147483600.0 as f32);
}

// Line 264
fn l264_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l264_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, -2147483600.0 as f32);
}

// Line 265
fn l265_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l265_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1234567890 as i32, &vm_context);
    assert_eq!(result, 1234568000.0 as f32);
}

// Line 267
fn l267_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l267_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777217 as i32, &vm_context);
    assert_eq!(result, 16777216.0 as f32);
}

// Line 268
fn l268_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l268_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-16777217 as i32, &vm_context);
    assert_eq!(result, -16777216.0 as f32);
}

// Line 269
fn l269_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l269_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777219 as i32, &vm_context);
    assert_eq!(result, 16777220.0 as f32);
}

// Line 270
fn l270_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l270_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-16777219 as i32, &vm_context);
    assert_eq!(result, -16777220.0 as f32);
}

// Line 272
fn l272_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l272_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 273
fn l273_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l273_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, -1.0 as f32);
}

// Line 274
fn l274_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l274_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 275
fn l275_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l275_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 9223372000000000000.0 as f32);
}

// Line 276
fn l276_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l276_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &vm_context);
    assert_eq!(result, -9223372000000000000.0 as f32);
}

// Line 277
fn l277_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l277_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(314159265358979 as i64, &vm_context);
    assert_eq!(result, 314159280000000.0 as f32);
}

// Line 279
fn l279_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l279_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777217 as i64, &vm_context);
    assert_eq!(result, 16777216.0 as f32);
}

// Line 280
fn l280_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l280_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-16777217 as i64, &vm_context);
    assert_eq!(result, -16777216.0 as f32);
}

// Line 281
fn l281_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l281_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777219 as i64, &vm_context);
    assert_eq!(result, 16777220.0 as f32);
}

// Line 282
fn l282_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l282_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-16777219 as i64, &vm_context);
    assert_eq!(result, -16777220.0 as f32);
}

// Line 284
fn l284_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l284_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 285
fn l285_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l285_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 286
fn l286_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l286_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 287
fn l287_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l287_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 2147483647.0 as f64);
}

// Line 288
fn l288_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l288_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, -2147483648.0 as f64);
}

// Line 289
fn l289_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l289_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(987654321 as i32, &vm_context);
    assert_eq!(result, 987654321.0 as f64);
}

// Line 291
fn l291_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l291_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 292
fn l292_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l292_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 293
fn l293_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l293_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 294
fn l294_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l294_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 9223372036854776000.0 as f64);
}

// Line 295
fn l295_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l295_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &vm_context);
    assert_eq!(result, -9223372036854776000.0 as f64);
}

// Line 296
fn l296_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l296_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4669201609102990 as i64, &vm_context);
    assert_eq!(result, 4669201609102990.0 as f64);
}

// Line 298
fn l298_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l298_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9007199254740993 as i64, &vm_context);
    assert_eq!(result, 9007199254740992.0 as f64);
}

// Line 299
fn l299_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l299_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9007199254740993 as i64, &vm_context);
    assert_eq!(result, -9007199254740992.0 as f64);
}

// Line 300
fn l300_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l300_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9007199254740995 as i64, &vm_context);
    assert_eq!(result, 9007199254740996.0 as f64);
}

// Line 301
fn l301_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l301_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9007199254740995 as i64, &vm_context);
    assert_eq!(result, -9007199254740996.0 as f64);
}

// Line 303
fn l303_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l303_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 304
fn l304_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l304_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 305
fn l305_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l305_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 2147483600.0 as f32);
}

// Line 306
fn l306_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l306_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, 2147483600.0 as f32);
}

// Line 307
fn l307_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l307_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(305419896 as i32, &vm_context);
    assert_eq!(result, 305419900.0 as f32);
}

// Line 308
fn l308_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l308_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, 4294967300.0 as f32);
}

// Line 309
fn l309_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l309_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483520 as i32, &vm_context);
    assert_eq!(result, 2147483600.0 as f32);
}

// Line 310
fn l310_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l310_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483519 as i32, &vm_context);
    assert_eq!(result, 2147484000.0 as f32);
}

// Line 311
fn l311_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l311_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483518 as i32, &vm_context);
    assert_eq!(result, 2147484000.0 as f32);
}

// Line 312
fn l312_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l312_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-384 as i32, &vm_context);
    assert_eq!(result, 4294966800.0 as f32);
}

// Line 313
fn l313_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l313_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-383 as i32, &vm_context);
    assert_eq!(result, 4294967000.0 as f32);
}

// Line 314
fn l314_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l314_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-382 as i32, &vm_context);
    assert_eq!(result, 4294967000.0 as f32);
}

// Line 316
fn l316_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l316_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777217 as i32, &vm_context);
    assert_eq!(result, 16777216.0 as f32);
}

// Line 317
fn l317_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l317_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777219 as i32, &vm_context);
    assert_eq!(result, 16777220.0 as f32);
}

// Line 319
fn l319_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l319_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 320
fn l320_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l320_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 321
fn l321_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l321_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 9223372000000000000.0 as f32);
}

// Line 322
fn l322_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l322_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 9223372000000000000.0 as f32);
}

// Line 323
fn l323_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l323_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, 18446744000000000000.0 as f32);
}

// Line 325
fn l325_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l325_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777217 as i64, &vm_context);
    assert_eq!(result, 16777216.0 as f32);
}

// Line 326
fn l326_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l326_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777219 as i64, &vm_context);
    assert_eq!(result, 16777220.0 as f32);
}

// Line 328
fn l328_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l328_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 329
fn l329_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l329_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 330
fn l330_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l330_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 2147483647.0 as f64);
}

// Line 331
fn l331_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l331_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, 2147483648.0 as f64);
}

// Line 332
fn l332_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l332_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, 4294967295.0 as f64);
}

// Line 334
fn l334_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l334_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 335
fn l335_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l335_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 336
fn l336_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l336_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 9223372036854776000.0 as f64);
}

// Line 337
fn l337_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l337_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 9223372036854776000.0 as f64);
}

// Line 338
fn l338_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l338_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, 18446744073709552000.0 as f64);
}

// Line 339
fn l339_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l339_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854774784 as i64, &vm_context);
    assert_eq!(result, 9223372036854776000.0 as f64);
}

// Line 340
fn l340_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l340_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854774783 as i64, &vm_context);
    assert_eq!(result, 9223372036854778000.0 as f64);
}

// Line 341
fn l341_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l341_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854774782 as i64, &vm_context);
    assert_eq!(result, 9223372036854778000.0 as f64);
}

// Line 342
fn l342_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l342_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-3072 as i64, &vm_context);
    assert_eq!(result, 18446744073709548000.0 as f64);
}

// Line 343
fn l343_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l343_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-3071 as i64, &vm_context);
    assert_eq!(result, 18446744073709550000.0 as f64);
}

// Line 344
fn l344_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l344_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-3070 as i64, &vm_context);
    assert_eq!(result, 18446744073709550000.0 as f64);
}

// Line 346
fn l346_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l346_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9007199254740993 as i64, &vm_context);
    assert_eq!(result, 9007199254740992.0 as f64);
}

// Line 347
fn l347_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l347_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9007199254740995 as i64, &vm_context);
    assert_eq!(result, 9007199254740996.0 as f64);
}

// Line 349
fn l349_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l349_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 350
fn l350_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l350_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 351
fn l351_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l351_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001401298464324817 as f64);
}

// Line 352
fn l352_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l352_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001401298464324817 as f64);
}

// Line 353
fn l353_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l353_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 354
fn l354_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l354_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 355
fn l355_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l355_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, &vm_context);
    assert_eq!(result, -340282346638528860000000000000000000000.0 as f64);
}

// Line 356
fn l356_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l356_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, &vm_context);
    assert_eq!(result, 340282346638528860000000000000000000000.0 as f64);
}

// Line 358
fn l358_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l358_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0000000000000000000000000000000000015046328 as f32, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000001504632769052528 as f64);
}

// Line 360
fn l360_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l360_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(66382537000000000000000000000000000000.0 as f32, &vm_context);
    assert_eq!(result, 66382536710104395000000000000000000000.0 as f64);
}

// Line 361
fn l361_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l361_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f32::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 362
fn l362_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l362_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f32::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 363

// Line 366

// Line 370
fn l370_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l370_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 371
fn l371_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l371_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f32);
}

// Line 372
fn l372_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l372_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 373
fn l373_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l373_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f32);
}

// Line 374
fn l374_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l374_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 375
fn l375_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l375_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f32);
}

// Line 376
fn l376_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l376_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754942807573643 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 377
fn l377_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l377_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754942807573643 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 378
fn l378_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l378_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754942807573642 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000011754942 as f32);
}

// Line 379
fn l379_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l379_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754942807573642 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000011754942 as f32);
}

// Line 380
fn l380_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l380_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001401298464324817 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 381
fn l381_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l381_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001401298464324817 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 382
fn l382_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l382_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282336497324060000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 340282330000000000000000000000000000000.0 as f32);
}

// Line 383
fn l383_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l383_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282336497324060000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -340282330000000000000000000000000000000.0 as f32);
}

// Line 384
fn l384_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l384_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282336497324100000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 385
fn l385_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l385_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282336497324100000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 386
fn l386_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l386_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282346638528860000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 387
fn l387_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l387_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282346638528860000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 388
fn l388_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l388_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282356779733620000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 389
fn l389_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l389_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282356779733620000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 390
fn l390_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l390_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282356779733660000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f32::INFINITY);
}

// Line 391
fn l391_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l391_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282356779733660000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f32::NEG_INFINITY);
}

// Line 392
fn l392_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l392_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000001504632769052528 as f64, &vm_context);
    assert_eq!(result, 0.0000000000000000000000000000000000015046328 as f32);
}

// Line 393
fn l393_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l393_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(66382536710104395000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 66382537000000000000000000000000000000.0 as f32);
}

// Line 394
fn l394_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l394_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f32::INFINITY);
}

// Line 395
fn l395_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l395_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f32::NEG_INFINITY);
}

// Line 396
fn l396_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l396_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0000000000000002 as f64, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 397
fn l397_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l397_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.9999999999999999 as f64, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 398
fn l398_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l398_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0000000596046448 as f64, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 399
fn l399_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l399_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.000000059604645 as f64, &vm_context);
    assert_eq!(result, 1.0000001 as f32);
}

// Line 400
fn l400_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l400_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.000000178813934 as f64, &vm_context);
    assert_eq!(result, 1.0000001 as f32);
}

// Line 401
fn l401_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l401_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0000001788139343 as f64, &vm_context);
    assert_eq!(result, 1.0000002 as f32);
}

// Line 402
fn l402_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l402_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0000002980232239 as f64, &vm_context);
    assert_eq!(result, 1.0000002 as f32);
}

// Line 403
fn l403_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l403_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777217.0 as f64, &vm_context);
    assert_eq!(result, 16777216.0 as f32);
}

// Line 404
fn l404_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l404_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777217.000000004 as f64, &vm_context);
    assert_eq!(result, 16777218.0 as f32);
}

// Line 405
fn l405_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l405_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777218.999999996 as f64, &vm_context);
    assert_eq!(result, 16777218.0 as f32);
}

// Line 406
fn l406_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l406_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777219.0 as f64, &vm_context);
    assert_eq!(result, 16777220.0 as f32);
}

// Line 407
fn l407_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l407_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(424258443299142700000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 424258450000000000000000000000000.0 as f32);
}

// Line 408
fn l408_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l408_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0000000000000000000000000000000001569262107843488 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000015692621 as f32);
}

// Line 409
fn l409_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l409_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000010551773688605172 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000010551773 as f32);
}

// Line 410
fn l410_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l410_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2.8238128484141933 as f64, &vm_context);
    assert_eq!(result, -2.823813 as f32);
}

// Line 411
fn l411_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l411_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9063376370095757000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -9063376000000000000000000000000000.0 as f32);
}

// Line 412

// Line 415

// Line 418
fn l418_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l418_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 419
fn l419_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l419_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f32);
}

// Line 420
fn l420_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l420_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0000000000000000000000000000000000000000000007006492321624085 as f64, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 421
fn l421_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l421_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0000000000000000000000000000000000000000000007006492321624085 as f64, &vm_context);
    assert_eq!(result, -0.0 as f32);
}

// Line 422
fn l422_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l422_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0000000000000000000000000000000000000000000007006492321624087 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 423
fn l423_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l423_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0000000000000000000000000000000000000000000007006492321624087 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 425
fn l425_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l425_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 426
fn l426_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l426_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, -0.0 as f32);
}

// Line 427
fn l427_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l427_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 430
fn l430_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l430_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(123456789 as i32, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000016535997 as f32);
}

// Line 431
fn l431_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l431_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483647 as i32, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 432
fn l432_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l432_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2139095040 as i32, &vm_context);
    assert_eq!(result, std::f32::INFINITY);
}

// Line 433
fn l433_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l433_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-8388608 as i32, &vm_context);
    assert_eq!(result, std::f32::NEG_INFINITY);
}

// Line 434
fn l434_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l434_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2143289344 as i32, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f32::NAN).is_sign_positive());
}

// Line 435
fn l435_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l435_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4194304 as i32, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f32::NAN).is_sign_positive());
}

// Line 440
fn l440_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l440_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 441
fn l441_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l441_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 444
fn l444_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l444_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 445
fn l445_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l445_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1234567890 as i64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000609957582 as f64);
}

// Line 446
fn l446_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l446_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775807 as i64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 447
fn l447_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l447_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9218868437227405312 as i64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 448
fn l448_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l448_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4503599627370496 as i64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 449
fn l449_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l449_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9221120237041090560 as i64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 450
fn l450_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l450_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2251799813685248 as i64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 456
fn l456_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l456_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 457
fn l457_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l457_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 458
fn l458_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l458_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 461
fn l461_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l461_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, -2147483647 as i32);
}

// Line 462
fn l462_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l462_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1065353216 as i32);
}

// Line 463
fn l463_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l463_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(3.1415925 as f32, &vm_context);
    assert_eq!(result, 1078530010 as i32);
}

// Line 464
fn l464_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l464_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, &vm_context);
    assert_eq!(result, 2139095039 as i32);
}

// Line 465
fn l465_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l465_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, &vm_context);
    assert_eq!(result, -8388609 as i32);
}

// Line 466
fn l466_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l466_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f32::INFINITY, &vm_context);
    assert_eq!(result, 2139095040 as i32);
}

// Line 467
fn l467_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l467_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f32::NEG_INFINITY, &vm_context);
    assert_eq!(result, -8388608 as i32);
}

// Line 468
fn l468_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l468_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f32::NAN, &vm_context);
    assert_eq!(result, 2143289344 as i32);
}

// Line 469
fn l469_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l469_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f32::NAN, &vm_context);
    assert_eq!(result, -4194304 as i32);
}

// Line 475
fn l475_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l475_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 476
fn l476_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l476_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 477
fn l477_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l477_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 480
fn l480_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l480_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -9223372036854775807 as i64);
}

// Line 481
fn l481_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l481_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 4607182418800017408 as i64);
}

// Line 482
fn l482_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l482_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(3.14159265358979 as f64, &vm_context);
    assert_eq!(result, 4614256656552045841 as i64);
}

// Line 483
fn l483_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l483_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 9218868437227405311 as i64);
}

// Line 484
fn l484_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l484_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -4503599627370497 as i64);
}

// Line 485
fn l485_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l485_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, &vm_context);
    assert_eq!(result, 9218868437227405312 as i64);
}

// Line 486
fn l486_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l486_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -4503599627370496 as i64);
}

// Line 487
fn l487_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l487_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, &vm_context);
    assert_eq!(result, 9221120237041090560 as i64);
}

// Line 488
fn l488_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l488_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, &vm_context);
    assert_eq!(result, -2251799813685248 as i64);
}

#[test]
fn test_module_1() {
    let result_object = create_module_1();
    let vm_context = result_object.instance.generate_context();
    // We group the calls together
    l29_action_invoke(&result_object, &vm_context);
    l30_action_invoke(&result_object, &vm_context);
    l31_action_invoke(&result_object, &vm_context);
    l32_action_invoke(&result_object, &vm_context);
    l33_action_invoke(&result_object, &vm_context);
    l34_action_invoke(&result_object, &vm_context);
    l36_action_invoke(&result_object, &vm_context);
    l37_action_invoke(&result_object, &vm_context);
    l38_action_invoke(&result_object, &vm_context);
    l39_action_invoke(&result_object, &vm_context);
    l40_action_invoke(&result_object, &vm_context);
    l41_action_invoke(&result_object, &vm_context);
    l43_action_invoke(&result_object, &vm_context);
    l44_action_invoke(&result_object, &vm_context);
    l45_action_invoke(&result_object, &vm_context);
    l46_action_invoke(&result_object, &vm_context);
    l47_action_invoke(&result_object, &vm_context);
    l48_action_invoke(&result_object, &vm_context);
    l49_action_invoke(&result_object, &vm_context);
    l50_action_invoke(&result_object, &vm_context);
    l51_action_invoke(&result_object, &vm_context);
    l52_action_invoke(&result_object, &vm_context);
    l53_action_invoke(&result_object, &vm_context);
    l54_action_invoke(&result_object, &vm_context);
    l56_action_invoke(&result_object, &vm_context);
    l57_action_invoke(&result_object, &vm_context);
    l58_action_invoke(&result_object, &vm_context);
    l59_action_invoke(&result_object, &vm_context);
    l60_action_invoke(&result_object, &vm_context);
    l61_action_invoke(&result_object, &vm_context);
    l62_action_invoke(&result_object, &vm_context);
    l63_action_invoke(&result_object, &vm_context);
    l64_action_invoke(&result_object, &vm_context);
    l65_action_invoke(&result_object, &vm_context);
    l66_action_invoke(&result_object, &vm_context);
    l67_action_invoke(&result_object, &vm_context);
    l68_action_invoke(&result_object, &vm_context);
    l69_action_invoke(&result_object, &vm_context);
    l81_action_invoke(&result_object, &vm_context);
    l82_action_invoke(&result_object, &vm_context);
    l83_action_invoke(&result_object, &vm_context);
    l84_action_invoke(&result_object, &vm_context);
    l85_action_invoke(&result_object, &vm_context);
    l86_action_invoke(&result_object, &vm_context);
    l87_action_invoke(&result_object, &vm_context);
    l88_action_invoke(&result_object, &vm_context);
    l89_action_invoke(&result_object, &vm_context);
    l90_action_invoke(&result_object, &vm_context);
    l91_action_invoke(&result_object, &vm_context);
    l92_action_invoke(&result_object, &vm_context);
    l93_action_invoke(&result_object, &vm_context);
    l105_action_invoke(&result_object, &vm_context);
    l106_action_invoke(&result_object, &vm_context);
    l107_action_invoke(&result_object, &vm_context);
    l108_action_invoke(&result_object, &vm_context);
    l109_action_invoke(&result_object, &vm_context);
    l110_action_invoke(&result_object, &vm_context);
    l111_action_invoke(&result_object, &vm_context);
    l112_action_invoke(&result_object, &vm_context);
    l113_action_invoke(&result_object, &vm_context);
    l114_action_invoke(&result_object, &vm_context);
    l115_action_invoke(&result_object, &vm_context);
    l116_action_invoke(&result_object, &vm_context);
    l117_action_invoke(&result_object, &vm_context);
    l118_action_invoke(&result_object, &vm_context);
    l130_action_invoke(&result_object, &vm_context);
    l131_action_invoke(&result_object, &vm_context);
    l132_action_invoke(&result_object, &vm_context);
    l133_action_invoke(&result_object, &vm_context);
    l134_action_invoke(&result_object, &vm_context);
    l135_action_invoke(&result_object, &vm_context);
    l136_action_invoke(&result_object, &vm_context);
    l137_action_invoke(&result_object, &vm_context);
    l138_action_invoke(&result_object, &vm_context);
    l139_action_invoke(&result_object, &vm_context);
    l140_action_invoke(&result_object, &vm_context);
    l141_action_invoke(&result_object, &vm_context);
    l142_action_invoke(&result_object, &vm_context);
    l143_action_invoke(&result_object, &vm_context);
    l158_action_invoke(&result_object, &vm_context);
    l159_action_invoke(&result_object, &vm_context);
    l160_action_invoke(&result_object, &vm_context);
    l161_action_invoke(&result_object, &vm_context);
    l162_action_invoke(&result_object, &vm_context);
    l163_action_invoke(&result_object, &vm_context);
    l164_action_invoke(&result_object, &vm_context);
    l165_action_invoke(&result_object, &vm_context);
    l166_action_invoke(&result_object, &vm_context);
    l167_action_invoke(&result_object, &vm_context);
    l168_action_invoke(&result_object, &vm_context);
    l169_action_invoke(&result_object, &vm_context);
    l170_action_invoke(&result_object, &vm_context);
    l171_action_invoke(&result_object, &vm_context);
    l172_action_invoke(&result_object, &vm_context);
    l173_action_invoke(&result_object, &vm_context);
    l185_action_invoke(&result_object, &vm_context);
    l186_action_invoke(&result_object, &vm_context);
    l187_action_invoke(&result_object, &vm_context);
    l188_action_invoke(&result_object, &vm_context);
    l189_action_invoke(&result_object, &vm_context);
    l190_action_invoke(&result_object, &vm_context);
    l191_action_invoke(&result_object, &vm_context);
    l192_action_invoke(&result_object, &vm_context);
    l193_action_invoke(&result_object, &vm_context);
    l194_action_invoke(&result_object, &vm_context);
    l195_action_invoke(&result_object, &vm_context);
    l207_action_invoke(&result_object, &vm_context);
    l208_action_invoke(&result_object, &vm_context);
    l209_action_invoke(&result_object, &vm_context);
    l210_action_invoke(&result_object, &vm_context);
    l211_action_invoke(&result_object, &vm_context);
    l212_action_invoke(&result_object, &vm_context);
    l213_action_invoke(&result_object, &vm_context);
    l214_action_invoke(&result_object, &vm_context);
    l215_action_invoke(&result_object, &vm_context);
    l216_action_invoke(&result_object, &vm_context);
    l217_action_invoke(&result_object, &vm_context);
    l218_action_invoke(&result_object, &vm_context);
    l219_action_invoke(&result_object, &vm_context);
    l220_action_invoke(&result_object, &vm_context);
    l221_action_invoke(&result_object, &vm_context);
    l222_action_invoke(&result_object, &vm_context);
    l234_action_invoke(&result_object, &vm_context);
    l235_action_invoke(&result_object, &vm_context);
    l236_action_invoke(&result_object, &vm_context);
    l237_action_invoke(&result_object, &vm_context);
    l238_action_invoke(&result_object, &vm_context);
    l239_action_invoke(&result_object, &vm_context);
    l240_action_invoke(&result_object, &vm_context);
    l241_action_invoke(&result_object, &vm_context);
    l242_action_invoke(&result_object, &vm_context);
    l243_action_invoke(&result_object, &vm_context);
    l244_action_invoke(&result_object, &vm_context);
    l245_action_invoke(&result_object, &vm_context);
    l246_action_invoke(&result_object, &vm_context);
    l247_action_invoke(&result_object, &vm_context);
    l248_action_invoke(&result_object, &vm_context);
    l260_action_invoke(&result_object, &vm_context);
    l261_action_invoke(&result_object, &vm_context);
    l262_action_invoke(&result_object, &vm_context);
    l263_action_invoke(&result_object, &vm_context);
    l264_action_invoke(&result_object, &vm_context);
    l265_action_invoke(&result_object, &vm_context);
    l267_action_invoke(&result_object, &vm_context);
    l268_action_invoke(&result_object, &vm_context);
    l269_action_invoke(&result_object, &vm_context);
    l270_action_invoke(&result_object, &vm_context);
    l272_action_invoke(&result_object, &vm_context);
    l273_action_invoke(&result_object, &vm_context);
    l274_action_invoke(&result_object, &vm_context);
    l275_action_invoke(&result_object, &vm_context);
    l276_action_invoke(&result_object, &vm_context);
    l277_action_invoke(&result_object, &vm_context);
    l279_action_invoke(&result_object, &vm_context);
    l280_action_invoke(&result_object, &vm_context);
    l281_action_invoke(&result_object, &vm_context);
    l282_action_invoke(&result_object, &vm_context);
    l284_action_invoke(&result_object, &vm_context);
    l285_action_invoke(&result_object, &vm_context);
    l286_action_invoke(&result_object, &vm_context);
    l287_action_invoke(&result_object, &vm_context);
    l288_action_invoke(&result_object, &vm_context);
    l289_action_invoke(&result_object, &vm_context);
    l291_action_invoke(&result_object, &vm_context);
    l292_action_invoke(&result_object, &vm_context);
    l293_action_invoke(&result_object, &vm_context);
    l294_action_invoke(&result_object, &vm_context);
    l295_action_invoke(&result_object, &vm_context);
    l296_action_invoke(&result_object, &vm_context);
    l298_action_invoke(&result_object, &vm_context);
    l299_action_invoke(&result_object, &vm_context);
    l300_action_invoke(&result_object, &vm_context);
    l301_action_invoke(&result_object, &vm_context);
    l303_action_invoke(&result_object, &vm_context);
    l304_action_invoke(&result_object, &vm_context);
    l305_action_invoke(&result_object, &vm_context);
    l306_action_invoke(&result_object, &vm_context);
    l307_action_invoke(&result_object, &vm_context);
    l308_action_invoke(&result_object, &vm_context);
    l309_action_invoke(&result_object, &vm_context);
    l310_action_invoke(&result_object, &vm_context);
    l311_action_invoke(&result_object, &vm_context);
    l312_action_invoke(&result_object, &vm_context);
    l313_action_invoke(&result_object, &vm_context);
    l314_action_invoke(&result_object, &vm_context);
    l316_action_invoke(&result_object, &vm_context);
    l317_action_invoke(&result_object, &vm_context);
    l319_action_invoke(&result_object, &vm_context);
    l320_action_invoke(&result_object, &vm_context);
    l321_action_invoke(&result_object, &vm_context);
    l322_action_invoke(&result_object, &vm_context);
    l323_action_invoke(&result_object, &vm_context);
    l325_action_invoke(&result_object, &vm_context);
    l326_action_invoke(&result_object, &vm_context);
    l328_action_invoke(&result_object, &vm_context);
    l329_action_invoke(&result_object, &vm_context);
    l330_action_invoke(&result_object, &vm_context);
    l331_action_invoke(&result_object, &vm_context);
    l332_action_invoke(&result_object, &vm_context);
    l334_action_invoke(&result_object, &vm_context);
    l335_action_invoke(&result_object, &vm_context);
    l336_action_invoke(&result_object, &vm_context);
    l337_action_invoke(&result_object, &vm_context);
    l338_action_invoke(&result_object, &vm_context);
    l339_action_invoke(&result_object, &vm_context);
    l340_action_invoke(&result_object, &vm_context);
    l341_action_invoke(&result_object, &vm_context);
    l342_action_invoke(&result_object, &vm_context);
    l343_action_invoke(&result_object, &vm_context);
    l344_action_invoke(&result_object, &vm_context);
    l346_action_invoke(&result_object, &vm_context);
    l347_action_invoke(&result_object, &vm_context);
    l349_action_invoke(&result_object, &vm_context);
    l350_action_invoke(&result_object, &vm_context);
    l351_action_invoke(&result_object, &vm_context);
    l352_action_invoke(&result_object, &vm_context);
    l353_action_invoke(&result_object, &vm_context);
    l354_action_invoke(&result_object, &vm_context);
    l355_action_invoke(&result_object, &vm_context);
    l356_action_invoke(&result_object, &vm_context);
    l358_action_invoke(&result_object, &vm_context);
    l360_action_invoke(&result_object, &vm_context);
    l361_action_invoke(&result_object, &vm_context);
    l362_action_invoke(&result_object, &vm_context);
    l370_action_invoke(&result_object, &vm_context);
    l371_action_invoke(&result_object, &vm_context);
    l372_action_invoke(&result_object, &vm_context);
    l373_action_invoke(&result_object, &vm_context);
    l374_action_invoke(&result_object, &vm_context);
    l375_action_invoke(&result_object, &vm_context);
    l376_action_invoke(&result_object, &vm_context);
    l377_action_invoke(&result_object, &vm_context);
    l378_action_invoke(&result_object, &vm_context);
    l379_action_invoke(&result_object, &vm_context);
    l380_action_invoke(&result_object, &vm_context);
    l381_action_invoke(&result_object, &vm_context);
    l382_action_invoke(&result_object, &vm_context);
    l383_action_invoke(&result_object, &vm_context);
    l384_action_invoke(&result_object, &vm_context);
    l385_action_invoke(&result_object, &vm_context);
    l386_action_invoke(&result_object, &vm_context);
    l387_action_invoke(&result_object, &vm_context);
    l388_action_invoke(&result_object, &vm_context);
    l389_action_invoke(&result_object, &vm_context);
    l390_action_invoke(&result_object, &vm_context);
    l391_action_invoke(&result_object, &vm_context);
    l392_action_invoke(&result_object, &vm_context);
    l393_action_invoke(&result_object, &vm_context);
    l394_action_invoke(&result_object, &vm_context);
    l395_action_invoke(&result_object, &vm_context);
    l396_action_invoke(&result_object, &vm_context);
    l397_action_invoke(&result_object, &vm_context);
    l398_action_invoke(&result_object, &vm_context);
    l399_action_invoke(&result_object, &vm_context);
    l400_action_invoke(&result_object, &vm_context);
    l401_action_invoke(&result_object, &vm_context);
    l402_action_invoke(&result_object, &vm_context);
    l403_action_invoke(&result_object, &vm_context);
    l404_action_invoke(&result_object, &vm_context);
    l405_action_invoke(&result_object, &vm_context);
    l406_action_invoke(&result_object, &vm_context);
    l407_action_invoke(&result_object, &vm_context);
    l408_action_invoke(&result_object, &vm_context);
    l409_action_invoke(&result_object, &vm_context);
    l410_action_invoke(&result_object, &vm_context);
    l411_action_invoke(&result_object, &vm_context);
    l418_action_invoke(&result_object, &vm_context);
    l419_action_invoke(&result_object, &vm_context);
    l420_action_invoke(&result_object, &vm_context);
    l421_action_invoke(&result_object, &vm_context);
    l422_action_invoke(&result_object, &vm_context);
    l423_action_invoke(&result_object, &vm_context);
    l425_action_invoke(&result_object, &vm_context);
    l426_action_invoke(&result_object, &vm_context);
    l427_action_invoke(&result_object, &vm_context);
    l430_action_invoke(&result_object, &vm_context);
    l431_action_invoke(&result_object, &vm_context);
    l432_action_invoke(&result_object, &vm_context);
    l433_action_invoke(&result_object, &vm_context);
    l434_action_invoke(&result_object, &vm_context);
    l435_action_invoke(&result_object, &vm_context);
    l440_action_invoke(&result_object, &vm_context);
    l441_action_invoke(&result_object, &vm_context);
    l444_action_invoke(&result_object, &vm_context);
    l445_action_invoke(&result_object, &vm_context);
    l446_action_invoke(&result_object, &vm_context);
    l447_action_invoke(&result_object, &vm_context);
    l448_action_invoke(&result_object, &vm_context);
    l449_action_invoke(&result_object, &vm_context);
    l450_action_invoke(&result_object, &vm_context);
    l456_action_invoke(&result_object, &vm_context);
    l457_action_invoke(&result_object, &vm_context);
    l458_action_invoke(&result_object, &vm_context);
    l461_action_invoke(&result_object, &vm_context);
    l462_action_invoke(&result_object, &vm_context);
    l463_action_invoke(&result_object, &vm_context);
    l464_action_invoke(&result_object, &vm_context);
    l465_action_invoke(&result_object, &vm_context);
    l466_action_invoke(&result_object, &vm_context);
    l467_action_invoke(&result_object, &vm_context);
    l468_action_invoke(&result_object, &vm_context);
    l469_action_invoke(&result_object, &vm_context);
    l475_action_invoke(&result_object, &vm_context);
    l476_action_invoke(&result_object, &vm_context);
    l477_action_invoke(&result_object, &vm_context);
    l480_action_invoke(&result_object, &vm_context);
    l481_action_invoke(&result_object, &vm_context);
    l482_action_invoke(&result_object, &vm_context);
    l483_action_invoke(&result_object, &vm_context);
    l484_action_invoke(&result_object, &vm_context);
    l485_action_invoke(&result_object, &vm_context);
    l486_action_invoke(&result_object, &vm_context);
    l487_action_invoke(&result_object, &vm_context);
    l488_action_invoke(&result_object, &vm_context);
}
