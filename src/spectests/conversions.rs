// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/conversions.wast
#![allow(
    warnings,
    dead_code
)]
use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, VmCtx, Export};
use super::_common::spectest_importobject;
use wabt::wat2wasm;


// Line 1
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param i32) (result i64)))
      (type (;1;) (func (param i64) (result i32)))
      (type (;2;) (func (param f32) (result i32)))
      (type (;3;) (func (param f64) (result i32)))
      (type (;4;) (func (param f32) (result i64)))
      (type (;5;) (func (param f64) (result i64)))
      (type (;6;) (func (param i32) (result f32)))
      (type (;7;) (func (param i64) (result f32)))
      (type (;8;) (func (param i32) (result f64)))
      (type (;9;) (func (param i64) (result f64)))
      (type (;10;) (func (param f32) (result f64)))
      (type (;11;) (func (param f64) (result f32)))
      (func (;0;) (type 0) (param i32) (result i64)
        get_local 0
        i64.extend_s/i32)
      (func (;1;) (type 0) (param i32) (result i64)
        get_local 0
        i64.extend_u/i32)
      (func (;2;) (type 1) (param i64) (result i32)
        get_local 0
        i32.wrap/i64)
      (func (;3;) (type 2) (param f32) (result i32)
        get_local 0
        i32.trunc_s/f32)
      (func (;4;) (type 2) (param f32) (result i32)
        get_local 0
        i32.trunc_u/f32)
      (func (;5;) (type 3) (param f64) (result i32)
        get_local 0
        i32.trunc_s/f64)
      (func (;6;) (type 3) (param f64) (result i32)
        get_local 0
        i32.trunc_u/f64)
      (func (;7;) (type 4) (param f32) (result i64)
        get_local 0
        i64.trunc_s/f32)
      (func (;8;) (type 4) (param f32) (result i64)
        get_local 0
        i64.trunc_u/f32)
      (func (;9;) (type 5) (param f64) (result i64)
        get_local 0
        i64.trunc_s/f64)
      (func (;10;) (type 5) (param f64) (result i64)
        get_local 0
        i64.trunc_u/f64)
      (func (;11;) (type 6) (param i32) (result f32)
        get_local 0
        f32.convert_s/i32)
      (func (;12;) (type 7) (param i64) (result f32)
        get_local 0
        f32.convert_s/i64)
      (func (;13;) (type 8) (param i32) (result f64)
        get_local 0
        f64.convert_s/i32)
      (func (;14;) (type 9) (param i64) (result f64)
        get_local 0
        f64.convert_s/i64)
      (func (;15;) (type 6) (param i32) (result f32)
        get_local 0
        f32.convert_u/i32)
      (func (;16;) (type 7) (param i64) (result f32)
        get_local 0
        f32.convert_u/i64)
      (func (;17;) (type 8) (param i32) (result f64)
        get_local 0
        f64.convert_u/i32)
      (func (;18;) (type 9) (param i64) (result f64)
        get_local 0
        f64.convert_u/i64)
      (func (;19;) (type 10) (param f32) (result f64)
        get_local 0
        f64.promote/f32)
      (func (;20;) (type 11) (param f64) (result f32)
        get_local 0
        f32.demote/f64)
      (func (;21;) (type 6) (param i32) (result f32)
        get_local 0
        f32.reinterpret/i32)
      (func (;22;) (type 9) (param i64) (result f64)
        get_local 0
        f64.reinterpret/i64)
      (func (;23;) (type 2) (param f32) (result i32)
        get_local 0
        i32.reinterpret/f32)
      (func (;24;) (type 5) (param f64) (result i64)
        get_local 0
        i64.reinterpret/f64)
      (export \"i64.extend_s_i32\" (func 0))
      (export \"i64.extend_u_i32\" (func 1))
      (export \"i32.wrap_i64\" (func 2))
      (export \"i32.trunc_s_f32\" (func 3))
      (export \"i32.trunc_u_f32\" (func 4))
      (export \"i32.trunc_s_f64\" (func 5))
      (export \"i32.trunc_u_f64\" (func 6))
      (export \"i64.trunc_s_f32\" (func 7))
      (export \"i64.trunc_u_f32\" (func 8))
      (export \"i64.trunc_s_f64\" (func 9))
      (export \"i64.trunc_u_f64\" (func 10))
      (export \"f32.convert_s_i32\" (func 11))
      (export \"f32.convert_s_i64\" (func 12))
      (export \"f64.convert_s_i32\" (func 13))
      (export \"f64.convert_s_i64\" (func 14))
      (export \"f32.convert_u_i32\" (func 15))
      (export \"f32.convert_u_i64\" (func 16))
      (export \"f64.convert_u_i32\" (func 17))
      (export \"f64.convert_u_i64\" (func 18))
      (export \"f64.promote_f32\" (func 19))
      (export \"f32.demote_f64\" (func 20))
      (export \"f32.reinterpret_i32\" (func 21))
      (export \"f64.reinterpret_i64\" (func 22))
      (export \"i32.reinterpret_f32\" (func 23))
      (export \"i64.reinterpret_f64\" (func 24)))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 29
fn c1_l29_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c1_l29_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 30
fn c2_l30_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c2_l30_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(10000 as i32, &vm_context);
    assert_eq!(result, 10000 as i64);
}

// Line 31
fn c3_l31_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c3_l31_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-10000 as i32, &vm_context);
    assert_eq!(result, -10000 as i64);
}

// Line 32
fn c4_l32_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c4_l32_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 33
fn c5_l33_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c5_l33_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 2147483647 as i64);
}

// Line 34
fn c6_l34_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c6_l34_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, -2147483648 as i64);
}

// Line 36
fn c7_l36_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c7_l36_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 37
fn c8_l37_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c8_l37_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(10000 as i32, &vm_context);
    assert_eq!(result, 10000 as i64);
}

// Line 38
fn c9_l38_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c9_l38_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-10000 as i32, &vm_context);
    assert_eq!(result, 4294957296 as i64);
}

// Line 39
fn c10_l39_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c10_l39_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, 4294967295 as i64);
}

// Line 40
fn c11_l40_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c11_l40_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 2147483647 as i64);
}

// Line 41
fn c12_l41_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c12_l41_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.extend_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, 2147483648 as i64);
}

// Line 43
fn c13_l43_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c13_l43_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 44
fn c14_l44_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c14_l44_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-100000 as i64, &vm_context);
    assert_eq!(result, -100000 as i32);
}

// Line 45
fn c15_l45_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c15_l45_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483648 as i64, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 46
fn c16_l46_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c16_l46_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483649 as i64, &vm_context);
    assert_eq!(result, 2147483647 as i32);
}

// Line 47
fn c17_l47_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c17_l47_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4294967296 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 48
fn c18_l48_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c18_l48_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4294967297 as i64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 49
fn c19_l49_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c19_l49_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4294967295 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 50
fn c20_l50_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c20_l50_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 51
fn c21_l51_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c21_l51_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1311768467463790320 as i64, &vm_context);
    assert_eq!(result, -1698898192 as i32);
}

// Line 52
fn c22_l52_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c22_l52_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967295 as i64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 53
fn c23_l53_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c23_l53_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967296 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 54
fn c24_l54_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c24_l54_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.wrap_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967297 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 56
fn c25_l56_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c25_l56_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 57
fn c26_l57_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c26_l57_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 58
fn c27_l58_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c27_l58_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 59
fn c28_l59_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c28_l59_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 60
fn c29_l60_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c29_l60_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 61
fn c30_l61_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c30_l61_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 62
fn c31_l62_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c31_l62_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 63
fn c32_l63_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c32_l63_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 64
fn c33_l64_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c33_l64_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.1 as f32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 65
fn c34_l65_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c34_l65_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.5 as f32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 66
fn c35_l66_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c35_l66_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.9 as f32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 67
fn c36_l67_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c36_l67_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2.0 as f32, &vm_context);
    assert_eq!(result, -2 as i32);
}

// Line 68
fn c37_l68_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c37_l68_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483500.0 as f32, &vm_context);
    assert_eq!(result, 2147483520 as i32);
}

// Line 69
fn c38_l69_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c38_l69_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483600.0 as f32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 70

// Line 71

// Line 72

// Line 73

// Line 74

// Line 77

// Line 81
fn c45_l81_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c45_l81_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 82
fn c46_l82_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c46_l82_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 83
fn c47_l83_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c47_l83_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 84
fn c48_l84_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c48_l84_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 85
fn c49_l85_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c49_l85_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 86
fn c50_l86_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c50_l86_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 87
fn c51_l87_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c51_l87_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 88
fn c52_l88_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c52_l88_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.9 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 89
fn c53_l89_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c53_l89_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2.0 as f32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 90
fn c54_l90_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c54_l90_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483600.0 as f32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 91
fn c55_l91_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c55_l91_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967000.0 as f32, &vm_context);
    assert_eq!(result, -256 as i32);
}

// Line 92
fn c56_l92_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c56_l92_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.9 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 93
fn c57_l93_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c57_l93_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.99999994 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 94

// Line 95

// Line 96

// Line 97

// Line 98

// Line 101

// Line 105
fn c64_l105_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c64_l105_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 106
fn c65_l106_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c65_l106_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 107
fn c66_l107_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c66_l107_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 108
fn c67_l108_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c67_l108_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 109
fn c68_l109_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c68_l109_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 110
fn c69_l110_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c69_l110_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 111
fn c70_l111_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c70_l111_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 112
fn c71_l112_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c71_l112_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 113
fn c72_l113_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c72_l113_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.1 as f64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 114
fn c73_l114_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c73_l114_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.5 as f64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 115
fn c74_l115_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c74_l115_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.9 as f64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 116
fn c75_l116_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c75_l116_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2.0 as f64, &vm_context);
    assert_eq!(result, -2 as i32);
}

// Line 117
fn c76_l117_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c76_l117_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647.0 as f64, &vm_context);
    assert_eq!(result, 2147483647 as i32);
}

// Line 118
fn c77_l118_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c77_l118_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648.0 as f64, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 119

// Line 120

// Line 121

// Line 122

// Line 123

// Line 126

// Line 130
fn c84_l130_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c84_l130_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 131
fn c85_l131_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c85_l131_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 132
fn c86_l132_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c86_l132_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 133
fn c87_l133_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c87_l133_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 134
fn c88_l134_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c88_l134_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 135
fn c89_l135_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c89_l135_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 136
fn c90_l136_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c90_l136_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 137
fn c91_l137_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c91_l137_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.9 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 138
fn c92_l138_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c92_l138_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2.0 as f64, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 139
fn c93_l139_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c93_l139_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483648.0 as f64, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 140
fn c94_l140_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c94_l140_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967295.0 as f64, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 141
fn c95_l141_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c95_l141_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.9 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 142
fn c96_l142_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c96_l142_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.9999999999999999 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 143
fn c97_l143_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c97_l143_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(100000000.0 as f64, &vm_context);
    assert_eq!(result, 100000000 as i32);
}

// Line 144

// Line 145

// Line 146

// Line 147

// Line 148

// Line 149

// Line 150

// Line 151

// Line 154

// Line 158
fn c107_l158_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c107_l158_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 159
fn c108_l159_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c108_l159_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 160
fn c109_l160_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c109_l160_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 161
fn c110_l161_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c110_l161_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 162
fn c111_l162_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c111_l162_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 163
fn c112_l163_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c112_l163_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f32, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 164
fn c113_l164_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c113_l164_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f32, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 165
fn c114_l165_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c114_l165_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 166
fn c115_l166_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c115_l166_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.1 as f32, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 167
fn c116_l167_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c116_l167_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.5 as f32, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 168
fn c117_l168_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c117_l168_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.9 as f32, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 169
fn c118_l169_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c118_l169_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2.0 as f32, &vm_context);
    assert_eq!(result, -2 as i64);
}

// Line 170
fn c119_l170_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c119_l170_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967300.0 as f32, &vm_context);
    assert_eq!(result, 4294967296 as i64);
}

// Line 171
fn c120_l171_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c120_l171_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4294967300.0 as f32, &vm_context);
    assert_eq!(result, -4294967296 as i64);
}

// Line 172
fn c121_l172_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c121_l172_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223371500000000000.0 as f32, &vm_context);
    assert_eq!(result, 9223371487098961920 as i64);
}

// Line 173
fn c122_l173_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c122_l173_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372000000000000.0 as f32, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 174

// Line 175

// Line 176

// Line 177

// Line 178

// Line 181

// Line 185
fn c129_l185_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c129_l185_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 186
fn c130_l186_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c130_l186_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 187
fn c131_l187_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c131_l187_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 188
fn c132_l188_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c132_l188_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 189
fn c133_l189_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c133_l189_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 190
fn c134_l190_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c134_l190_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f32, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 191
fn c135_l191_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c135_l191_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f32, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 192
fn c136_l192_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c136_l192_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967300.0 as f32, &vm_context);
    assert_eq!(result, 4294967296 as i64);
}

// Line 193
fn c137_l193_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c137_l193_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(18446743000000000000.0 as f32, &vm_context);
    assert_eq!(result, -1099511627776 as i64);
}

// Line 194
fn c138_l194_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c138_l194_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.9 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 195
fn c139_l195_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c139_l195_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.99999994 as f32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 196

// Line 197

// Line 198

// Line 199

// Line 200

// Line 203

// Line 207
fn c146_l207_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c146_l207_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 208
fn c147_l208_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c147_l208_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 209
fn c148_l209_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c148_l209_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 210
fn c149_l210_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c149_l210_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 211
fn c150_l211_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c150_l211_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 212
fn c151_l212_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c151_l212_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 213
fn c152_l213_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c152_l213_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 214
fn c153_l214_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c153_l214_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 215
fn c154_l215_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c154_l215_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.1 as f64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 216
fn c155_l216_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c155_l216_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.5 as f64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 217
fn c156_l217_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c156_l217_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.9 as f64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 218
fn c157_l218_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c157_l218_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2.0 as f64, &vm_context);
    assert_eq!(result, -2 as i64);
}

// Line 219
fn c158_l219_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c158_l219_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967296.0 as f64, &vm_context);
    assert_eq!(result, 4294967296 as i64);
}

// Line 220
fn c159_l220_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c159_l220_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4294967296.0 as f64, &vm_context);
    assert_eq!(result, -4294967296 as i64);
}

// Line 221
fn c160_l221_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c160_l221_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775000.0 as f64, &vm_context);
    assert_eq!(result, 9223372036854774784 as i64);
}

// Line 222
fn c161_l222_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c161_l222_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_s_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854776000.0 as f64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 223

// Line 224

// Line 225

// Line 226

// Line 227

// Line 230

// Line 234
fn c168_l234_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c168_l234_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 235
fn c169_l235_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c169_l235_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 236
fn c170_l236_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c170_l236_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 237
fn c171_l237_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c171_l237_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 238
fn c172_l238_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c172_l238_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 239
fn c173_l239_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c173_l239_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.1 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 240
fn c174_l240_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c174_l240_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.5 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 241
fn c175_l241_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c175_l241_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967295.0 as f64, &vm_context);
    assert_eq!(result, 4294967295 as i64);
}

// Line 242
fn c176_l242_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c176_l242_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4294967296.0 as f64, &vm_context);
    assert_eq!(result, 4294967296 as i64);
}

// Line 243
fn c177_l243_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c177_l243_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(18446744073709550000.0 as f64, &vm_context);
    assert_eq!(result, -2048 as i64);
}

// Line 244
fn c178_l244_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c178_l244_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.9 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 245
fn c179_l245_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c179_l245_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.9999999999999999 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 246
fn c180_l246_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c180_l246_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(100000000.0 as f64, &vm_context);
    assert_eq!(result, 100000000 as i64);
}

// Line 247
fn c181_l247_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c181_l247_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(10000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 10000000000000000 as i64);
}

// Line 248
fn c182_l248_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c182_l248_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.trunc_u_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854776000.0 as f64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 249

// Line 250

// Line 251

// Line 252

// Line 253

// Line 256

// Line 260
fn c189_l260_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c189_l260_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 261
fn c190_l261_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c190_l261_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, -1.0 as f32);
}

// Line 262
fn c191_l262_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c191_l262_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 263
fn c192_l263_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c192_l263_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 2147483600.0 as f32);
}

// Line 264
fn c193_l264_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c193_l264_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, -2147483600.0 as f32);
}

// Line 265
fn c194_l265_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c194_l265_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1234567890 as i32, &vm_context);
    assert_eq!(result, 1234568000.0 as f32);
}

// Line 267
fn c195_l267_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c195_l267_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777217 as i32, &vm_context);
    assert_eq!(result, 16777216.0 as f32);
}

// Line 268
fn c196_l268_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c196_l268_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-16777217 as i32, &vm_context);
    assert_eq!(result, -16777216.0 as f32);
}

// Line 269
fn c197_l269_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c197_l269_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777219 as i32, &vm_context);
    assert_eq!(result, 16777220.0 as f32);
}

// Line 270
fn c198_l270_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c198_l270_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-16777219 as i32, &vm_context);
    assert_eq!(result, -16777220.0 as f32);
}

// Line 272
fn c199_l272_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c199_l272_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 273
fn c200_l273_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c200_l273_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, -1.0 as f32);
}

// Line 274
fn c201_l274_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c201_l274_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 275
fn c202_l275_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c202_l275_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 9223372000000000000.0 as f32);
}

// Line 276
fn c203_l276_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c203_l276_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &vm_context);
    assert_eq!(result, -9223372000000000000.0 as f32);
}

// Line 277
fn c204_l277_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c204_l277_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(314159265358979 as i64, &vm_context);
    assert_eq!(result, 314159280000000.0 as f32);
}

// Line 279
fn c205_l279_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c205_l279_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777217 as i64, &vm_context);
    assert_eq!(result, 16777216.0 as f32);
}

// Line 280
fn c206_l280_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c206_l280_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-16777217 as i64, &vm_context);
    assert_eq!(result, -16777216.0 as f32);
}

// Line 281
fn c207_l281_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c207_l281_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777219 as i64, &vm_context);
    assert_eq!(result, 16777220.0 as f32);
}

// Line 282
fn c208_l282_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c208_l282_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-16777219 as i64, &vm_context);
    assert_eq!(result, -16777220.0 as f32);
}

// Line 284
fn c209_l284_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c209_l284_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 285
fn c210_l285_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c210_l285_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 286
fn c211_l286_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c211_l286_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 287
fn c212_l287_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c212_l287_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 2147483647.0 as f64);
}

// Line 288
fn c213_l288_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c213_l288_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, -2147483648.0 as f64);
}

// Line 289
fn c214_l289_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c214_l289_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(987654321 as i32, &vm_context);
    assert_eq!(result, 987654321.0 as f64);
}

// Line 291
fn c215_l291_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c215_l291_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 292
fn c216_l292_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c216_l292_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 293
fn c217_l293_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c217_l293_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 294
fn c218_l294_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c218_l294_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 9223372036854776000.0 as f64);
}

// Line 295
fn c219_l295_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c219_l295_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &vm_context);
    assert_eq!(result, -9223372036854776000.0 as f64);
}

// Line 296
fn c220_l296_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c220_l296_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4669201609102990 as i64, &vm_context);
    assert_eq!(result, 4669201609102990.0 as f64);
}

// Line 298
fn c221_l298_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c221_l298_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9007199254740993 as i64, &vm_context);
    assert_eq!(result, 9007199254740992.0 as f64);
}

// Line 299
fn c222_l299_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c222_l299_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9007199254740993 as i64, &vm_context);
    assert_eq!(result, -9007199254740992.0 as f64);
}

// Line 300
fn c223_l300_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c223_l300_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9007199254740995 as i64, &vm_context);
    assert_eq!(result, 9007199254740996.0 as f64);
}

// Line 301
fn c224_l301_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c224_l301_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_s_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9007199254740995 as i64, &vm_context);
    assert_eq!(result, -9007199254740996.0 as f64);
}

// Line 303
fn c225_l303_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c225_l303_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 304
fn c226_l304_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c226_l304_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 305
fn c227_l305_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c227_l305_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 2147483600.0 as f32);
}

// Line 306
fn c228_l306_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c228_l306_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, 2147483600.0 as f32);
}

// Line 307
fn c229_l307_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c229_l307_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(305419896 as i32, &vm_context);
    assert_eq!(result, 305419900.0 as f32);
}

// Line 308
fn c230_l308_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c230_l308_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, 4294967300.0 as f32);
}

// Line 309
fn c231_l309_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c231_l309_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483520 as i32, &vm_context);
    assert_eq!(result, 2147483600.0 as f32);
}

// Line 310
fn c232_l310_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c232_l310_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483519 as i32, &vm_context);
    assert_eq!(result, 2147484000.0 as f32);
}

// Line 311
fn c233_l311_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c233_l311_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483518 as i32, &vm_context);
    assert_eq!(result, 2147484000.0 as f32);
}

// Line 312
fn c234_l312_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c234_l312_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-384 as i32, &vm_context);
    assert_eq!(result, 4294966800.0 as f32);
}

// Line 313
fn c235_l313_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c235_l313_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-383 as i32, &vm_context);
    assert_eq!(result, 4294967000.0 as f32);
}

// Line 314
fn c236_l314_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c236_l314_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-382 as i32, &vm_context);
    assert_eq!(result, 4294967000.0 as f32);
}

// Line 316
fn c237_l316_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c237_l316_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777217 as i32, &vm_context);
    assert_eq!(result, 16777216.0 as f32);
}

// Line 317
fn c238_l317_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c238_l317_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777219 as i32, &vm_context);
    assert_eq!(result, 16777220.0 as f32);
}

// Line 319
fn c239_l319_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c239_l319_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 320
fn c240_l320_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c240_l320_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 321
fn c241_l321_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c241_l321_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 9223372000000000000.0 as f32);
}

// Line 322
fn c242_l322_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c242_l322_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 9223372000000000000.0 as f32);
}

// Line 323
fn c243_l323_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c243_l323_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, 18446744000000000000.0 as f32);
}

// Line 325
fn c244_l325_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c244_l325_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777217 as i64, &vm_context);
    assert_eq!(result, 16777216.0 as f32);
}

// Line 326
fn c245_l326_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c245_l326_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777219 as i64, &vm_context);
    assert_eq!(result, 16777220.0 as f32);
}

// Line 328
fn c246_l328_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c246_l328_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 329
fn c247_l329_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c247_l329_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 330
fn c248_l330_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c248_l330_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2147483647 as i32, &vm_context);
    assert_eq!(result, 2147483647.0 as f64);
}

// Line 331
fn c249_l331_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c249_l331_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, 2147483648.0 as f64);
}

// Line 332
fn c250_l332_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c250_l332_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, 4294967295.0 as f64);
}

// Line 334
fn c251_l334_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c251_l334_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 335
fn c252_l335_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c252_l335_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 336
fn c253_l336_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c253_l336_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 9223372036854776000.0 as f64);
}

// Line 337
fn c254_l337_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c254_l337_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 9223372036854776000.0 as f64);
}

// Line 338
fn c255_l338_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c255_l338_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, 18446744073709552000.0 as f64);
}

// Line 339
fn c256_l339_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c256_l339_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854774784 as i64, &vm_context);
    assert_eq!(result, 9223372036854776000.0 as f64);
}

// Line 340
fn c257_l340_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c257_l340_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854774783 as i64, &vm_context);
    assert_eq!(result, 9223372036854778000.0 as f64);
}

// Line 341
fn c258_l341_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c258_l341_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854774782 as i64, &vm_context);
    assert_eq!(result, 9223372036854778000.0 as f64);
}

// Line 342
fn c259_l342_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c259_l342_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-3072 as i64, &vm_context);
    assert_eq!(result, 18446744073709548000.0 as f64);
}

// Line 343
fn c260_l343_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c260_l343_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-3071 as i64, &vm_context);
    assert_eq!(result, 18446744073709550000.0 as f64);
}

// Line 344
fn c261_l344_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c261_l344_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-3070 as i64, &vm_context);
    assert_eq!(result, 18446744073709550000.0 as f64);
}

// Line 346
fn c262_l346_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c262_l346_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9007199254740993 as i64, &vm_context);
    assert_eq!(result, 9007199254740992.0 as f64);
}

// Line 347
fn c263_l347_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c263_l347_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.convert_u_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9007199254740995 as i64, &vm_context);
    assert_eq!(result, 9007199254740996.0 as f64);
}

// Line 349
fn c264_l349_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c264_l349_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 350
fn c265_l350_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c265_l350_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 351
fn c266_l351_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c266_l351_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001401298464324817 as f64);
}

// Line 352
fn c267_l352_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c267_l352_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001401298464324817 as f64);
}

// Line 353
fn c268_l353_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c268_l353_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 354
fn c269_l354_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c269_l354_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 355
fn c270_l355_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c270_l355_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, &vm_context);
    assert_eq!(result, -340282346638528860000000000000000000000.0 as f64);
}

// Line 356
fn c271_l356_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c271_l356_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, &vm_context);
    assert_eq!(result, 340282346638528860000000000000000000000.0 as f64);
}

// Line 358
fn c272_l358_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c272_l358_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0000000000000000000000000000000000015046328 as f32, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000001504632769052528 as f64);
}

// Line 360
fn c273_l360_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c273_l360_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(66382537000000000000000000000000000000.0 as f32, &vm_context);
    assert_eq!(result, 66382536710104395000000000000000000000.0 as f64);
}

// Line 361
fn c274_l361_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c274_l361_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f32::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 362
fn c275_l362_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c275_l362_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.promote_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f32::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 363

// Line 366

// Line 370
fn c278_l370_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c278_l370_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 371
fn c279_l371_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c279_l371_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f32);
}

// Line 372
fn c280_l372_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c280_l372_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 373
fn c281_l373_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c281_l373_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f32);
}

// Line 374
fn c282_l374_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c282_l374_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 375
fn c283_l375_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c283_l375_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f32);
}

// Line 376
fn c284_l376_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c284_l376_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754942807573643 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 377
fn c285_l377_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c285_l377_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754942807573643 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 378
fn c286_l378_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c286_l378_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754942807573642 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000011754942 as f32);
}

// Line 379
fn c287_l379_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c287_l379_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754942807573642 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000011754942 as f32);
}

// Line 380
fn c288_l380_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c288_l380_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001401298464324817 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 381
fn c289_l381_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c289_l381_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001401298464324817 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 382
fn c290_l382_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c290_l382_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282336497324060000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 340282330000000000000000000000000000000.0 as f32);
}

// Line 383
fn c291_l383_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c291_l383_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282336497324060000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -340282330000000000000000000000000000000.0 as f32);
}

// Line 384
fn c292_l384_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c292_l384_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282336497324100000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 385
fn c293_l385_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c293_l385_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282336497324100000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 386
fn c294_l386_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c294_l386_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282346638528860000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 387
fn c295_l387_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c295_l387_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282346638528860000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 388
fn c296_l388_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c296_l388_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282356779733620000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 389
fn c297_l389_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c297_l389_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282356779733620000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 390
fn c298_l390_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c298_l390_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282356779733660000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f32::INFINITY);
}

// Line 391
fn c299_l391_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c299_l391_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282356779733660000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f32::NEG_INFINITY);
}

// Line 392
fn c300_l392_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c300_l392_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000001504632769052528 as f64, &vm_context);
    assert_eq!(result, 0.0000000000000000000000000000000000015046328 as f32);
}

// Line 393
fn c301_l393_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c301_l393_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(66382536710104395000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 66382537000000000000000000000000000000.0 as f32);
}

// Line 394
fn c302_l394_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c302_l394_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f32::INFINITY);
}

// Line 395
fn c303_l395_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c303_l395_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f32::NEG_INFINITY);
}

// Line 396
fn c304_l396_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c304_l396_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0000000000000002 as f64, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 397
fn c305_l397_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c305_l397_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.9999999999999999 as f64, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 398
fn c306_l398_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c306_l398_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0000000596046448 as f64, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 399
fn c307_l399_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c307_l399_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.000000059604645 as f64, &vm_context);
    assert_eq!(result, 1.0000001 as f32);
}

// Line 400
fn c308_l400_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c308_l400_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.000000178813934 as f64, &vm_context);
    assert_eq!(result, 1.0000001 as f32);
}

// Line 401
fn c309_l401_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c309_l401_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0000001788139343 as f64, &vm_context);
    assert_eq!(result, 1.0000002 as f32);
}

// Line 402
fn c310_l402_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c310_l402_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0000002980232239 as f64, &vm_context);
    assert_eq!(result, 1.0000002 as f32);
}

// Line 403
fn c311_l403_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c311_l403_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777217.0 as f64, &vm_context);
    assert_eq!(result, 16777216.0 as f32);
}

// Line 404
fn c312_l404_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c312_l404_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777217.000000004 as f64, &vm_context);
    assert_eq!(result, 16777218.0 as f32);
}

// Line 405
fn c313_l405_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c313_l405_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777218.999999996 as f64, &vm_context);
    assert_eq!(result, 16777218.0 as f32);
}

// Line 406
fn c314_l406_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c314_l406_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(16777219.0 as f64, &vm_context);
    assert_eq!(result, 16777220.0 as f32);
}

// Line 407
fn c315_l407_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c315_l407_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(424258443299142700000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 424258450000000000000000000000000.0 as f32);
}

// Line 408
fn c316_l408_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c316_l408_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0000000000000000000000000000000001569262107843488 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000015692621 as f32);
}

// Line 409
fn c317_l409_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c317_l409_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000010551773688605172 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000010551773 as f32);
}

// Line 410
fn c318_l410_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c318_l410_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2.8238128484141933 as f64, &vm_context);
    assert_eq!(result, -2.823813 as f32);
}

// Line 411
fn c319_l411_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c319_l411_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9063376370095757000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -9063376000000000000000000000000000.0 as f32);
}

// Line 412

// Line 415

// Line 418
fn c322_l418_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c322_l418_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 419
fn c323_l419_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c323_l419_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f32);
}

// Line 420
fn c324_l420_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c324_l420_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0000000000000000000000000000000000000000000007006492321624085 as f64, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 421
fn c325_l421_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c325_l421_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0000000000000000000000000000000000000000000007006492321624085 as f64, &vm_context);
    assert_eq!(result, -0.0 as f32);
}

// Line 422
fn c326_l422_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c326_l422_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0000000000000000000000000000000000000000000007006492321624087 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 423
fn c327_l423_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c327_l423_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.demote_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0000000000000000000000000000000000000000000007006492321624087 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 425
fn c328_l425_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c328_l425_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 426
fn c329_l426_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c329_l426_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483648 as i32, &vm_context);
    assert_eq!(result, -0.0 as f32);
}

// Line 427
fn c330_l427_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c330_l427_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 430
fn c331_l430_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c331_l430_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(123456789 as i32, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000016535997 as f32);
}

// Line 431
fn c332_l431_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c332_l431_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2147483647 as i32, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 432
fn c333_l432_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c333_l432_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2139095040 as i32, &vm_context);
    assert_eq!(result, std::f32::INFINITY);
}

// Line 433
fn c334_l433_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c334_l433_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-8388608 as i32, &vm_context);
    assert_eq!(result, std::f32::NEG_INFINITY);
}

// Line 434
fn c335_l434_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c335_l434_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2143289344 as i32, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f32::NAN).is_sign_positive());
}

// Line 435
fn c336_l435_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c336_l435_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32.reinterpret_i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4194304 as i32, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f32::NAN).is_sign_positive());
}

// Line 440
fn c337_l440_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c337_l440_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 441
fn c338_l441_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c338_l441_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 444
fn c339_l444_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c339_l444_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 445
fn c340_l445_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c340_l445_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1234567890 as i64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000609957582 as f64);
}

// Line 446
fn c341_l446_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c341_l446_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775807 as i64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 447
fn c342_l447_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c342_l447_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9218868437227405312 as i64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 448
fn c343_l448_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c343_l448_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4503599627370496 as i64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 449
fn c344_l449_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c344_l449_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9221120237041090560 as i64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 450
fn c345_l450_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c345_l450_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64.reinterpret_i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2251799813685248 as i64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 456
fn c346_l456_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c346_l456_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 457
fn c347_l457_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c347_l457_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &vm_context);
    assert_eq!(result, -2147483648 as i32);
}

// Line 458
fn c348_l458_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c348_l458_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 461
fn c349_l461_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c349_l461_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &vm_context);
    assert_eq!(result, -2147483647 as i32);
}

// Line 462
fn c350_l462_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c350_l462_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1065353216 as i32);
}

// Line 463
fn c351_l463_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c351_l463_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(3.1415925 as f32, &vm_context);
    assert_eq!(result, 1078530010 as i32);
}

// Line 464
fn c352_l464_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c352_l464_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, &vm_context);
    assert_eq!(result, 2139095039 as i32);
}

// Line 465
fn c353_l465_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c353_l465_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, &vm_context);
    assert_eq!(result, -8388609 as i32);
}

// Line 466
fn c354_l466_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c354_l466_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f32::INFINITY, &vm_context);
    assert_eq!(result, 2139095040 as i32);
}

// Line 467
fn c355_l467_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c355_l467_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f32::NEG_INFINITY, &vm_context);
    assert_eq!(result, -8388608 as i32);
}

// Line 468
fn c356_l468_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c356_l468_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f32::NAN, &vm_context);
    assert_eq!(result, 2143289344 as i32);
}

// Line 469
fn c357_l469_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c357_l469_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32.reinterpret_f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f32::NAN, &vm_context);
    assert_eq!(result, -4194304 as i32);
}

// Line 475
fn c358_l475_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c358_l475_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 476
fn c359_l476_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c359_l476_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 477
fn c360_l477_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c360_l477_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 480
fn c361_l480_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c361_l480_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -9223372036854775807 as i64);
}

// Line 481
fn c362_l481_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c362_l481_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 4607182418800017408 as i64);
}

// Line 482
fn c363_l482_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c363_l482_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(3.14159265358979 as f64, &vm_context);
    assert_eq!(result, 4614256656552045841 as i64);
}

// Line 483
fn c364_l483_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c364_l483_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 9218868437227405311 as i64);
}

// Line 484
fn c365_l484_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c365_l484_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -4503599627370497 as i64);
}

// Line 485
fn c366_l485_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c366_l485_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, &vm_context);
    assert_eq!(result, 9218868437227405312 as i64);
}

// Line 486
fn c367_l486_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c367_l486_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -4503599627370496 as i64);
}

// Line 487
fn c368_l487_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c368_l487_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, &vm_context);
    assert_eq!(result, 9221120237041090560 as i64);
}

// Line 488
fn c369_l488_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c369_l488_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64.reinterpret_f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, &vm_context);
    assert_eq!(result, -2251799813685248 as i64);
}

#[test]
fn test_module_1() {
    let result_object = create_module_1();
    let vm_context = result_object.instance.generate_context();
    // We group the calls together
    c1_l29_action_invoke(&result_object, &vm_context);
    c2_l30_action_invoke(&result_object, &vm_context);
    c3_l31_action_invoke(&result_object, &vm_context);
    c4_l32_action_invoke(&result_object, &vm_context);
    c5_l33_action_invoke(&result_object, &vm_context);
    c6_l34_action_invoke(&result_object, &vm_context);
    c7_l36_action_invoke(&result_object, &vm_context);
    c8_l37_action_invoke(&result_object, &vm_context);
    c9_l38_action_invoke(&result_object, &vm_context);
    c10_l39_action_invoke(&result_object, &vm_context);
    c11_l40_action_invoke(&result_object, &vm_context);
    c12_l41_action_invoke(&result_object, &vm_context);
    c13_l43_action_invoke(&result_object, &vm_context);
    c14_l44_action_invoke(&result_object, &vm_context);
    c15_l45_action_invoke(&result_object, &vm_context);
    c16_l46_action_invoke(&result_object, &vm_context);
    c17_l47_action_invoke(&result_object, &vm_context);
    c18_l48_action_invoke(&result_object, &vm_context);
    c19_l49_action_invoke(&result_object, &vm_context);
    c20_l50_action_invoke(&result_object, &vm_context);
    c21_l51_action_invoke(&result_object, &vm_context);
    c22_l52_action_invoke(&result_object, &vm_context);
    c23_l53_action_invoke(&result_object, &vm_context);
    c24_l54_action_invoke(&result_object, &vm_context);
    c25_l56_action_invoke(&result_object, &vm_context);
    c26_l57_action_invoke(&result_object, &vm_context);
    c27_l58_action_invoke(&result_object, &vm_context);
    c28_l59_action_invoke(&result_object, &vm_context);
    c29_l60_action_invoke(&result_object, &vm_context);
    c30_l61_action_invoke(&result_object, &vm_context);
    c31_l62_action_invoke(&result_object, &vm_context);
    c32_l63_action_invoke(&result_object, &vm_context);
    c33_l64_action_invoke(&result_object, &vm_context);
    c34_l65_action_invoke(&result_object, &vm_context);
    c35_l66_action_invoke(&result_object, &vm_context);
    c36_l67_action_invoke(&result_object, &vm_context);
    c37_l68_action_invoke(&result_object, &vm_context);
    c38_l69_action_invoke(&result_object, &vm_context);
    c45_l81_action_invoke(&result_object, &vm_context);
    c46_l82_action_invoke(&result_object, &vm_context);
    c47_l83_action_invoke(&result_object, &vm_context);
    c48_l84_action_invoke(&result_object, &vm_context);
    c49_l85_action_invoke(&result_object, &vm_context);
    c50_l86_action_invoke(&result_object, &vm_context);
    c51_l87_action_invoke(&result_object, &vm_context);
    c52_l88_action_invoke(&result_object, &vm_context);
    c53_l89_action_invoke(&result_object, &vm_context);
    c54_l90_action_invoke(&result_object, &vm_context);
    c55_l91_action_invoke(&result_object, &vm_context);
    c56_l92_action_invoke(&result_object, &vm_context);
    c57_l93_action_invoke(&result_object, &vm_context);
    c64_l105_action_invoke(&result_object, &vm_context);
    c65_l106_action_invoke(&result_object, &vm_context);
    c66_l107_action_invoke(&result_object, &vm_context);
    c67_l108_action_invoke(&result_object, &vm_context);
    c68_l109_action_invoke(&result_object, &vm_context);
    c69_l110_action_invoke(&result_object, &vm_context);
    c70_l111_action_invoke(&result_object, &vm_context);
    c71_l112_action_invoke(&result_object, &vm_context);
    c72_l113_action_invoke(&result_object, &vm_context);
    c73_l114_action_invoke(&result_object, &vm_context);
    c74_l115_action_invoke(&result_object, &vm_context);
    c75_l116_action_invoke(&result_object, &vm_context);
    c76_l117_action_invoke(&result_object, &vm_context);
    c77_l118_action_invoke(&result_object, &vm_context);
    c84_l130_action_invoke(&result_object, &vm_context);
    c85_l131_action_invoke(&result_object, &vm_context);
    c86_l132_action_invoke(&result_object, &vm_context);
    c87_l133_action_invoke(&result_object, &vm_context);
    c88_l134_action_invoke(&result_object, &vm_context);
    c89_l135_action_invoke(&result_object, &vm_context);
    c90_l136_action_invoke(&result_object, &vm_context);
    c91_l137_action_invoke(&result_object, &vm_context);
    c92_l138_action_invoke(&result_object, &vm_context);
    c93_l139_action_invoke(&result_object, &vm_context);
    c94_l140_action_invoke(&result_object, &vm_context);
    c95_l141_action_invoke(&result_object, &vm_context);
    c96_l142_action_invoke(&result_object, &vm_context);
    c97_l143_action_invoke(&result_object, &vm_context);
    c107_l158_action_invoke(&result_object, &vm_context);
    c108_l159_action_invoke(&result_object, &vm_context);
    c109_l160_action_invoke(&result_object, &vm_context);
    c110_l161_action_invoke(&result_object, &vm_context);
    c111_l162_action_invoke(&result_object, &vm_context);
    c112_l163_action_invoke(&result_object, &vm_context);
    c113_l164_action_invoke(&result_object, &vm_context);
    c114_l165_action_invoke(&result_object, &vm_context);
    c115_l166_action_invoke(&result_object, &vm_context);
    c116_l167_action_invoke(&result_object, &vm_context);
    c117_l168_action_invoke(&result_object, &vm_context);
    c118_l169_action_invoke(&result_object, &vm_context);
    c119_l170_action_invoke(&result_object, &vm_context);
    c120_l171_action_invoke(&result_object, &vm_context);
    c121_l172_action_invoke(&result_object, &vm_context);
    c122_l173_action_invoke(&result_object, &vm_context);
    c129_l185_action_invoke(&result_object, &vm_context);
    c130_l186_action_invoke(&result_object, &vm_context);
    c131_l187_action_invoke(&result_object, &vm_context);
    c132_l188_action_invoke(&result_object, &vm_context);
    c133_l189_action_invoke(&result_object, &vm_context);
    c134_l190_action_invoke(&result_object, &vm_context);
    c135_l191_action_invoke(&result_object, &vm_context);
    c136_l192_action_invoke(&result_object, &vm_context);
    c137_l193_action_invoke(&result_object, &vm_context);
    c138_l194_action_invoke(&result_object, &vm_context);
    c139_l195_action_invoke(&result_object, &vm_context);
    c146_l207_action_invoke(&result_object, &vm_context);
    c147_l208_action_invoke(&result_object, &vm_context);
    c148_l209_action_invoke(&result_object, &vm_context);
    c149_l210_action_invoke(&result_object, &vm_context);
    c150_l211_action_invoke(&result_object, &vm_context);
    c151_l212_action_invoke(&result_object, &vm_context);
    c152_l213_action_invoke(&result_object, &vm_context);
    c153_l214_action_invoke(&result_object, &vm_context);
    c154_l215_action_invoke(&result_object, &vm_context);
    c155_l216_action_invoke(&result_object, &vm_context);
    c156_l217_action_invoke(&result_object, &vm_context);
    c157_l218_action_invoke(&result_object, &vm_context);
    c158_l219_action_invoke(&result_object, &vm_context);
    c159_l220_action_invoke(&result_object, &vm_context);
    c160_l221_action_invoke(&result_object, &vm_context);
    c161_l222_action_invoke(&result_object, &vm_context);
    c168_l234_action_invoke(&result_object, &vm_context);
    c169_l235_action_invoke(&result_object, &vm_context);
    c170_l236_action_invoke(&result_object, &vm_context);
    c171_l237_action_invoke(&result_object, &vm_context);
    c172_l238_action_invoke(&result_object, &vm_context);
    c173_l239_action_invoke(&result_object, &vm_context);
    c174_l240_action_invoke(&result_object, &vm_context);
    c175_l241_action_invoke(&result_object, &vm_context);
    c176_l242_action_invoke(&result_object, &vm_context);
    c177_l243_action_invoke(&result_object, &vm_context);
    c178_l244_action_invoke(&result_object, &vm_context);
    c179_l245_action_invoke(&result_object, &vm_context);
    c180_l246_action_invoke(&result_object, &vm_context);
    c181_l247_action_invoke(&result_object, &vm_context);
    c182_l248_action_invoke(&result_object, &vm_context);
    c189_l260_action_invoke(&result_object, &vm_context);
    c190_l261_action_invoke(&result_object, &vm_context);
    c191_l262_action_invoke(&result_object, &vm_context);
    c192_l263_action_invoke(&result_object, &vm_context);
    c193_l264_action_invoke(&result_object, &vm_context);
    c194_l265_action_invoke(&result_object, &vm_context);
    c195_l267_action_invoke(&result_object, &vm_context);
    c196_l268_action_invoke(&result_object, &vm_context);
    c197_l269_action_invoke(&result_object, &vm_context);
    c198_l270_action_invoke(&result_object, &vm_context);
    c199_l272_action_invoke(&result_object, &vm_context);
    c200_l273_action_invoke(&result_object, &vm_context);
    c201_l274_action_invoke(&result_object, &vm_context);
    c202_l275_action_invoke(&result_object, &vm_context);
    c203_l276_action_invoke(&result_object, &vm_context);
    c204_l277_action_invoke(&result_object, &vm_context);
    c205_l279_action_invoke(&result_object, &vm_context);
    c206_l280_action_invoke(&result_object, &vm_context);
    c207_l281_action_invoke(&result_object, &vm_context);
    c208_l282_action_invoke(&result_object, &vm_context);
    c209_l284_action_invoke(&result_object, &vm_context);
    c210_l285_action_invoke(&result_object, &vm_context);
    c211_l286_action_invoke(&result_object, &vm_context);
    c212_l287_action_invoke(&result_object, &vm_context);
    c213_l288_action_invoke(&result_object, &vm_context);
    c214_l289_action_invoke(&result_object, &vm_context);
    c215_l291_action_invoke(&result_object, &vm_context);
    c216_l292_action_invoke(&result_object, &vm_context);
    c217_l293_action_invoke(&result_object, &vm_context);
    c218_l294_action_invoke(&result_object, &vm_context);
    c219_l295_action_invoke(&result_object, &vm_context);
    c220_l296_action_invoke(&result_object, &vm_context);
    c221_l298_action_invoke(&result_object, &vm_context);
    c222_l299_action_invoke(&result_object, &vm_context);
    c223_l300_action_invoke(&result_object, &vm_context);
    c224_l301_action_invoke(&result_object, &vm_context);
    c225_l303_action_invoke(&result_object, &vm_context);
    c226_l304_action_invoke(&result_object, &vm_context);
    c227_l305_action_invoke(&result_object, &vm_context);
    c228_l306_action_invoke(&result_object, &vm_context);
    c229_l307_action_invoke(&result_object, &vm_context);
    c230_l308_action_invoke(&result_object, &vm_context);
    c231_l309_action_invoke(&result_object, &vm_context);
    c232_l310_action_invoke(&result_object, &vm_context);
    c233_l311_action_invoke(&result_object, &vm_context);
    c234_l312_action_invoke(&result_object, &vm_context);
    c235_l313_action_invoke(&result_object, &vm_context);
    c236_l314_action_invoke(&result_object, &vm_context);
    c237_l316_action_invoke(&result_object, &vm_context);
    c238_l317_action_invoke(&result_object, &vm_context);
    c239_l319_action_invoke(&result_object, &vm_context);
    c240_l320_action_invoke(&result_object, &vm_context);
    c241_l321_action_invoke(&result_object, &vm_context);
    c242_l322_action_invoke(&result_object, &vm_context);
    c243_l323_action_invoke(&result_object, &vm_context);
    c244_l325_action_invoke(&result_object, &vm_context);
    c245_l326_action_invoke(&result_object, &vm_context);
    c246_l328_action_invoke(&result_object, &vm_context);
    c247_l329_action_invoke(&result_object, &vm_context);
    c248_l330_action_invoke(&result_object, &vm_context);
    c249_l331_action_invoke(&result_object, &vm_context);
    c250_l332_action_invoke(&result_object, &vm_context);
    c251_l334_action_invoke(&result_object, &vm_context);
    c252_l335_action_invoke(&result_object, &vm_context);
    c253_l336_action_invoke(&result_object, &vm_context);
    c254_l337_action_invoke(&result_object, &vm_context);
    c255_l338_action_invoke(&result_object, &vm_context);
    c256_l339_action_invoke(&result_object, &vm_context);
    c257_l340_action_invoke(&result_object, &vm_context);
    c258_l341_action_invoke(&result_object, &vm_context);
    c259_l342_action_invoke(&result_object, &vm_context);
    c260_l343_action_invoke(&result_object, &vm_context);
    c261_l344_action_invoke(&result_object, &vm_context);
    c262_l346_action_invoke(&result_object, &vm_context);
    c263_l347_action_invoke(&result_object, &vm_context);
    c264_l349_action_invoke(&result_object, &vm_context);
    c265_l350_action_invoke(&result_object, &vm_context);
    c266_l351_action_invoke(&result_object, &vm_context);
    c267_l352_action_invoke(&result_object, &vm_context);
    c268_l353_action_invoke(&result_object, &vm_context);
    c269_l354_action_invoke(&result_object, &vm_context);
    c270_l355_action_invoke(&result_object, &vm_context);
    c271_l356_action_invoke(&result_object, &vm_context);
    c272_l358_action_invoke(&result_object, &vm_context);
    c273_l360_action_invoke(&result_object, &vm_context);
    c274_l361_action_invoke(&result_object, &vm_context);
    c275_l362_action_invoke(&result_object, &vm_context);
    c278_l370_action_invoke(&result_object, &vm_context);
    c279_l371_action_invoke(&result_object, &vm_context);
    c280_l372_action_invoke(&result_object, &vm_context);
    c281_l373_action_invoke(&result_object, &vm_context);
    c282_l374_action_invoke(&result_object, &vm_context);
    c283_l375_action_invoke(&result_object, &vm_context);
    c284_l376_action_invoke(&result_object, &vm_context);
    c285_l377_action_invoke(&result_object, &vm_context);
    c286_l378_action_invoke(&result_object, &vm_context);
    c287_l379_action_invoke(&result_object, &vm_context);
    c288_l380_action_invoke(&result_object, &vm_context);
    c289_l381_action_invoke(&result_object, &vm_context);
    c290_l382_action_invoke(&result_object, &vm_context);
    c291_l383_action_invoke(&result_object, &vm_context);
    c292_l384_action_invoke(&result_object, &vm_context);
    c293_l385_action_invoke(&result_object, &vm_context);
    c294_l386_action_invoke(&result_object, &vm_context);
    c295_l387_action_invoke(&result_object, &vm_context);
    c296_l388_action_invoke(&result_object, &vm_context);
    c297_l389_action_invoke(&result_object, &vm_context);
    c298_l390_action_invoke(&result_object, &vm_context);
    c299_l391_action_invoke(&result_object, &vm_context);
    c300_l392_action_invoke(&result_object, &vm_context);
    c301_l393_action_invoke(&result_object, &vm_context);
    c302_l394_action_invoke(&result_object, &vm_context);
    c303_l395_action_invoke(&result_object, &vm_context);
    c304_l396_action_invoke(&result_object, &vm_context);
    c305_l397_action_invoke(&result_object, &vm_context);
    c306_l398_action_invoke(&result_object, &vm_context);
    c307_l399_action_invoke(&result_object, &vm_context);
    c308_l400_action_invoke(&result_object, &vm_context);
    c309_l401_action_invoke(&result_object, &vm_context);
    c310_l402_action_invoke(&result_object, &vm_context);
    c311_l403_action_invoke(&result_object, &vm_context);
    c312_l404_action_invoke(&result_object, &vm_context);
    c313_l405_action_invoke(&result_object, &vm_context);
    c314_l406_action_invoke(&result_object, &vm_context);
    c315_l407_action_invoke(&result_object, &vm_context);
    c316_l408_action_invoke(&result_object, &vm_context);
    c317_l409_action_invoke(&result_object, &vm_context);
    c318_l410_action_invoke(&result_object, &vm_context);
    c319_l411_action_invoke(&result_object, &vm_context);
    c322_l418_action_invoke(&result_object, &vm_context);
    c323_l419_action_invoke(&result_object, &vm_context);
    c324_l420_action_invoke(&result_object, &vm_context);
    c325_l421_action_invoke(&result_object, &vm_context);
    c326_l422_action_invoke(&result_object, &vm_context);
    c327_l423_action_invoke(&result_object, &vm_context);
    c328_l425_action_invoke(&result_object, &vm_context);
    c329_l426_action_invoke(&result_object, &vm_context);
    c330_l427_action_invoke(&result_object, &vm_context);
    c331_l430_action_invoke(&result_object, &vm_context);
    c332_l431_action_invoke(&result_object, &vm_context);
    c333_l432_action_invoke(&result_object, &vm_context);
    c334_l433_action_invoke(&result_object, &vm_context);
    c335_l434_action_invoke(&result_object, &vm_context);
    c336_l435_action_invoke(&result_object, &vm_context);
    c337_l440_action_invoke(&result_object, &vm_context);
    c338_l441_action_invoke(&result_object, &vm_context);
    c339_l444_action_invoke(&result_object, &vm_context);
    c340_l445_action_invoke(&result_object, &vm_context);
    c341_l446_action_invoke(&result_object, &vm_context);
    c342_l447_action_invoke(&result_object, &vm_context);
    c343_l448_action_invoke(&result_object, &vm_context);
    c344_l449_action_invoke(&result_object, &vm_context);
    c345_l450_action_invoke(&result_object, &vm_context);
    c346_l456_action_invoke(&result_object, &vm_context);
    c347_l457_action_invoke(&result_object, &vm_context);
    c348_l458_action_invoke(&result_object, &vm_context);
    c349_l461_action_invoke(&result_object, &vm_context);
    c350_l462_action_invoke(&result_object, &vm_context);
    c351_l463_action_invoke(&result_object, &vm_context);
    c352_l464_action_invoke(&result_object, &vm_context);
    c353_l465_action_invoke(&result_object, &vm_context);
    c354_l466_action_invoke(&result_object, &vm_context);
    c355_l467_action_invoke(&result_object, &vm_context);
    c356_l468_action_invoke(&result_object, &vm_context);
    c357_l469_action_invoke(&result_object, &vm_context);
    c358_l475_action_invoke(&result_object, &vm_context);
    c359_l476_action_invoke(&result_object, &vm_context);
    c360_l477_action_invoke(&result_object, &vm_context);
    c361_l480_action_invoke(&result_object, &vm_context);
    c362_l481_action_invoke(&result_object, &vm_context);
    c363_l482_action_invoke(&result_object, &vm_context);
    c364_l483_action_invoke(&result_object, &vm_context);
    c365_l484_action_invoke(&result_object, &vm_context);
    c366_l485_action_invoke(&result_object, &vm_context);
    c367_l486_action_invoke(&result_object, &vm_context);
    c368_l487_action_invoke(&result_object, &vm_context);
    c369_l488_action_invoke(&result_object, &vm_context);
}
