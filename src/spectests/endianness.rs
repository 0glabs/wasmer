// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/endianness.wast
#![allow(
    warnings,
    dead_code
)]
use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, VmCtx, Export};
use super::_common::spectest_importobject;
use wabt::wat2wasm;


// Line 1
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param i32 i32)))
      (type (;1;) (func (param i32 i64)))
      (type (;2;) (func (param i32) (result i32)))
      (type (;3;) (func (param i32) (result i64)))
      (type (;4;) (func (param i64) (result i64)))
      (type (;5;) (func (param f32) (result f32)))
      (type (;6;) (func (param f64) (result f64)))
      (func (;0;) (type 0) (param i32 i32)
        get_local 0
        get_local 1
        i32.store8
        get_local 0
        i32.const 1
        i32.add
        get_local 1
        i32.const 8
        i32.shr_u
        i32.store8)
      (func (;1;) (type 0) (param i32 i32)
        get_local 0
        get_local 1
        call 0
        get_local 0
        i32.const 2
        i32.add
        get_local 1
        i32.const 16
        i32.shr_u
        call 0)
      (func (;2;) (type 1) (param i32 i64)
        get_local 0
        get_local 1
        i32.wrap/i64
        call 1
        get_local 0
        i32.const 4
        i32.add
        get_local 1
        i64.const 32
        i64.shr_u
        i32.wrap/i64
        call 1)
      (func (;3;) (type 2) (param i32) (result i32)
        get_local 0
        i32.load8_u
        get_local 0
        i32.const 1
        i32.add
        i32.load8_u
        i32.const 8
        i32.shl
        i32.or)
      (func (;4;) (type 2) (param i32) (result i32)
        get_local 0
        call 3
        get_local 0
        i32.const 2
        i32.add
        call 3
        i32.const 16
        i32.shl
        i32.or)
      (func (;5;) (type 3) (param i32) (result i64)
        get_local 0
        call 4
        i64.extend_u/i32
        get_local 0
        i32.const 4
        i32.add
        call 4
        i64.extend_u/i32
        i64.const 32
        i64.shl
        i64.or)
      (func (;6;) (type 2) (param i32) (result i32)
        i32.const 0
        get_local 0
        call 0
        i32.const 0
        i32.load16_s)
      (func (;7;) (type 2) (param i32) (result i32)
        i32.const 0
        get_local 0
        call 0
        i32.const 0
        i32.load16_u)
      (func (;8;) (type 2) (param i32) (result i32)
        i32.const 0
        get_local 0
        call 1
        i32.const 0
        i32.load)
      (func (;9;) (type 4) (param i64) (result i64)
        i32.const 0
        get_local 0
        i32.wrap/i64
        call 0
        i32.const 0
        i64.load16_s)
      (func (;10;) (type 4) (param i64) (result i64)
        i32.const 0
        get_local 0
        i32.wrap/i64
        call 0
        i32.const 0
        i64.load16_u)
      (func (;11;) (type 4) (param i64) (result i64)
        i32.const 0
        get_local 0
        i32.wrap/i64
        call 1
        i32.const 0
        i64.load32_s)
      (func (;12;) (type 4) (param i64) (result i64)
        i32.const 0
        get_local 0
        i32.wrap/i64
        call 1
        i32.const 0
        i64.load32_u)
      (func (;13;) (type 4) (param i64) (result i64)
        i32.const 0
        get_local 0
        call 2
        i32.const 0
        i64.load)
      (func (;14;) (type 5) (param f32) (result f32)
        i32.const 0
        get_local 0
        i32.reinterpret/f32
        call 1
        i32.const 0
        f32.load)
      (func (;15;) (type 6) (param f64) (result f64)
        i32.const 0
        get_local 0
        i64.reinterpret/f64
        call 2
        i32.const 0
        f64.load)
      (func (;16;) (type 2) (param i32) (result i32)
        i32.const 0
        get_local 0
        i32.store16
        i32.const 0
        call 3)
      (func (;17;) (type 2) (param i32) (result i32)
        i32.const 0
        get_local 0
        i32.store
        i32.const 0
        call 4)
      (func (;18;) (type 4) (param i64) (result i64)
        i32.const 0
        get_local 0
        i64.store16
        i32.const 0
        call 3
        i64.extend_u/i32)
      (func (;19;) (type 4) (param i64) (result i64)
        i32.const 0
        get_local 0
        i64.store32
        i32.const 0
        call 4
        i64.extend_u/i32)
      (func (;20;) (type 4) (param i64) (result i64)
        i32.const 0
        get_local 0
        i64.store
        i32.const 0
        call 5)
      (func (;21;) (type 5) (param f32) (result f32)
        i32.const 0
        get_local 0
        f32.store
        i32.const 0
        call 4
        f32.reinterpret/i32)
      (func (;22;) (type 6) (param f64) (result f64)
        i32.const 0
        get_local 0
        f64.store
        i32.const 0
        call 5
        f64.reinterpret/i64)
      (memory (;0;) 1)
      (export \"i32_load16_s\" (func 6))
      (export \"i32_load16_u\" (func 7))
      (export \"i32_load\" (func 8))
      (export \"i64_load16_s\" (func 9))
      (export \"i64_load16_u\" (func 10))
      (export \"i64_load32_s\" (func 11))
      (export \"i64_load32_u\" (func 12))
      (export \"i64_load\" (func 13))
      (export \"f32_load\" (func 14))
      (export \"f64_load\" (func 15))
      (export \"i32_store16\" (func 16))
      (export \"i32_store\" (func 17))
      (export \"i64_store16\" (func 18))
      (export \"i64_store32\" (func 19))
      (export \"i64_store\" (func 20))
      (export \"f32_store\" (func 21))
      (export \"f64_store\" (func 22)))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 133
fn l133_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l133_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_load16_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 134
fn l134_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l134_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_load16_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4242 as i32, &vm_context);
    assert_eq!(result, -4242 as i32);
}

// Line 135
fn l135_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l135_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_load16_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(42 as i32, &vm_context);
    assert_eq!(result, 42 as i32);
}

// Line 136
fn l136_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l136_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_load16_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(12816 as i32, &vm_context);
    assert_eq!(result, 12816 as i32);
}

// Line 138
fn l138_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l138_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_load16_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, 65535 as i32);
}

// Line 139
fn l139_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l139_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_load16_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4242 as i32, &vm_context);
    assert_eq!(result, 61294 as i32);
}

// Line 140
fn l140_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l140_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_load16_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(42 as i32, &vm_context);
    assert_eq!(result, 42 as i32);
}

// Line 141
fn l141_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l141_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_load16_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(51966 as i32, &vm_context);
    assert_eq!(result, 51966 as i32);
}

// Line 143
fn l143_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l143_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_load") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 144
fn l144_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l144_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_load") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-42424242 as i32, &vm_context);
    assert_eq!(result, -42424242 as i32);
}

// Line 145
fn l145_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l145_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_load") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(42424242 as i32, &vm_context);
    assert_eq!(result, 42424242 as i32);
}

// Line 146
fn l146_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l146_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_load") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1414717974 as i32, &vm_context);
    assert_eq!(result, -1414717974 as i32);
}

// Line 148
fn l148_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l148_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load16_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 149
fn l149_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l149_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load16_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4242 as i64, &vm_context);
    assert_eq!(result, -4242 as i64);
}

// Line 150
fn l150_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l150_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load16_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(42 as i64, &vm_context);
    assert_eq!(result, 42 as i64);
}

// Line 151
fn l151_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l151_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load16_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(12816 as i64, &vm_context);
    assert_eq!(result, 12816 as i64);
}

// Line 153
fn l153_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l153_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load16_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, 65535 as i64);
}

// Line 154
fn l154_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l154_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load16_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4242 as i64, &vm_context);
    assert_eq!(result, 61294 as i64);
}

// Line 155
fn l155_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l155_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load16_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(42 as i64, &vm_context);
    assert_eq!(result, 42 as i64);
}

// Line 156
fn l156_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l156_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load16_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(51966 as i64, &vm_context);
    assert_eq!(result, 51966 as i64);
}

// Line 158
fn l158_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l158_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load32_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 159
fn l159_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l159_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load32_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-42424242 as i64, &vm_context);
    assert_eq!(result, -42424242 as i64);
}

// Line 160
fn l160_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l160_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load32_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(42424242 as i64, &vm_context);
    assert_eq!(result, 42424242 as i64);
}

// Line 161
fn l161_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l161_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load32_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(305419896 as i64, &vm_context);
    assert_eq!(result, 305419896 as i64);
}

// Line 163
fn l163_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l163_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load32_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, 4294967295 as i64);
}

// Line 164
fn l164_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l164_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load32_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-42424242 as i64, &vm_context);
    assert_eq!(result, 4252543054 as i64);
}

// Line 165
fn l165_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l165_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load32_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(42424242 as i64, &vm_context);
    assert_eq!(result, 42424242 as i64);
}

// Line 166
fn l166_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l166_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load32_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2880249322 as i64, &vm_context);
    assert_eq!(result, 2880249322 as i64);
}

// Line 168
fn l168_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l168_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 169
fn l169_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l169_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-42424242 as i64, &vm_context);
    assert_eq!(result, -42424242 as i64);
}

// Line 170
fn l170_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l170_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2880249322 as i64, &vm_context);
    assert_eq!(result, 2880249322 as i64);
}

// Line 171
fn l171_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l171_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_load") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6075977126246539798 as i64, &vm_context);
    assert_eq!(result, -6075977126246539798 as i64);
}

// Line 173
fn l173_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l173_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("f32_load") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, &vm_context);
    assert_eq!(result, -1.0 as f32);
}

// Line 174
fn l174_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l174_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("f32_load") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.01234 as f32, &vm_context);
    assert_eq!(result, 0.01234 as f32);
}

// Line 175
fn l175_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l175_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("f32_load") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4242.4243 as f32, &vm_context);
    assert_eq!(result, 4242.4243 as f32);
}

// Line 176
fn l176_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l176_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("f32_load") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, &vm_context);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 178
fn l178_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l178_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("f64_load") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 179
fn l179_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l179_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("f64_load") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1234.56789 as f64, &vm_context);
    assert_eq!(result, 1234.56789 as f64);
}

// Line 180
fn l180_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l180_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("f64_load") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(424242.424242 as f64, &vm_context);
    assert_eq!(result, 424242.424242 as f64);
}

// Line 181
fn l181_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l181_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("f64_load") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 184
fn l184_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l184_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_store16") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, 65535 as i32);
}

// Line 185
fn l185_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l185_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_store16") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4242 as i32, &vm_context);
    assert_eq!(result, 61294 as i32);
}

// Line 186
fn l186_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l186_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_store16") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(42 as i32, &vm_context);
    assert_eq!(result, 42 as i32);
}

// Line 187
fn l187_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l187_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_store16") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(51966 as i32, &vm_context);
    assert_eq!(result, 51966 as i32);
}

// Line 189
fn l189_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l189_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, -1 as i32);
}

// Line 190
fn l190_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l190_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4242 as i32, &vm_context);
    assert_eq!(result, -4242 as i32);
}

// Line 191
fn l191_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l191_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(42424242 as i32, &vm_context);
    assert_eq!(result, 42424242 as i32);
}

// Line 192
fn l192_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l192_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i32_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-559035650 as i32, &vm_context);
    assert_eq!(result, -559035650 as i32);
}

// Line 194
fn l194_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l194_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_store16") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, 65535 as i64);
}

// Line 195
fn l195_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l195_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_store16") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4242 as i64, &vm_context);
    assert_eq!(result, 61294 as i64);
}

// Line 196
fn l196_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l196_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_store16") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(42 as i64, &vm_context);
    assert_eq!(result, 42 as i64);
}

// Line 197
fn l197_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l197_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_store16") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(51966 as i64, &vm_context);
    assert_eq!(result, 51966 as i64);
}

// Line 199
fn l199_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l199_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_store32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, 4294967295 as i64);
}

// Line 200
fn l200_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l200_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_store32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-4242 as i64, &vm_context);
    assert_eq!(result, 4294963054 as i64);
}

// Line 201
fn l201_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l201_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_store32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(42424242 as i64, &vm_context);
    assert_eq!(result, 42424242 as i64);
}

// Line 202
fn l202_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l202_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_store32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(3735931646 as i64, &vm_context);
    assert_eq!(result, 3735931646 as i64);
}

// Line 204
fn l204_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l204_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 205
fn l205_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l205_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-42424242 as i64, &vm_context);
    assert_eq!(result, -42424242 as i64);
}

// Line 206
fn l206_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l206_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2880249322 as i64, &vm_context);
    assert_eq!(result, 2880249322 as i64);
}

// Line 207
fn l207_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l207_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("i64_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6075977126246539798 as i64, &vm_context);
    assert_eq!(result, -6075977126246539798 as i64);
}

// Line 209
fn l209_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l209_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("f32_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, &vm_context);
    assert_eq!(result, -1.0 as f32);
}

// Line 210
fn l210_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l210_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("f32_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.01234 as f32, &vm_context);
    assert_eq!(result, 0.01234 as f32);
}

// Line 211
fn l211_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l211_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("f32_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4242.4243 as f32, &vm_context);
    assert_eq!(result, 4242.4243 as f32);
}

// Line 212
fn l212_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l212_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("f32_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, &vm_context);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 214
fn l214_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l214_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("f64_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 215
fn l215_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l215_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("f64_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1234.56789 as f64, &vm_context);
    assert_eq!(result, 1234.56789 as f64);
}

// Line 216
fn l216_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l216_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("f64_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(424242.424242 as f64, &vm_context);
    assert_eq!(result, 424242.424242 as f64);
}

// Line 217
fn l217_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l217_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("f64_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

#[test]
fn test_module_1() {
    let result_object = create_module_1();
    let vm_context = result_object.instance.generate_context();
    // We group the calls together
    l133_assert_return_invoke(&result_object, &vm_context);
    l134_assert_return_invoke(&result_object, &vm_context);
    l135_assert_return_invoke(&result_object, &vm_context);
    l136_assert_return_invoke(&result_object, &vm_context);
    l138_assert_return_invoke(&result_object, &vm_context);
    l139_assert_return_invoke(&result_object, &vm_context);
    l140_assert_return_invoke(&result_object, &vm_context);
    l141_assert_return_invoke(&result_object, &vm_context);
    l143_assert_return_invoke(&result_object, &vm_context);
    l144_assert_return_invoke(&result_object, &vm_context);
    l145_assert_return_invoke(&result_object, &vm_context);
    l146_assert_return_invoke(&result_object, &vm_context);
    l148_assert_return_invoke(&result_object, &vm_context);
    l149_assert_return_invoke(&result_object, &vm_context);
    l150_assert_return_invoke(&result_object, &vm_context);
    l151_assert_return_invoke(&result_object, &vm_context);
    l153_assert_return_invoke(&result_object, &vm_context);
    l154_assert_return_invoke(&result_object, &vm_context);
    l155_assert_return_invoke(&result_object, &vm_context);
    l156_assert_return_invoke(&result_object, &vm_context);
    l158_assert_return_invoke(&result_object, &vm_context);
    l159_assert_return_invoke(&result_object, &vm_context);
    l160_assert_return_invoke(&result_object, &vm_context);
    l161_assert_return_invoke(&result_object, &vm_context);
    l163_assert_return_invoke(&result_object, &vm_context);
    l164_assert_return_invoke(&result_object, &vm_context);
    l165_assert_return_invoke(&result_object, &vm_context);
    l166_assert_return_invoke(&result_object, &vm_context);
    l168_assert_return_invoke(&result_object, &vm_context);
    l169_assert_return_invoke(&result_object, &vm_context);
    l170_assert_return_invoke(&result_object, &vm_context);
    l171_assert_return_invoke(&result_object, &vm_context);
    l173_assert_return_invoke(&result_object, &vm_context);
    l174_assert_return_invoke(&result_object, &vm_context);
    l175_assert_return_invoke(&result_object, &vm_context);
    l176_assert_return_invoke(&result_object, &vm_context);
    l178_assert_return_invoke(&result_object, &vm_context);
    l179_assert_return_invoke(&result_object, &vm_context);
    l180_assert_return_invoke(&result_object, &vm_context);
    l181_assert_return_invoke(&result_object, &vm_context);
    l184_assert_return_invoke(&result_object, &vm_context);
    l185_assert_return_invoke(&result_object, &vm_context);
    l186_assert_return_invoke(&result_object, &vm_context);
    l187_assert_return_invoke(&result_object, &vm_context);
    l189_assert_return_invoke(&result_object, &vm_context);
    l190_assert_return_invoke(&result_object, &vm_context);
    l191_assert_return_invoke(&result_object, &vm_context);
    l192_assert_return_invoke(&result_object, &vm_context);
    l194_assert_return_invoke(&result_object, &vm_context);
    l195_assert_return_invoke(&result_object, &vm_context);
    l196_assert_return_invoke(&result_object, &vm_context);
    l197_assert_return_invoke(&result_object, &vm_context);
    l199_assert_return_invoke(&result_object, &vm_context);
    l200_assert_return_invoke(&result_object, &vm_context);
    l201_assert_return_invoke(&result_object, &vm_context);
    l202_assert_return_invoke(&result_object, &vm_context);
    l204_assert_return_invoke(&result_object, &vm_context);
    l205_assert_return_invoke(&result_object, &vm_context);
    l206_assert_return_invoke(&result_object, &vm_context);
    l207_assert_return_invoke(&result_object, &vm_context);
    l209_assert_return_invoke(&result_object, &vm_context);
    l210_assert_return_invoke(&result_object, &vm_context);
    l211_assert_return_invoke(&result_object, &vm_context);
    l212_assert_return_invoke(&result_object, &vm_context);
    l214_assert_return_invoke(&result_object, &vm_context);
    l215_assert_return_invoke(&result_object, &vm_context);
    l216_assert_return_invoke(&result_object, &vm_context);
    l217_assert_return_invoke(&result_object, &vm_context);
}
