// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/call_indirect.wast
#![allow(
    warnings,
    dead_code
)]
use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, VmCtx, Export};
use super::_common::spectest_importobject;
use wabt::wat2wasm;


// Line 3
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func))
      (type (;1;) (func (result i32)))
      (type (;2;) (func (result i64)))
      (type (;3;) (func (result f32)))
      (type (;4;) (func (result f64)))
      (type (;5;) (func (param i32) (result i32)))
      (type (;6;) (func (param i64) (result i64)))
      (type (;7;) (func (param f32) (result f32)))
      (type (;8;) (func (param f64) (result f64)))
      (type (;9;) (func (param f32 i32) (result i32)))
      (type (;10;) (func (param i32 i64) (result i64)))
      (type (;11;) (func (param f64 f32) (result f32)))
      (type (;12;) (func (param i64 f64) (result f64)))
      (type (;13;) (func (param i32) (result i32)))
      (type (;14;) (func (param i64) (result i64)))
      (type (;15;) (func (param f32) (result f32)))
      (type (;16;) (func (param f64) (result f64)))
      (type (;17;) (func (param i64)))
      (type (;18;) (func (param i64 f64 i32 i64)))
      (type (;19;) (func (param i64) (result i32)))
      (type (;20;) (func (param i64 f64 i32 i64) (result i32)))
      (type (;21;) (func (param i32) (result i64)))
      (type (;22;) (func (param i32) (result f32)))
      (type (;23;) (func (param i32) (result f64)))
      (func (;0;) (type 1) (result i32)
        i32.const 306)
      (func (;1;) (type 2) (result i64)
        i64.const 356)
      (func (;2;) (type 3) (result f32)
        f32.const 0x1.e64p+11 (;=3890;))
      (func (;3;) (type 4) (result f64)
        f64.const 0x1.ec8p+11 (;=3940;))
      (func (;4;) (type 5) (param i32) (result i32)
        get_local 0)
      (func (;5;) (type 6) (param i64) (result i64)
        get_local 0)
      (func (;6;) (type 7) (param f32) (result f32)
        get_local 0)
      (func (;7;) (type 8) (param f64) (result f64)
        get_local 0)
      (func (;8;) (type 10) (param i32 i64) (result i64)
        get_local 1)
      (func (;9;) (type 12) (param i64 f64) (result f64)
        get_local 1)
      (func (;10;) (type 9) (param f32 i32) (result i32)
        get_local 1)
      (func (;11;) (type 11) (param f64 f32) (result f32)
        get_local 1)
      (func (;12;) (type 13) (param i32) (result i32)
        get_local 0)
      (func (;13;) (type 14) (param i64) (result i64)
        get_local 0)
      (func (;14;) (type 15) (param f32) (result f32)
        get_local 0)
      (func (;15;) (type 16) (param f64) (result f64)
        get_local 0)
      (func (;16;) (type 0)
        i32.const 0
        call_indirect (type 0)
        i64.const 0
        i32.const 0
        call_indirect (type 17)
        i64.const 0
        f64.const 0x0p+0 (;=0;)
        i32.const 0
        i64.const 0
        i32.const 0
        call_indirect (type 18)
        i32.const 0
        call_indirect (type 0)
        i32.const 0
        call_indirect (type 1)
        i32.eqz
        drop
        i32.const 0
        call_indirect (type 1)
        i32.eqz
        drop
        i64.const 0
        i32.const 0
        call_indirect (type 19)
        i32.eqz
        drop
        i64.const 0
        f64.const 0x0p+0 (;=0;)
        i32.const 0
        i64.const 0
        i32.const 0
        call_indirect (type 20)
        i32.eqz
        drop
        i64.const 0
        i32.const 0
        call_indirect (type 6)
        i64.eqz
        drop)
      (func (;17;) (type 1) (result i32)
        i32.const 0
        call_indirect (type 1))
      (func (;18;) (type 2) (result i64)
        i32.const 1
        call_indirect (type 2))
      (func (;19;) (type 3) (result f32)
        i32.const 2
        call_indirect (type 3))
      (func (;20;) (type 4) (result f64)
        i32.const 3
        call_indirect (type 4))
      (func (;21;) (type 2) (result i64)
        i64.const 100
        i32.const 5
        call_indirect (type 6))
      (func (;22;) (type 1) (result i32)
        i32.const 32
        i32.const 4
        call_indirect (type 5))
      (func (;23;) (type 2) (result i64)
        i64.const 64
        i32.const 5
        call_indirect (type 6))
      (func (;24;) (type 3) (result f32)
        f32.const 0x1.51eb86p+0 (;=1.32;)
        i32.const 6
        call_indirect (type 7))
      (func (;25;) (type 4) (result f64)
        f64.const 0x1.a3d70a3d70a3dp+0 (;=1.64;)
        i32.const 7
        call_indirect (type 8))
      (func (;26;) (type 1) (result i32)
        f32.const 0x1.00ccccp+5 (;=32.1;)
        i32.const 32
        i32.const 8
        call_indirect (type 9))
      (func (;27;) (type 2) (result i64)
        i32.const 32
        i64.const 64
        i32.const 9
        call_indirect (type 10))
      (func (;28;) (type 3) (result f32)
        f64.const 0x1p+6 (;=64;)
        f32.const 0x1p+5 (;=32;)
        i32.const 10
        call_indirect (type 11))
      (func (;29;) (type 4) (result f64)
        i64.const 64
        f64.const 0x1.0066666666666p+6 (;=64.1;)
        i32.const 11
        call_indirect (type 12))
      (func (;30;) (type 10) (param i32 i64) (result i64)
        get_local 1
        get_local 0
        call_indirect (type 6))
      (func (;31;) (type 21) (param i32) (result i64)
        i64.const 9
        get_local 0
        call_indirect (type 14))
      (func (;32;) (type 5) (param i32) (result i32)
        i32.const 9
        get_local 0
        call_indirect (type 13))
      (func (;33;) (type 22) (param i32) (result f32)
        f32.const 0x1.2p+3 (;=9;)
        get_local 0
        call_indirect (type 15))
      (func (;34;) (type 23) (param i32) (result f64)
        f64.const 0x1.2p+3 (;=9;)
        get_local 0
        call_indirect (type 16))
      (func (;35;) (type 6) (param i64) (result i64)
        get_local 0
        i64.eqz
        if (result i64)  ;; label = @1
          i64.const 1
        else
          get_local 0
          get_local 0
          i64.const 1
          i64.sub
          i32.const 12
          call_indirect (type 6)
          i64.mul
        end)
      (func (;36;) (type 6) (param i64) (result i64)
        get_local 0
        i64.const 1
        i64.le_u
        if (result i64)  ;; label = @1
          i64.const 1
        else
          get_local 0
          i64.const 2
          i64.sub
          i32.const 13
          call_indirect (type 6)
          get_local 0
          i64.const 1
          i64.sub
          i32.const 13
          call_indirect (type 6)
          i64.add
        end)
      (func (;37;) (type 5) (param i32) (result i32)
        get_local 0
        i32.eqz
        if (result i32)  ;; label = @1
          i32.const 1
        else
          get_local 0
          get_local 0
          i32.const 1
          i32.sub
          i32.const 23
          call_indirect (type 5)
          i32.mul
        end)
      (func (;38;) (type 7) (param f32) (result f32)
        get_local 0
        f32.const 0x0p+0 (;=0;)
        f32.eq
        if (result f32)  ;; label = @1
          f32.const 0x1p+0 (;=1;)
        else
          get_local 0
          get_local 0
          f32.const 0x1p+0 (;=1;)
          f32.sub
          i32.const 24
          call_indirect (type 7)
          f32.mul
        end)
      (func (;39;) (type 8) (param f64) (result f64)
        get_local 0
        f64.const 0x0p+0 (;=0;)
        f64.eq
        if (result f64)  ;; label = @1
          f64.const 0x1p+0 (;=1;)
        else
          get_local 0
          get_local 0
          f64.const 0x1p+0 (;=1;)
          f64.sub
          i32.const 25
          call_indirect (type 8)
          f64.mul
        end)
      (func (;40;) (type 5) (param i32) (result i32)
        get_local 0
        i32.const 1
        i32.le_u
        if (result i32)  ;; label = @1
          i32.const 1
        else
          get_local 0
          i32.const 2
          i32.sub
          i32.const 26
          call_indirect (type 5)
          get_local 0
          i32.const 1
          i32.sub
          i32.const 26
          call_indirect (type 5)
          i32.add
        end)
      (func (;41;) (type 7) (param f32) (result f32)
        get_local 0
        f32.const 0x1p+0 (;=1;)
        f32.le
        if (result f32)  ;; label = @1
          f32.const 0x1p+0 (;=1;)
        else
          get_local 0
          f32.const 0x1p+1 (;=2;)
          f32.sub
          i32.const 27
          call_indirect (type 7)
          get_local 0
          f32.const 0x1p+0 (;=1;)
          f32.sub
          i32.const 27
          call_indirect (type 7)
          f32.add
        end)
      (func (;42;) (type 8) (param f64) (result f64)
        get_local 0
        f64.const 0x1p+0 (;=1;)
        f64.le
        if (result f64)  ;; label = @1
          f64.const 0x1p+0 (;=1;)
        else
          get_local 0
          f64.const 0x1p+1 (;=2;)
          f64.sub
          i32.const 28
          call_indirect (type 8)
          get_local 0
          f64.const 0x1p+0 (;=1;)
          f64.sub
          i32.const 28
          call_indirect (type 8)
          f64.add
        end)
      (func (;43;) (type 5) (param i32) (result i32)
        get_local 0
        i32.eqz
        if (result i32)  ;; label = @1
          i32.const 44
        else
          get_local 0
          i32.const 1
          i32.sub
          i32.const 15
          call_indirect (type 5)
        end)
      (func (;44;) (type 5) (param i32) (result i32)
        get_local 0
        i32.eqz
        if (result i32)  ;; label = @1
          i32.const 99
        else
          get_local 0
          i32.const 1
          i32.sub
          i32.const 14
          call_indirect (type 5)
        end)
      (func (;45;) (type 0)
        i32.const 16
        call_indirect (type 0))
      (func (;46;) (type 0)
        i32.const 18
        call_indirect (type 0))
      (func (;47;) (type 0)
        i32.const 17
        call_indirect (type 0))
      (func (;48;) (type 1) (result i32)
        i32.const 0
        call_indirect (type 1)
        i32.const 2
        i32.const 3
        select)
      (func (;49;) (type 1) (result i32)
        i32.const 2
        i32.const 0
        call_indirect (type 1)
        i32.const 3
        select)
      (func (;50;) (type 1) (result i32)
        i32.const 2
        i32.const 3
        i32.const 0
        call_indirect (type 1)
        select)
      (func (;51;) (type 1) (result i32)
        i32.const 0
        call_indirect (type 1)
        if (result i32)  ;; label = @1
          i32.const 1
        else
          i32.const 2
        end)
      (func (;52;) (type 2) (result i64)
        block (result i64)  ;; label = @1
          i32.const 1
          call_indirect (type 2)
          i32.const 2
          br_if 0 (;@1;)
        end)
      (func (;53;) (type 1) (result i32)
        block (result i32)  ;; label = @1
          i32.const 2
          i32.const 0
          call_indirect (type 1)
          br_if 0 (;@1;)
        end)
      (func (;54;) (type 3) (result f32)
        block (result f32)  ;; label = @1
          i32.const 2
          call_indirect (type 3)
          i32.const 2
          br_table 0 (;@1;) 0 (;@1;)
        end)
      (func (;55;) (type 1) (result i32)
        block (result i32)  ;; label = @1
          i32.const 2
          i32.const 0
          call_indirect (type 1)
          br_table 0 (;@1;) 0 (;@1;)
        end)
      (func (;56;) (type 0)
        i32.const 0
        call_indirect (type 1)
        i32.const 1
        i32.store)
      (func (;57;) (type 0)
        i32.const 10
        i32.const 3
        call_indirect (type 4)
        f64.store)
      (func (;58;) (type 1) (result i32)
        i32.const 0
        call_indirect (type 1)
        memory.grow)
      (func (;59;) (type 1) (result i32)
        i32.const 1
        i32.const 4
        call_indirect (type 5)
        return)
      (func (;60;) (type 0)
        i64.const 1
        i32.const 5
        call_indirect (type 6)
        drop)
      (func (;61;) (type 3) (result f32)
        block (result f32)  ;; label = @1
          f32.const 0x1p+0 (;=1;)
          i32.const 6
          call_indirect (type 7)
          br 0 (;@1;)
        end)
      (func (;62;) (type 4) (result f64)
        (local f64)
        f64.const 0x1p+0 (;=1;)
        i32.const 7
        call_indirect (type 8)
        set_local 0
        get_local 0)
      (func (;63;) (type 1) (result i32)
        i32.const 0
        call_indirect (type 1)
        i32.load)
      (table (;0;) 29 29 anyfunc)
      (memory (;0;) 1)
      (export \"type-i32\" (func 17))
      (export \"type-i64\" (func 18))
      (export \"type-f32\" (func 19))
      (export \"type-f64\" (func 20))
      (export \"type-index\" (func 21))
      (export \"type-first-i32\" (func 22))
      (export \"type-first-i64\" (func 23))
      (export \"type-first-f32\" (func 24))
      (export \"type-first-f64\" (func 25))
      (export \"type-second-i32\" (func 26))
      (export \"type-second-i64\" (func 27))
      (export \"type-second-f32\" (func 28))
      (export \"type-second-f64\" (func 29))
      (export \"dispatch\" (func 30))
      (export \"dispatch-structural-i64\" (func 31))
      (export \"dispatch-structural-i32\" (func 32))
      (export \"dispatch-structural-f32\" (func 33))
      (export \"dispatch-structural-f64\" (func 34))
      (export \"fac-i64\" (func 35))
      (export \"fib-i64\" (func 36))
      (export \"fac-i32\" (func 37))
      (export \"fac-f32\" (func 38))
      (export \"fac-f64\" (func 39))
      (export \"fib-i32\" (func 40))
      (export \"fib-f32\" (func 41))
      (export \"fib-f64\" (func 42))
      (export \"even\" (func 43))
      (export \"odd\" (func 44))
      (export \"runaway\" (func 45))
      (export \"mutual-runaway\" (func 46))
      (export \"as-select-first\" (func 48))
      (export \"as-select-mid\" (func 49))
      (export \"as-select-last\" (func 50))
      (export \"as-if-condition\" (func 51))
      (export \"as-br_if-first\" (func 52))
      (export \"as-br_if-last\" (func 53))
      (export \"as-br_table-first\" (func 54))
      (export \"as-br_table-last\" (func 55))
      (export \"as-store-first\" (func 56))
      (export \"as-store-last\" (func 57))
      (export \"as-memory.grow-value\" (func 58))
      (export \"as-return-value\" (func 59))
      (export \"as-drop-operand\" (func 60))
      (export \"as-br-value\" (func 61))
      (export \"as-set_local-value\" (func 62))
      (export \"as-load-operand\" (func 63))
      (elem (i32.const 0) 0 1 2 3 4 5 6 7 10 8 11 9 35 36 43 44 45 46 47 12 13 14 15 37 38 39 40 41 42))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 379
fn l379_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("type-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 306 as i32);
}

// Line 380
fn l380_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("type-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 356 as i64);
}

// Line 381
fn l381_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("type-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 3890.0 as f32);
}

// Line 382
fn l382_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("type-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 3940.0 as f64);
}

// Line 384
fn l384_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("type-index") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 100 as i64);
}

// Line 386
fn l386_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("type-first-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 32 as i32);
}

// Line 387
fn l387_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("type-first-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 64 as i64);
}

// Line 388
fn l388_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("type-first-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 1.32 as f32);
}

// Line 389
fn l389_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("type-first-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 1.64 as f64);
}

// Line 391
fn l391_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("type-second-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 32 as i32);
}

// Line 392
fn l392_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("type-second-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 64 as i64);
}

// Line 393
fn l393_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("type-second-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 32.0 as f32);
}

// Line 394
fn l394_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("type-second-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 64.1 as f64);
}

// Line 396
fn l396_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(5 as i32, 2 as i64, &vm_context);
    assert_eq!(result, 2 as i64);
}

// Line 397
fn l397_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(5 as i32, 5 as i64, &vm_context);
    assert_eq!(result, 5 as i64);
}

// Line 398
fn l398_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(12 as i32, 5 as i64, &vm_context);
    assert_eq!(result, 120 as i64);
}

// Line 399
fn l399_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(13 as i32, 5 as i64, &vm_context);
    assert_eq!(result, 8 as i64);
}

// Line 400
fn l400_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(20 as i32, 2 as i64, &vm_context);
    assert_eq!(result, 2 as i64);
}

// Line 401

// Line 402

// Line 403

// Line 404

// Line 405

// Line 407
fn l407_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch-structural-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(5 as i32, &vm_context);
    assert_eq!(result, 9 as i64);
}

// Line 408
fn l408_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch-structural-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(12 as i32, &vm_context);
    assert_eq!(result, 362880 as i64);
}

// Line 409
fn l409_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch-structural-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(13 as i32, &vm_context);
    assert_eq!(result, 55 as i64);
}

// Line 410
fn l410_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch-structural-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(20 as i32, &vm_context);
    assert_eq!(result, 9 as i64);
}

// Line 411

// Line 412

// Line 414
fn l414_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch-structural-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(4 as i32, &vm_context);
    assert_eq!(result, 9 as i32);
}

// Line 415
fn l415_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch-structural-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(23 as i32, &vm_context);
    assert_eq!(result, 362880 as i32);
}

// Line 416
fn l416_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch-structural-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(26 as i32, &vm_context);
    assert_eq!(result, 55 as i32);
}

// Line 417
fn l417_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch-structural-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(19 as i32, &vm_context);
    assert_eq!(result, 9 as i32);
}

// Line 418

// Line 419

// Line 421
fn l421_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch-structural-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6 as i32, &vm_context);
    assert_eq!(result, 9.0 as f32);
}

// Line 422
fn l422_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch-structural-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(24 as i32, &vm_context);
    assert_eq!(result, 362880.0 as f32);
}

// Line 423
fn l423_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch-structural-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(27 as i32, &vm_context);
    assert_eq!(result, 55.0 as f32);
}

// Line 424
fn l424_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch-structural-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(21 as i32, &vm_context);
    assert_eq!(result, 9.0 as f32);
}

// Line 425

// Line 426

// Line 428
fn l428_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch-structural-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(7 as i32, &vm_context);
    assert_eq!(result, 9.0 as f64);
}

// Line 429
fn l429_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch-structural-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(25 as i32, &vm_context);
    assert_eq!(result, 362880.0 as f64);
}

// Line 430
fn l430_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch-structural-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(28 as i32, &vm_context);
    assert_eq!(result, 55.0 as f64);
}

// Line 431
fn l431_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("dispatch-structural-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(22 as i32, &vm_context);
    assert_eq!(result, 9.0 as f64);
}

// Line 432

// Line 433

// Line 435
fn l435_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fac-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 436
fn l436_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fac-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 437
fn l437_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fac-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(5 as i64, &vm_context);
    assert_eq!(result, 120 as i64);
}

// Line 438
fn l438_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fac-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(25 as i64, &vm_context);
    assert_eq!(result, 7034535277573963776 as i64);
}

// Line 440
fn l440_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fac-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 441
fn l441_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fac-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 442
fn l442_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fac-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(5 as i32, &vm_context);
    assert_eq!(result, 120 as i32);
}

// Line 443
fn l443_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fac-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(10 as i32, &vm_context);
    assert_eq!(result, 3628800 as i32);
}

// Line 445
fn l445_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fac-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 446
fn l446_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fac-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 447
fn l447_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fac-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(5.0 as f32, &vm_context);
    assert_eq!(result, 120.0 as f32);
}

// Line 448
fn l448_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fac-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(10.0 as f32, &vm_context);
    assert_eq!(result, 3628800.0 as f32);
}

// Line 450
fn l450_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fac-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 451
fn l451_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fac-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 452
fn l452_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fac-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(5.0 as f64, &vm_context);
    assert_eq!(result, 120.0 as f64);
}

// Line 453
fn l453_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fac-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(10.0 as f64, &vm_context);
    assert_eq!(result, 3628800.0 as f64);
}

// Line 455
fn l455_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 456
fn l456_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 457
fn l457_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(2 as i64, &vm_context);
    assert_eq!(result, 2 as i64);
}

// Line 458
fn l458_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(5 as i64, &vm_context);
    assert_eq!(result, 8 as i64);
}

// Line 459
fn l459_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(20 as i64, &vm_context);
    assert_eq!(result, 10946 as i64);
}

// Line 461
fn l461_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 462
fn l462_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 463
fn l463_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(2 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 464
fn l464_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(5 as i32, &vm_context);
    assert_eq!(result, 8 as i32);
}

// Line 465
fn l465_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(20 as i32, &vm_context);
    assert_eq!(result, 10946 as i32);
}

// Line 467
fn l467_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f32, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 468
fn l468_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f32, &vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 469
fn l469_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(2.0 as f32, &vm_context);
    assert_eq!(result, 2.0 as f32);
}

// Line 470
fn l470_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(5.0 as f32, &vm_context);
    assert_eq!(result, 8.0 as f32);
}

// Line 471
fn l471_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(20.0 as f32, &vm_context);
    assert_eq!(result, 10946.0 as f32);
}

// Line 473
fn l473_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 474
fn l474_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 475
fn l475_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(2.0 as f64, &vm_context);
    assert_eq!(result, 2.0 as f64);
}

// Line 476
fn l476_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(5.0 as f64, &vm_context);
    assert_eq!(result, 8.0 as f64);
}

// Line 477
fn l477_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("fib-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(20.0 as f64, &vm_context);
    assert_eq!(result, 10946.0 as f64);
}

// Line 479
fn l479_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("even") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 44 as i32);
}

// Line 480
fn l480_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("even") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 99 as i32);
}

// Line 481
fn l481_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("even") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(100 as i32, &vm_context);
    assert_eq!(result, 44 as i32);
}

// Line 482
fn l482_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("even") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(77 as i32, &vm_context);
    assert_eq!(result, 99 as i32);
}

// Line 483
fn l483_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("odd") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 99 as i32);
}

// Line 484
fn l484_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("odd") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 44 as i32);
}

// Line 485
fn l485_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("odd") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(200 as i32, &vm_context);
    assert_eq!(result, 99 as i32);
}

// Line 486
fn l486_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("odd") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(77 as i32, &vm_context);
    assert_eq!(result, 44 as i32);
}

// Line 488

// Line 489

// Line 491
fn l491_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("as-select-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 306 as i32);
}

// Line 492
fn l492_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("as-select-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 493
fn l493_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("as-select-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 495
fn l495_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("as-if-condition") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 497
fn l497_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("as-br_if-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 356 as i64);
}

// Line 498
fn l498_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("as-br_if-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 500
fn l500_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("as-br_table-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 3890.0 as f32);
}

// Line 501
fn l501_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("as-br_table-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 507
fn l507_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("as-return-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 508
fn l508_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("as-drop-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, ());
}

// Line 509
fn l509_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("as-br-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 1.0 as f32);
}

// Line 510
fn l510_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("as-set_local-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 516
#[test]
fn l516_assert_malformed() {
    let wasm_binary = [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 32, 32, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 32, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 528
#[test]
fn l528_assert_malformed() {
    let wasm_binary = [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 32, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 32, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 540
#[test]
fn l540_assert_malformed() {
    let wasm_binary = [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 32, 32, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 32, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 552
#[test]
fn l552_assert_malformed() {
    let wasm_binary = [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 32, 32, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 32, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 564
#[test]
fn l564_assert_malformed() {
    let wasm_binary = [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 32, 32, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 32, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 576
#[test]
fn l576_assert_malformed() {
    let wasm_binary = [40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 586
#[test]
fn l586_assert_malformed() {
    let wasm_binary = [40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 112, 97, 114, 97, 109, 32, 36, 120, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 593
#[test]
fn l593_assert_malformed() {
    let wasm_binary = [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 603
#[test]
fn l603_assert_malformed() {
    let wasm_binary = [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 613
#[test]
fn l613_assert_malformed() {
    let wasm_binary = [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 623
#[test]
fn l623_assert_malformed() {
    let wasm_binary = [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 32, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 32, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 638
#[test]
fn l638_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 646
#[test]
fn l646_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 10, 10, 1, 8, 0, 65, 0, 17, 0, 0, 69, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 654
#[test]
fn l654_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 8, 2, 96, 0, 1, 126, 96, 0, 0, 3, 2, 1, 1, 4, 4, 1, 112, 0, 0, 10, 10, 1, 8, 0, 65, 0, 17, 0, 0, 69, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 663
#[test]
fn l663_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 8, 2, 96, 1, 127, 0, 96, 0, 0, 3, 2, 1, 1, 4, 4, 1, 112, 0, 0, 10, 9, 1, 7, 0, 65, 0, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 671
#[test]
fn l671_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 9, 2, 96, 2, 124, 127, 0, 96, 0, 0, 3, 2, 1, 1, 4, 4, 1, 112, 0, 0, 10, 9, 1, 7, 0, 65, 0, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 679
#[test]
fn l679_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 10, 11, 1, 9, 0, 65, 1, 65, 0, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 687
#[test]
fn l687_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 10, 20, 1, 18, 0, 68, 0, 0, 0, 0, 0, 0, 0, 64, 65, 1, 65, 0, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 698
#[test]
fn l698_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 8, 2, 96, 1, 127, 0, 96, 0, 0, 3, 2, 1, 1, 4, 4, 1, 112, 0, 0, 10, 10, 1, 8, 0, 65, 1, 1, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 706
#[test]
fn l706_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 8, 2, 96, 1, 127, 0, 96, 0, 0, 3, 2, 1, 1, 4, 4, 1, 112, 0, 0, 10, 11, 1, 9, 0, 65, 0, 66, 1, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 715
#[test]
fn l715_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 9, 2, 96, 2, 127, 127, 0, 96, 0, 0, 3, 2, 1, 1, 4, 4, 1, 112, 0, 0, 10, 12, 1, 10, 0, 1, 65, 1, 65, 0, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 725
#[test]
fn l725_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 9, 2, 96, 2, 127, 127, 0, 96, 0, 0, 3, 2, 1, 1, 4, 4, 1, 112, 0, 0, 10, 12, 1, 10, 0, 65, 1, 1, 65, 0, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 735
#[test]
fn l735_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 9, 2, 96, 2, 127, 124, 0, 96, 0, 0, 3, 2, 1, 1, 4, 4, 1, 112, 0, 0, 10, 20, 1, 18, 0, 68, 0, 0, 0, 0, 0, 0, 240, 63, 65, 1, 65, 0, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 745
#[test]
fn l745_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 9, 2, 96, 2, 124, 127, 0, 96, 0, 0, 3, 2, 1, 1, 4, 4, 1, 112, 0, 0, 10, 20, 1, 18, 0, 65, 1, 68, 0, 0, 0, 0, 0, 0, 240, 63, 65, 0, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 759
#[test]
fn l759_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 10, 9, 1, 7, 0, 65, 0, 17, 1, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 766
#[test]
fn l766_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 10, 13, 1, 11, 0, 65, 0, 17, 148, 152, 219, 226, 3, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 777
#[test]
fn l777_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 4, 5, 1, 112, 1, 2, 2, 9, 8, 1, 0, 65, 0, 11, 2, 0, 0];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

#[test]
fn test_module_1() {
    let result_object = create_module_1();
    // We group the calls together
    l379_assert_return_invoke(&result_object);
    l380_assert_return_invoke(&result_object);
    l381_assert_return_invoke(&result_object);
    l382_assert_return_invoke(&result_object);
    l384_assert_return_invoke(&result_object);
    l386_assert_return_invoke(&result_object);
    l387_assert_return_invoke(&result_object);
    l388_assert_return_invoke(&result_object);
    l389_assert_return_invoke(&result_object);
    l391_assert_return_invoke(&result_object);
    l392_assert_return_invoke(&result_object);
    l393_assert_return_invoke(&result_object);
    l394_assert_return_invoke(&result_object);
    l396_assert_return_invoke(&result_object);
    l397_assert_return_invoke(&result_object);
    l398_assert_return_invoke(&result_object);
    l399_assert_return_invoke(&result_object);
    l400_assert_return_invoke(&result_object);
    l407_assert_return_invoke(&result_object);
    l408_assert_return_invoke(&result_object);
    l409_assert_return_invoke(&result_object);
    l410_assert_return_invoke(&result_object);
    l414_assert_return_invoke(&result_object);
    l415_assert_return_invoke(&result_object);
    l416_assert_return_invoke(&result_object);
    l417_assert_return_invoke(&result_object);
    l421_assert_return_invoke(&result_object);
    l422_assert_return_invoke(&result_object);
    l423_assert_return_invoke(&result_object);
    l424_assert_return_invoke(&result_object);
    l428_assert_return_invoke(&result_object);
    l429_assert_return_invoke(&result_object);
    l430_assert_return_invoke(&result_object);
    l431_assert_return_invoke(&result_object);
    l435_assert_return_invoke(&result_object);
    l436_assert_return_invoke(&result_object);
    l437_assert_return_invoke(&result_object);
    l438_assert_return_invoke(&result_object);
    l440_assert_return_invoke(&result_object);
    l441_assert_return_invoke(&result_object);
    l442_assert_return_invoke(&result_object);
    l443_assert_return_invoke(&result_object);
    l445_assert_return_invoke(&result_object);
    l446_assert_return_invoke(&result_object);
    l447_assert_return_invoke(&result_object);
    l448_assert_return_invoke(&result_object);
    l450_assert_return_invoke(&result_object);
    l451_assert_return_invoke(&result_object);
    l452_assert_return_invoke(&result_object);
    l453_assert_return_invoke(&result_object);
    l455_assert_return_invoke(&result_object);
    l456_assert_return_invoke(&result_object);
    l457_assert_return_invoke(&result_object);
    l458_assert_return_invoke(&result_object);
    l459_assert_return_invoke(&result_object);
    l461_assert_return_invoke(&result_object);
    l462_assert_return_invoke(&result_object);
    l463_assert_return_invoke(&result_object);
    l464_assert_return_invoke(&result_object);
    l465_assert_return_invoke(&result_object);
    l467_assert_return_invoke(&result_object);
    l468_assert_return_invoke(&result_object);
    l469_assert_return_invoke(&result_object);
    l470_assert_return_invoke(&result_object);
    l471_assert_return_invoke(&result_object);
    l473_assert_return_invoke(&result_object);
    l474_assert_return_invoke(&result_object);
    l475_assert_return_invoke(&result_object);
    l476_assert_return_invoke(&result_object);
    l477_assert_return_invoke(&result_object);
    l479_assert_return_invoke(&result_object);
    l480_assert_return_invoke(&result_object);
    l481_assert_return_invoke(&result_object);
    l482_assert_return_invoke(&result_object);
    l483_assert_return_invoke(&result_object);
    l484_assert_return_invoke(&result_object);
    l485_assert_return_invoke(&result_object);
    l486_assert_return_invoke(&result_object);
    l491_assert_return_invoke(&result_object);
    l492_assert_return_invoke(&result_object);
    l493_assert_return_invoke(&result_object);
    l495_assert_return_invoke(&result_object);
    l497_assert_return_invoke(&result_object);
    l498_assert_return_invoke(&result_object);
    l500_assert_return_invoke(&result_object);
    l501_assert_return_invoke(&result_object);
    l507_assert_return_invoke(&result_object);
    l508_assert_return_invoke(&result_object);
    l509_assert_return_invoke(&result_object);
    l510_assert_return_invoke(&result_object);
}
