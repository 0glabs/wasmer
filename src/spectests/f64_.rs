// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/f64_.wast
#![allow(
    warnings,
    dead_code
)]
use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, VmCtx, Export};
use super::_common::spectest_importobject;
use wabt::wat2wasm;


// Line 5
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param f64 f64) (result f64)))
      (type (;1;) (func (param f64) (result f64)))
      (func (;0;) (type 0) (param f64 f64) (result f64)
        get_local 0
        get_local 1
        f64.add)
      (func (;1;) (type 0) (param f64 f64) (result f64)
        get_local 0
        get_local 1
        f64.sub)
      (func (;2;) (type 0) (param f64 f64) (result f64)
        get_local 0
        get_local 1
        f64.mul)
      (func (;3;) (type 0) (param f64 f64) (result f64)
        get_local 0
        get_local 1
        f64.div)
      (func (;4;) (type 1) (param f64) (result f64)
        get_local 0
        f64.sqrt)
      (func (;5;) (type 0) (param f64 f64) (result f64)
        get_local 0
        get_local 1
        f64.min)
      (func (;6;) (type 0) (param f64 f64) (result f64)
        get_local 0
        get_local 1
        f64.max)
      (func (;7;) (type 1) (param f64) (result f64)
        get_local 0
        f64.ceil)
      (func (;8;) (type 1) (param f64) (result f64)
        get_local 0
        f64.floor)
      (func (;9;) (type 1) (param f64) (result f64)
        get_local 0
        f64.trunc)
      (func (;10;) (type 1) (param f64) (result f64)
        get_local 0
        f64.nearest)
      (export \"add\" (func 0))
      (export \"sub\" (func 1))
      (export \"mul\" (func 2))
      (export \"div\" (func 3))
      (export \"sqrt\" (func 4))
      (export \"min\" (func 5))
      (export \"max\" (func 6))
      (export \"ceil\" (func 7))
      (export \"floor\" (func 8))
      (export \"trunc\" (func 9))
      (export \"nearest\" (func 10)))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 19
fn l19_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l19_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 20
fn l20_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l20_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 21
fn l21_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l21_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 22
fn l22_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l22_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 23
fn l23_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l23_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 24
fn l24_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l24_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 25
fn l25_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l25_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 26
fn l26_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l26_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 27
fn l27_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l27_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 28
fn l28_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l28_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 29
fn l29_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l29_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 30
fn l30_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l30_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 31
fn l31_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l31_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 32
fn l32_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l32_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 33
fn l33_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l33_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 34
fn l34_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l34_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 35
fn l35_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l35_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 36
fn l36_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l36_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 37
fn l37_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l37_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 38
fn l38_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l38_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 39
fn l39_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l39_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 40
fn l40_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l40_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 41
fn l41_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l41_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 42
fn l42_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l42_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 43
fn l43_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l43_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 44
fn l44_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l44_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 45
fn l45_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l45_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 46
fn l46_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l46_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 47
fn l47_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l47_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 48
fn l48_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l48_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 49
fn l49_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l49_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 50
fn l50_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l50_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 51

// Line 52

// Line 53

// Line 54

// Line 55

// Line 56

// Line 57

// Line 58

// Line 59
fn l59_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l59_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 60
fn l60_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l60_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 61
fn l61_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l61_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 62
fn l62_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l62_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 63
fn l63_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l63_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 as f64);
}

// Line 64
fn l64_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l64_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 65
fn l65_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l65_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 66
fn l66_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l66_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 as f64);
}

// Line 67
fn l67_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l67_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507202 as f64);
}

// Line 68
fn l68_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l68_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201 as f64);
}

// Line 69
fn l69_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l69_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201 as f64);
}

// Line 70
fn l70_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l70_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507202 as f64);
}

// Line 71
fn l71_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l71_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 72
fn l72_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l72_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 73
fn l73_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l73_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 74
fn l74_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l74_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 75
fn l75_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l75_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 76
fn l76_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l76_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 77
fn l77_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l77_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 78
fn l78_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l78_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 79
fn l79_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l79_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 80
fn l80_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l80_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 81
fn l81_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l81_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 82
fn l82_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l82_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 83
fn l83_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l83_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 84
fn l84_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l84_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 85
fn l85_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l85_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 86
fn l86_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l86_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 87
fn l87_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l87_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 88
fn l88_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l88_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 89
fn l89_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l89_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 90
fn l90_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l90_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 91

// Line 92

// Line 93

// Line 94

// Line 95

// Line 96

// Line 97

// Line 98

// Line 99
fn l99_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l99_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 100
fn l100_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l100_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 101
fn l101_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l101_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 102
fn l102_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l102_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 103
fn l103_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l103_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507202 as f64);
}

// Line 104
fn l104_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l104_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201 as f64);
}

// Line 105
fn l105_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l105_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201 as f64);
}

// Line 106
fn l106_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l106_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507202 as f64);
}

// Line 107
fn l107_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l107_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403 as f64);
}

// Line 108
fn l108_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l108_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 109
fn l109_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l109_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 110
fn l110_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l110_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403 as f64);
}

// Line 111
fn l111_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l111_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 112
fn l112_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l112_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 113
fn l113_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l113_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 114
fn l114_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l114_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 115
fn l115_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l115_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 116
fn l116_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l116_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 117
fn l117_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l117_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 118
fn l118_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l118_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 119
fn l119_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l119_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 120
fn l120_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l120_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 121
fn l121_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l121_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 122
fn l122_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l122_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 123
fn l123_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l123_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 124
fn l124_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l124_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 125
fn l125_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l125_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 126
fn l126_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l126_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 127
fn l127_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l127_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 128
fn l128_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l128_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 129
fn l129_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l129_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 130
fn l130_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l130_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 131

// Line 132

// Line 133

// Line 134

// Line 135

// Line 136

// Line 137

// Line 138

// Line 139
fn l139_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l139_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 140
fn l140_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l140_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 141
fn l141_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l141_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 142
fn l142_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l142_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 143
fn l143_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l143_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 144
fn l144_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l144_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 145
fn l145_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l145_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 146
fn l146_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l146_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 147
fn l147_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l147_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 148
fn l148_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l148_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 149
fn l149_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l149_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 150
fn l150_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l150_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 151
fn l151_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l151_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 152
fn l152_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l152_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 153
fn l153_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l153_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 154
fn l154_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l154_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 155
fn l155_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l155_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.5 as f64);
}

// Line 156
fn l156_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l156_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 157
fn l157_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l157_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 158
fn l158_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l158_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.5 as f64);
}

// Line 159
fn l159_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l159_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.783185307179586 as f64);
}

// Line 160
fn l160_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l160_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 5.783185307179586 as f64);
}

// Line 161
fn l161_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l161_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -5.783185307179586 as f64);
}

// Line 162
fn l162_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l162_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.783185307179586 as f64);
}

// Line 163
fn l163_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l163_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 164
fn l164_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l164_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 165
fn l165_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l165_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 166
fn l166_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l166_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 167
fn l167_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l167_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 168
fn l168_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l168_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 169
fn l169_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l169_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 170
fn l170_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l170_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 171

// Line 172

// Line 173

// Line 174

// Line 175

// Line 176

// Line 177

// Line 178

// Line 179
fn l179_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l179_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 180
fn l180_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l180_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 181
fn l181_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l181_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 182
fn l182_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l182_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 183
fn l183_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l183_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 184
fn l184_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l184_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 185
fn l185_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l185_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 186
fn l186_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l186_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 187
fn l187_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l187_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 188
fn l188_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l188_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 189
fn l189_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l189_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 190
fn l190_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l190_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 191
fn l191_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l191_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -1.5 as f64);
}

// Line 192
fn l192_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l192_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 193
fn l193_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l193_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 194
fn l194_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l194_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1.5 as f64);
}

// Line 195
fn l195_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l195_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -2.0 as f64);
}

// Line 196
fn l196_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l196_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 197
fn l197_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l197_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 198
fn l198_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l198_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 2.0 as f64);
}

// Line 199
fn l199_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l199_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -7.283185307179586 as f64);
}

// Line 200
fn l200_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l200_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 5.283185307179586 as f64);
}

// Line 201
fn l201_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l201_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -5.283185307179586 as f64);
}

// Line 202
fn l202_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l202_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 7.283185307179586 as f64);
}

// Line 203
fn l203_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l203_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 204
fn l204_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l204_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 205
fn l205_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l205_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 206
fn l206_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l206_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 207
fn l207_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l207_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 208
fn l208_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l208_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 209
fn l209_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l209_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 210
fn l210_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l210_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 211

// Line 212

// Line 213

// Line 214

// Line 215

// Line 216

// Line 217

// Line 218

// Line 219
fn l219_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l219_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 220
fn l220_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l220_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 221
fn l221_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l221_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 222
fn l222_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l222_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 223
fn l223_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l223_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 224
fn l224_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l224_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 225
fn l225_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l225_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 226
fn l226_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l226_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 227
fn l227_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l227_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 228
fn l228_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l228_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 229
fn l229_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l229_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 230
fn l230_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l230_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 231
fn l231_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l231_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -6.783185307179586 as f64);
}

// Line 232
fn l232_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l232_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -5.783185307179586 as f64);
}

// Line 233
fn l233_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l233_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 5.783185307179586 as f64);
}

// Line 234
fn l234_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l234_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 6.783185307179586 as f64);
}

// Line 235
fn l235_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l235_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -7.283185307179586 as f64);
}

// Line 236
fn l236_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l236_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -5.283185307179586 as f64);
}

// Line 237
fn l237_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l237_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 5.283185307179586 as f64);
}

// Line 238
fn l238_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l238_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 7.283185307179586 as f64);
}

// Line 239
fn l239_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l239_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -12.566370614359172 as f64);
}

// Line 240
fn l240_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l240_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 241
fn l241_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l241_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 242
fn l242_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l242_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 12.566370614359172 as f64);
}

// Line 243
fn l243_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l243_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 244
fn l244_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l244_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 245
fn l245_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l245_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 246
fn l246_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l246_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 247
fn l247_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l247_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 248
fn l248_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l248_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 249
fn l249_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l249_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 250
fn l250_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l250_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 251

// Line 252

// Line 253

// Line 254

// Line 255

// Line 256

// Line 257

// Line 258

// Line 259
fn l259_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l259_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 260
fn l260_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l260_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 261
fn l261_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l261_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 262
fn l262_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l262_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 263
fn l263_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l263_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 264
fn l264_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l264_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 265
fn l265_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l265_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 266
fn l266_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l266_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 267
fn l267_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l267_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 268
fn l268_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l268_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 269
fn l269_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l269_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 270
fn l270_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l270_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 271
fn l271_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l271_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 272
fn l272_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l272_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 273
fn l273_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l273_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 274
fn l274_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l274_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 275
fn l275_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l275_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 276
fn l276_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l276_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 277
fn l277_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l277_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 278
fn l278_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l278_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 279
fn l279_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l279_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 280
fn l280_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l280_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 281
fn l281_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l281_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 282
fn l282_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l282_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 283
fn l283_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l283_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 284
fn l284_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l284_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 285
fn l285_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l285_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 286
fn l286_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l286_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 287
fn l287_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l287_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 288
fn l288_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l288_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 289
fn l289_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l289_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 290
fn l290_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l290_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 291

// Line 292

// Line 293

// Line 294

// Line 295

// Line 296

// Line 297

// Line 298

// Line 299
fn l299_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l299_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 300
fn l300_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l300_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 301
fn l301_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l301_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 302
fn l302_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l302_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 303
fn l303_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l303_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 304
fn l304_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l304_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 305
fn l305_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l305_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 306
fn l306_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l306_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 307
fn l307_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l307_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 308
fn l308_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l308_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 309
fn l309_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l309_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 310
fn l310_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l310_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 311
fn l311_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l311_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 312
fn l312_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l312_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 313
fn l313_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l313_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 314
fn l314_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l314_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 315
fn l315_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l315_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 316
fn l316_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l316_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 317
fn l317_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l317_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 318
fn l318_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l318_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 319
fn l319_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l319_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 320
fn l320_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l320_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 321
fn l321_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l321_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 322
fn l322_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l322_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 323
fn l323_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l323_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 324
fn l324_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l324_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 325
fn l325_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l325_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 326
fn l326_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l326_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 327
fn l327_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l327_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 328

// Line 329

// Line 330
fn l330_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l330_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 331

// Line 332

// Line 333

// Line 334

// Line 335

// Line 336

// Line 337

// Line 338

// Line 339

// Line 340

// Line 341

// Line 342

// Line 343

// Line 344

// Line 345

// Line 346

// Line 347

// Line 348

// Line 349

// Line 350

// Line 351

// Line 352

// Line 353

// Line 354

// Line 355

// Line 356

// Line 357

// Line 358

// Line 359

// Line 360

// Line 361

// Line 362

// Line 363

// Line 364

// Line 365

// Line 366

// Line 367

// Line 368

// Line 369

// Line 370

// Line 371

// Line 372

// Line 373

// Line 374

// Line 375

// Line 376

// Line 377

// Line 378

// Line 379

// Line 380

// Line 381

// Line 382

// Line 383

// Line 384

// Line 385

// Line 386

// Line 387

// Line 388

// Line 389

// Line 390

// Line 391

// Line 392

// Line 393

// Line 394

// Line 395

// Line 396

// Line 397

// Line 398

// Line 399

// Line 400

// Line 401

// Line 402

// Line 403

// Line 404

// Line 405

// Line 406

// Line 407

// Line 408

// Line 409

// Line 410

// Line 411

// Line 412

// Line 413

// Line 414

// Line 415

// Line 416

// Line 417

// Line 418

// Line 419
fn l419_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l419_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 420
fn l420_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l420_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 421
fn l421_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l421_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 422
fn l422_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l422_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 423
fn l423_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l423_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 424
fn l424_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l424_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 425
fn l425_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l425_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 426
fn l426_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l426_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 427
fn l427_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l427_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 428
fn l428_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l428_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 429
fn l429_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l429_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 430
fn l430_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l430_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 431
fn l431_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l431_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 432
fn l432_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l432_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 433
fn l433_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l433_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 434
fn l434_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l434_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 435
fn l435_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l435_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 436
fn l436_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l436_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 437
fn l437_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l437_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 438
fn l438_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l438_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 439
fn l439_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l439_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 440
fn l440_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l440_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 441
fn l441_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l441_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 442
fn l442_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l442_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 443
fn l443_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l443_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 444
fn l444_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l444_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 445
fn l445_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l445_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 446
fn l446_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l446_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 447
fn l447_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l447_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 448
fn l448_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l448_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 449
fn l449_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l449_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 450
fn l450_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l450_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 451

// Line 452

// Line 453

// Line 454

// Line 455

// Line 456

// Line 457

// Line 458

// Line 459
fn l459_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l459_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 460
fn l460_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l460_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 461
fn l461_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l461_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 462
fn l462_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l462_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 463
fn l463_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l463_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 464
fn l464_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l464_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 as f64);
}

// Line 465
fn l465_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l465_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 as f64);
}

// Line 466
fn l466_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l466_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 467
fn l467_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l467_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201 as f64);
}

// Line 468
fn l468_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l468_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507202 as f64);
}

// Line 469
fn l469_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l469_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507202 as f64);
}

// Line 470
fn l470_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l470_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201 as f64);
}

// Line 471
fn l471_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l471_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 472
fn l472_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l472_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 473
fn l473_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l473_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 474
fn l474_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l474_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 475
fn l475_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l475_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 476
fn l476_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l476_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 477
fn l477_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l477_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 478
fn l478_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l478_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 479
fn l479_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l479_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 480
fn l480_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l480_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 481
fn l481_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l481_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 482
fn l482_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l482_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 483
fn l483_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l483_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 484
fn l484_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l484_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 485
fn l485_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l485_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 486
fn l486_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l486_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 487
fn l487_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l487_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 488
fn l488_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l488_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 489
fn l489_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l489_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 490
fn l490_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l490_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 491

// Line 492

// Line 493

// Line 494

// Line 495

// Line 496

// Line 497

// Line 498

// Line 499
fn l499_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l499_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 500
fn l500_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l500_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 501
fn l501_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l501_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 502
fn l502_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l502_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 503
fn l503_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l503_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201 as f64);
}

// Line 504
fn l504_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l504_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507202 as f64);
}

// Line 505
fn l505_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l505_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507202 as f64);
}

// Line 506
fn l506_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l506_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201 as f64);
}

// Line 507
fn l507_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l507_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 508
fn l508_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l508_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403 as f64);
}

// Line 509
fn l509_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l509_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403 as f64);
}

// Line 510
fn l510_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l510_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 511
fn l511_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l511_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 512
fn l512_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l512_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 513
fn l513_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l513_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 514
fn l514_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l514_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 515
fn l515_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l515_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 516
fn l516_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l516_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 517
fn l517_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l517_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 518
fn l518_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l518_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 519
fn l519_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l519_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 520
fn l520_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l520_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 521
fn l521_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l521_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 522
fn l522_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l522_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 523
fn l523_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l523_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 524
fn l524_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l524_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 525
fn l525_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l525_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 526
fn l526_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l526_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 527
fn l527_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l527_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 528
fn l528_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l528_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 529
fn l529_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l529_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 530
fn l530_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l530_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 531

// Line 532

// Line 533

// Line 534

// Line 535

// Line 536

// Line 537

// Line 538

// Line 539
fn l539_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l539_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 540
fn l540_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l540_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 541
fn l541_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l541_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 542
fn l542_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l542_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 543
fn l543_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l543_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 544
fn l544_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l544_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 545
fn l545_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l545_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 546
fn l546_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l546_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 547
fn l547_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l547_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 548
fn l548_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l548_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 549
fn l549_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l549_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 550
fn l550_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l550_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 551
fn l551_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l551_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 552
fn l552_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l552_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 553
fn l553_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l553_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 554
fn l554_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l554_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 555
fn l555_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l555_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 556
fn l556_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l556_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -1.5 as f64);
}

// Line 557
fn l557_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l557_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1.5 as f64);
}

// Line 558
fn l558_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l558_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 559
fn l559_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l559_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 5.783185307179586 as f64);
}

// Line 560
fn l560_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l560_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.783185307179586 as f64);
}

// Line 561
fn l561_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l561_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.783185307179586 as f64);
}

// Line 562
fn l562_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l562_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -5.783185307179586 as f64);
}

// Line 563
fn l563_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l563_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 564
fn l564_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l564_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 565
fn l565_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l565_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 566
fn l566_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l566_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 567
fn l567_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l567_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 568
fn l568_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l568_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 569
fn l569_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l569_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 570
fn l570_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l570_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 571

// Line 572

// Line 573

// Line 574

// Line 575

// Line 576

// Line 577

// Line 578

// Line 579
fn l579_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l579_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 580
fn l580_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l580_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 581
fn l581_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l581_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 582
fn l582_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l582_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 583
fn l583_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l583_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 584
fn l584_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l584_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 585
fn l585_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l585_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 586
fn l586_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l586_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 587
fn l587_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l587_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 588
fn l588_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l588_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 589
fn l589_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l589_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 590
fn l590_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l590_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 591
fn l591_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l591_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 592
fn l592_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l592_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -1.5 as f64);
}

// Line 593
fn l593_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l593_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1.5 as f64);
}

// Line 594
fn l594_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l594_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 595
fn l595_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l595_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 596
fn l596_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l596_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -2.0 as f64);
}

// Line 597
fn l597_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l597_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 2.0 as f64);
}

// Line 598
fn l598_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l598_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 599
fn l599_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l599_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 5.283185307179586 as f64);
}

// Line 600
fn l600_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l600_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -7.283185307179586 as f64);
}

// Line 601
fn l601_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l601_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 7.283185307179586 as f64);
}

// Line 602
fn l602_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l602_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -5.283185307179586 as f64);
}

// Line 603
fn l603_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l603_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 604
fn l604_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l604_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 605
fn l605_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l605_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 606
fn l606_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l606_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 607
fn l607_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l607_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 608
fn l608_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l608_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 609
fn l609_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l609_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 610
fn l610_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l610_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 611

// Line 612

// Line 613

// Line 614

// Line 615

// Line 616

// Line 617

// Line 618

// Line 619
fn l619_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l619_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 620
fn l620_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l620_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 621
fn l621_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l621_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 622
fn l622_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l622_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 623
fn l623_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l623_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 624
fn l624_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l624_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 625
fn l625_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l625_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 626
fn l626_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l626_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 627
fn l627_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l627_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 628
fn l628_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l628_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 629
fn l629_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l629_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 630
fn l630_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l630_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 631
fn l631_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l631_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -5.783185307179586 as f64);
}

// Line 632
fn l632_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l632_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -6.783185307179586 as f64);
}

// Line 633
fn l633_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l633_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 6.783185307179586 as f64);
}

// Line 634
fn l634_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l634_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 5.783185307179586 as f64);
}

// Line 635
fn l635_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l635_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -5.283185307179586 as f64);
}

// Line 636
fn l636_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l636_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -7.283185307179586 as f64);
}

// Line 637
fn l637_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l637_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 7.283185307179586 as f64);
}

// Line 638
fn l638_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l638_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 5.283185307179586 as f64);
}

// Line 639
fn l639_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l639_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 640
fn l640_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l640_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -12.566370614359172 as f64);
}

// Line 641
fn l641_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l641_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 12.566370614359172 as f64);
}

// Line 642
fn l642_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l642_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 643
fn l643_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l643_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 644
fn l644_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l644_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 645
fn l645_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l645_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 646
fn l646_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l646_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 647
fn l647_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l647_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 648
fn l648_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l648_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 649
fn l649_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l649_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 650
fn l650_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l650_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 651

// Line 652

// Line 653

// Line 654

// Line 655

// Line 656

// Line 657

// Line 658

// Line 659
fn l659_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l659_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 660
fn l660_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l660_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 661
fn l661_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l661_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 662
fn l662_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l662_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 663
fn l663_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l663_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 664
fn l664_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l664_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 665
fn l665_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l665_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 666
fn l666_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l666_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 667
fn l667_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l667_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 668
fn l668_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l668_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 669
fn l669_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l669_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 670
fn l670_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l670_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 671
fn l671_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l671_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 672
fn l672_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l672_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 673
fn l673_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l673_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 674
fn l674_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l674_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 675
fn l675_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l675_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 676
fn l676_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l676_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 677
fn l677_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l677_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 678
fn l678_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l678_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 679
fn l679_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l679_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 680
fn l680_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l680_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 681
fn l681_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l681_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 682
fn l682_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l682_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 683
fn l683_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l683_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 684
fn l684_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l684_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 685
fn l685_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l685_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 686
fn l686_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l686_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 687
fn l687_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l687_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 688
fn l688_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l688_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 689
fn l689_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l689_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 690
fn l690_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l690_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 691

// Line 692

// Line 693

// Line 694

// Line 695

// Line 696

// Line 697

// Line 698

// Line 699
fn l699_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l699_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 700
fn l700_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l700_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 701
fn l701_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l701_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 702
fn l702_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l702_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 703
fn l703_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l703_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 704
fn l704_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l704_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 705
fn l705_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l705_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 706
fn l706_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l706_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 707
fn l707_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l707_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 708
fn l708_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l708_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 709
fn l709_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l709_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 710
fn l710_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l710_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 711
fn l711_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l711_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 712
fn l712_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l712_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 713
fn l713_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l713_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 714
fn l714_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l714_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 715
fn l715_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l715_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 716
fn l716_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l716_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 717
fn l717_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l717_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 718
fn l718_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l718_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 719
fn l719_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l719_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 720
fn l720_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l720_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 721
fn l721_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l721_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 722
fn l722_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l722_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 723
fn l723_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l723_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 724
fn l724_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l724_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 725
fn l725_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l725_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 726
fn l726_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l726_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 727

// Line 728
fn l728_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l728_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 729
fn l729_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l729_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 730

// Line 731

// Line 732

// Line 733

// Line 734

// Line 735

// Line 736

// Line 737

// Line 738

// Line 739

// Line 740

// Line 741

// Line 742

// Line 743

// Line 744

// Line 745

// Line 746

// Line 747

// Line 748

// Line 749

// Line 750

// Line 751

// Line 752

// Line 753

// Line 754

// Line 755

// Line 756

// Line 757

// Line 758

// Line 759

// Line 760

// Line 761

// Line 762

// Line 763

// Line 764

// Line 765

// Line 766

// Line 767

// Line 768

// Line 769

// Line 770

// Line 771

// Line 772

// Line 773

// Line 774

// Line 775

// Line 776

// Line 777

// Line 778

// Line 779

// Line 780

// Line 781

// Line 782

// Line 783

// Line 784

// Line 785

// Line 786

// Line 787

// Line 788

// Line 789

// Line 790

// Line 791

// Line 792

// Line 793

// Line 794

// Line 795

// Line 796

// Line 797

// Line 798

// Line 799

// Line 800

// Line 801

// Line 802

// Line 803

// Line 804

// Line 805

// Line 806

// Line 807

// Line 808

// Line 809

// Line 810

// Line 811

// Line 812

// Line 813

// Line 814

// Line 815

// Line 816

// Line 817

// Line 818

// Line 819
fn l819_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l819_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 820
fn l820_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l820_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 821
fn l821_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l821_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 822
fn l822_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l822_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 823
fn l823_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l823_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 824
fn l824_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l824_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 825
fn l825_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l825_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 826
fn l826_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l826_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 827
fn l827_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l827_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 828
fn l828_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l828_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 829
fn l829_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l829_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 830
fn l830_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l830_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 831
fn l831_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l831_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 832
fn l832_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l832_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 833
fn l833_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l833_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 834
fn l834_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l834_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 835
fn l835_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l835_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 836
fn l836_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l836_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 837
fn l837_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l837_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 838
fn l838_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l838_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 839
fn l839_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l839_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 840
fn l840_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l840_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 841
fn l841_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l841_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 842
fn l842_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l842_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 843
fn l843_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l843_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 844
fn l844_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l844_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 845
fn l845_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l845_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 846
fn l846_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l846_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 847

// Line 848

// Line 849

// Line 850

// Line 851

// Line 852

// Line 853

// Line 854

// Line 855

// Line 856

// Line 857

// Line 858

// Line 859
fn l859_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l859_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 860
fn l860_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l860_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 861
fn l861_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l861_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 862
fn l862_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l862_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 863
fn l863_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l863_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 864
fn l864_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l864_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 865
fn l865_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l865_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 866
fn l866_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l866_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 867
fn l867_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l867_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 868
fn l868_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l868_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 869
fn l869_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l869_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 870
fn l870_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l870_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 871
fn l871_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l871_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 872
fn l872_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l872_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 873
fn l873_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l873_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 874
fn l874_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l874_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 875
fn l875_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l875_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 876
fn l876_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l876_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 877
fn l877_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l877_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 878
fn l878_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l878_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 879
fn l879_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l879_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003 as f64);
}

// Line 880
fn l880_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l880_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003 as f64);
}

// Line 881
fn l881_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l881_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003 as f64);
}

// Line 882
fn l882_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l882_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003 as f64);
}

// Line 883
fn l883_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l883_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0000000000000008881784197001251 as f64);
}

// Line 884
fn l884_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l884_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.0000000000000008881784197001251 as f64);
}

// Line 885
fn l885_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l885_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.0000000000000008881784197001251 as f64);
}

// Line 886
fn l886_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l886_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0000000000000008881784197001251 as f64);
}

// Line 887
fn l887_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l887_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 888
fn l888_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l888_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 889
fn l889_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l889_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 890
fn l890_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l890_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 891

// Line 892

// Line 893

// Line 894

// Line 895

// Line 896

// Line 897

// Line 898

// Line 899
fn l899_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l899_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 900
fn l900_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l900_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 901
fn l901_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l901_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 902
fn l902_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l902_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 903
fn l903_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l903_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 904
fn l904_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l904_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 905
fn l905_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l905_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 906
fn l906_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l906_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 907
fn l907_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l907_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 908
fn l908_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l908_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 909
fn l909_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l909_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 910
fn l910_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l910_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 911
fn l911_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l911_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011125369292536007 as f64);
}

// Line 912
fn l912_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l912_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011125369292536007 as f64);
}

// Line 913
fn l913_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l913_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011125369292536007 as f64);
}

// Line 914
fn l914_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l914_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011125369292536007 as f64);
}

// Line 915
fn l915_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l915_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 916
fn l916_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l916_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 917
fn l917_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l917_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 918
fn l918_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l918_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 919
fn l919_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l919_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013980551375161837 as f64);
}

// Line 920
fn l920_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l920_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013980551375161837 as f64);
}

// Line 921
fn l921_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l921_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013980551375161837 as f64);
}

// Line 922
fn l922_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l922_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013980551375161837 as f64);
}

// Line 923
fn l923_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l923_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 3.9999999999999996 as f64);
}

// Line 924
fn l924_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l924_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -3.9999999999999996 as f64);
}

// Line 925
fn l925_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l925_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -3.9999999999999996 as f64);
}

// Line 926
fn l926_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l926_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 3.9999999999999996 as f64);
}

// Line 927
fn l927_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l927_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 928
fn l928_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l928_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 929
fn l929_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l929_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 930
fn l930_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l930_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 931

// Line 932

// Line 933

// Line 934

// Line 935

// Line 936

// Line 937

// Line 938

// Line 939
fn l939_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l939_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 940
fn l940_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l940_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 941
fn l941_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l941_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 942
fn l942_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l942_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 943
fn l943_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l943_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 944
fn l944_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l944_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 945
fn l945_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l945_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 946
fn l946_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l946_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 947
fn l947_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l947_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011125369292536007 as f64);
}

// Line 948
fn l948_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l948_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011125369292536007 as f64);
}

// Line 949
fn l949_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l949_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011125369292536007 as f64);
}

// Line 950
fn l950_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l950_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011125369292536007 as f64);
}

// Line 951
fn l951_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l951_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.25 as f64);
}

// Line 952
fn l952_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l952_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -0.25 as f64);
}

// Line 953
fn l953_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l953_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.25 as f64);
}

// Line 954
fn l954_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l954_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.25 as f64);
}

// Line 955
fn l955_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l955_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 956
fn l956_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l956_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 957
fn l957_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l957_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 958
fn l958_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l958_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 959
fn l959_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l959_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 3.141592653589793 as f64);
}

// Line 960
fn l960_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l960_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -3.141592653589793 as f64);
}

// Line 961
fn l961_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l961_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -3.141592653589793 as f64);
}

// Line 962
fn l962_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l962_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 3.141592653589793 as f64);
}

// Line 963
fn l963_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l963_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 964
fn l964_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l964_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 965
fn l965_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l965_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 966
fn l966_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l966_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 967
fn l967_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l967_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 968
fn l968_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l968_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 969
fn l969_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l969_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 970
fn l970_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l970_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 971

// Line 972

// Line 973

// Line 974

// Line 975

// Line 976

// Line 977

// Line 978

// Line 979
fn l979_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l979_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 980
fn l980_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l980_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 981
fn l981_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l981_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 982
fn l982_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l982_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 983
fn l983_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l983_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 984
fn l984_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l984_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 985
fn l985_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l985_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 986
fn l986_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l986_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 987
fn l987_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l987_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 988
fn l988_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l988_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 989
fn l989_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l989_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 990
fn l990_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l990_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 991
fn l991_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l991_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 992
fn l992_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l992_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 993
fn l993_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l993_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 994
fn l994_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l994_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 995
fn l995_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l995_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 996
fn l996_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l996_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 997
fn l997_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l997_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 998
fn l998_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l998_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 999
fn l999_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l999_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 1000
fn l1000_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1000_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1001
fn l1001_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1001_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1002
fn l1002_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1002_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 1003
fn l1003_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1003_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1004
fn l1004_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1004_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1005
fn l1005_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1005_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1006
fn l1006_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1006_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1007
fn l1007_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1007_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1008
fn l1008_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1008_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1009
fn l1009_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1009_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1010
fn l1010_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1010_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1011

// Line 1012

// Line 1013

// Line 1014

// Line 1015

// Line 1016

// Line 1017

// Line 1018

// Line 1019
fn l1019_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1019_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1020
fn l1020_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1020_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1021
fn l1021_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1021_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1022
fn l1022_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1022_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1023
fn l1023_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1023_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003 as f64);
}

// Line 1024
fn l1024_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1024_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003 as f64);
}

// Line 1025
fn l1025_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1025_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003 as f64);
}

// Line 1026
fn l1026_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1026_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003 as f64);
}

// Line 1027
fn l1027_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1027_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013980551375161837 as f64);
}

// Line 1028
fn l1028_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1028_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013980551375161837 as f64);
}

// Line 1029
fn l1029_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1029_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013980551375161837 as f64);
}

// Line 1030
fn l1030_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1030_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013980551375161837 as f64);
}

// Line 1031
fn l1031_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1031_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 3.141592653589793 as f64);
}

// Line 1032
fn l1032_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1032_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -3.141592653589793 as f64);
}

// Line 1033
fn l1033_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1033_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -3.141592653589793 as f64);
}

// Line 1034
fn l1034_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1034_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 3.141592653589793 as f64);
}

// Line 1035
fn l1035_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1035_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 1036
fn l1036_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1036_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1037
fn l1037_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1037_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1038
fn l1038_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1038_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 1039
fn l1039_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1039_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 39.47841760435743 as f64);
}

// Line 1040
fn l1040_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1040_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -39.47841760435743 as f64);
}

// Line 1041
fn l1041_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1041_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -39.47841760435743 as f64);
}

// Line 1042
fn l1042_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1042_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 39.47841760435743 as f64);
}

// Line 1043
fn l1043_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1043_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1044
fn l1044_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1044_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1045
fn l1045_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1045_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1046
fn l1046_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1046_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1047
fn l1047_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1047_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1048
fn l1048_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1048_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1049
fn l1049_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1049_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1050
fn l1050_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1050_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1051

// Line 1052

// Line 1053

// Line 1054

// Line 1055

// Line 1056

// Line 1057

// Line 1058

// Line 1059
fn l1059_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1059_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1060
fn l1060_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1060_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1061
fn l1061_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1061_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1062
fn l1062_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1062_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1063
fn l1063_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1063_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0000000000000008881784197001251 as f64);
}

// Line 1064
fn l1064_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1064_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0000000000000008881784197001251 as f64);
}

// Line 1065
fn l1065_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1065_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0000000000000008881784197001251 as f64);
}

// Line 1066
fn l1066_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1066_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0000000000000008881784197001251 as f64);
}

// Line 1067
fn l1067_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1067_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 3.9999999999999996 as f64);
}

// Line 1068
fn l1068_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1068_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -3.9999999999999996 as f64);
}

// Line 1069
fn l1069_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1069_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -3.9999999999999996 as f64);
}

// Line 1070
fn l1070_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1070_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 3.9999999999999996 as f64);
}

// Line 1071
fn l1071_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1071_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1072
fn l1072_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1072_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1073
fn l1073_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1073_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1074
fn l1074_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1074_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 89884656743115790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1075
fn l1075_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1075_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1076
fn l1076_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1076_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1077
fn l1077_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1077_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1078
fn l1078_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1078_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1079
fn l1079_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1079_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1080
fn l1080_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1080_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1081
fn l1081_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1081_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1082
fn l1082_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1082_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1083
fn l1083_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1083_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1084
fn l1084_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1084_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1085
fn l1085_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1085_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1086
fn l1086_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1086_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1087
fn l1087_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1087_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1088
fn l1088_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1088_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1089
fn l1089_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1089_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1090
fn l1090_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1090_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1091

// Line 1092

// Line 1093

// Line 1094

// Line 1095

// Line 1096

// Line 1097

// Line 1098

// Line 1099

// Line 1100

// Line 1101

// Line 1102

// Line 1103
fn l1103_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1103_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1104
fn l1104_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1104_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1105
fn l1105_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1105_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1106
fn l1106_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1106_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1107
fn l1107_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1107_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1108
fn l1108_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1108_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1109
fn l1109_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1109_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1110
fn l1110_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1110_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1111
fn l1111_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1111_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1112
fn l1112_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1112_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1113
fn l1113_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1113_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1114
fn l1114_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1114_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1115
fn l1115_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1115_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1116
fn l1116_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1116_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1117
fn l1117_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1117_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1118
fn l1118_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1118_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1119
fn l1119_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1119_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1120
fn l1120_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1120_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1121
fn l1121_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1121_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1122
fn l1122_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1122_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1123
fn l1123_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1123_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1124
fn l1124_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1124_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1125
fn l1125_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1125_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1126
fn l1126_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1126_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1127
fn l1127_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1127_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1128
fn l1128_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1128_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1129
fn l1129_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1129_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1130
fn l1130_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1130_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1131

// Line 1132

// Line 1133

// Line 1134

// Line 1135

// Line 1136

// Line 1137

// Line 1138

// Line 1139

// Line 1140

// Line 1141

// Line 1142

// Line 1143

// Line 1144

// Line 1145

// Line 1146

// Line 1147

// Line 1148

// Line 1149

// Line 1150

// Line 1151

// Line 1152

// Line 1153

// Line 1154

// Line 1155

// Line 1156

// Line 1157

// Line 1158

// Line 1159

// Line 1160

// Line 1161

// Line 1162

// Line 1163

// Line 1164

// Line 1165

// Line 1166

// Line 1167

// Line 1168

// Line 1169

// Line 1170

// Line 1171

// Line 1172

// Line 1173

// Line 1174

// Line 1175

// Line 1176

// Line 1177

// Line 1178

// Line 1179

// Line 1180

// Line 1181

// Line 1182

// Line 1183

// Line 1184

// Line 1185

// Line 1186

// Line 1187

// Line 1188

// Line 1189

// Line 1190

// Line 1191

// Line 1192

// Line 1193

// Line 1194

// Line 1195

// Line 1196

// Line 1197

// Line 1198

// Line 1199

// Line 1200

// Line 1201

// Line 1202

// Line 1203

// Line 1204

// Line 1205

// Line 1206

// Line 1207

// Line 1208

// Line 1209

// Line 1210

// Line 1211

// Line 1212

// Line 1213

// Line 1214

// Line 1215

// Line 1216

// Line 1217

// Line 1218

// Line 1219

// Line 1220

// Line 1221

// Line 1222

// Line 1223
fn l1223_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1223_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1224
fn l1224_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1224_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1225
fn l1225_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1225_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1226
fn l1226_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1226_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1227
fn l1227_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1227_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1228
fn l1228_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1228_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1229
fn l1229_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1229_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1230
fn l1230_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1230_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1231
fn l1231_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1231_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1232
fn l1232_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1232_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1233
fn l1233_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1233_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1234
fn l1234_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1234_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1235
fn l1235_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1235_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1236
fn l1236_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1236_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1237
fn l1237_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1237_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1238
fn l1238_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1238_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1239
fn l1239_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1239_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1240
fn l1240_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1240_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1241
fn l1241_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1241_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1242
fn l1242_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1242_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1243
fn l1243_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1243_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1244
fn l1244_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1244_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1245
fn l1245_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1245_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1246
fn l1246_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1246_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1247
fn l1247_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1247_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1248
fn l1248_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1248_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1249
fn l1249_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1249_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1250
fn l1250_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1250_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1251

// Line 1252

// Line 1253

// Line 1254

// Line 1255

// Line 1256

// Line 1257

// Line 1258

// Line 1259
fn l1259_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1259_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1260
fn l1260_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1260_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1261
fn l1261_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1261_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1262
fn l1262_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1262_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1263
fn l1263_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1263_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 1264
fn l1264_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1264_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1265
fn l1265_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1265_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1266
fn l1266_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1266_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 1267
fn l1267_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1267_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0000000000000002220446049250313 as f64);
}

// Line 1268
fn l1268_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1268_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0000000000000002220446049250313 as f64);
}

// Line 1269
fn l1269_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1269_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0000000000000002220446049250313 as f64);
}

// Line 1270
fn l1270_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1270_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0000000000000002220446049250313 as f64);
}

// Line 1271
fn l1271_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1271_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 as f64);
}

// Line 1272
fn l1272_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1272_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 as f64);
}

// Line 1273
fn l1273_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1273_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 as f64);
}

// Line 1274
fn l1274_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1274_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 as f64);
}

// Line 1275
fn l1275_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1275_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1276
fn l1276_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1276_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1277
fn l1277_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1277_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1278
fn l1278_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1278_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1279
fn l1279_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1279_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1280
fn l1280_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1280_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1281
fn l1281_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1281_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1282
fn l1282_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1282_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1283
fn l1283_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1283_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1284
fn l1284_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1284_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1285
fn l1285_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1285_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1286
fn l1286_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1286_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1287
fn l1287_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1287_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1288
fn l1288_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1288_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1289
fn l1289_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1289_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1290
fn l1290_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1290_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1291

// Line 1292

// Line 1293

// Line 1294

// Line 1295

// Line 1296

// Line 1297

// Line 1298

// Line 1299
fn l1299_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1299_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1300
fn l1300_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1300_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1301
fn l1301_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1301_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1302
fn l1302_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1302_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1303
fn l1303_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1303_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 4503599627370496.0 as f64);
}

// Line 1304
fn l1304_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1304_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -4503599627370496.0 as f64);
}

// Line 1305
fn l1305_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1305_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -4503599627370496.0 as f64);
}

// Line 1306
fn l1306_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1306_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 4503599627370496.0 as f64);
}

// Line 1307
fn l1307_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1307_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 1308
fn l1308_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1308_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1309
fn l1309_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1309_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1310
fn l1310_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1310_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 1311
fn l1311_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1311_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403 as f64);
}

// Line 1312
fn l1312_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1312_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403 as f64);
}

// Line 1313
fn l1313_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1313_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403 as f64);
}

// Line 1314
fn l1314_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1314_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004450147717014403 as f64);
}

// Line 1315
fn l1315_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1315_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1316
fn l1316_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1316_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1317
fn l1317_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1317_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1318
fn l1318_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1318_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1319
fn l1319_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1319_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003541315033259774 as f64);
}

// Line 1320
fn l1320_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1320_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003541315033259774 as f64);
}

// Line 1321
fn l1321_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1321_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003541315033259774 as f64);
}

// Line 1322
fn l1322_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1322_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003541315033259774 as f64);
}

// Line 1323
fn l1323_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1323_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1324
fn l1324_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1324_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1325
fn l1325_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1325_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1326
fn l1326_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1326_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1327
fn l1327_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1327_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1328
fn l1328_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1328_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1329
fn l1329_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1329_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1330
fn l1330_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1330_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1331

// Line 1332

// Line 1333

// Line 1334

// Line 1335

// Line 1336

// Line 1337

// Line 1338

// Line 1339
fn l1339_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1339_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1340
fn l1340_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1340_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1341
fn l1341_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1341_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1342
fn l1342_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1342_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1343
fn l1343_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1343_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1344
fn l1344_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1344_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1345
fn l1345_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1345_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1346
fn l1346_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1346_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1347
fn l1347_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1347_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 22471164185778950000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1348
fn l1348_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1348_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -22471164185778950000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1349
fn l1349_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1349_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -22471164185778950000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1350
fn l1350_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1350_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 22471164185778950000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1351
fn l1351_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1351_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 1352
fn l1352_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1352_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1353
fn l1353_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1353_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1354
fn l1354_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1354_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 1355
fn l1355_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1355_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 1356
fn l1356_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1356_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1357
fn l1357_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1357_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1358
fn l1358_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1358_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 1359
fn l1359_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1359_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.07957747154594767 as f64);
}

// Line 1360
fn l1360_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1360_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.07957747154594767 as f64);
}

// Line 1361
fn l1361_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1361_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.07957747154594767 as f64);
}

// Line 1362
fn l1362_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1362_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.07957747154594767 as f64);
}

// Line 1363
fn l1363_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1363_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002781342323134 as f64);
}

// Line 1364
fn l1364_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1364_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002781342323134 as f64);
}

// Line 1365
fn l1365_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1365_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002781342323134 as f64);
}

// Line 1366
fn l1366_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1366_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002781342323134 as f64);
}

// Line 1367
fn l1367_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1367_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1368
fn l1368_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1368_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1369
fn l1369_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1369_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1370
fn l1370_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1370_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1371

// Line 1372

// Line 1373

// Line 1374

// Line 1375

// Line 1376

// Line 1377

// Line 1378

// Line 1379
fn l1379_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1379_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1380
fn l1380_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1380_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1381
fn l1381_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1381_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1382
fn l1382_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1382_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1383
fn l1383_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1383_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1384
fn l1384_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1384_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1385
fn l1385_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1385_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1386
fn l1386_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1386_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1387
fn l1387_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1387_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 44942328371557900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1388
fn l1388_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1388_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -44942328371557900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1389
fn l1389_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1389_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -44942328371557900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1390
fn l1390_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1390_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 44942328371557900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1391
fn l1391_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1391_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 2.0 as f64);
}

// Line 1392
fn l1392_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1392_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -2.0 as f64);
}

// Line 1393
fn l1393_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1393_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -2.0 as f64);
}

// Line 1394
fn l1394_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1394_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 2.0 as f64);
}

// Line 1395
fn l1395_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1395_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 1396
fn l1396_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1396_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1397
fn l1397_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1397_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1398
fn l1398_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1398_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 1399
fn l1399_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1399_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.15915494309189535 as f64);
}

// Line 1400
fn l1400_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1400_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.15915494309189535 as f64);
}

// Line 1401
fn l1401_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1401_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.15915494309189535 as f64);
}

// Line 1402
fn l1402_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1402_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.15915494309189535 as f64);
}

// Line 1403
fn l1403_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1403_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005562684646268003 as f64);
}

// Line 1404
fn l1404_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1404_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005562684646268003 as f64);
}

// Line 1405
fn l1405_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1405_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005562684646268003 as f64);
}

// Line 1406
fn l1406_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1406_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005562684646268003 as f64);
}

// Line 1407
fn l1407_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1407_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1408
fn l1408_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1408_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1409
fn l1409_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1409_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1410
fn l1410_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1410_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1411

// Line 1412

// Line 1413

// Line 1414

// Line 1415

// Line 1416

// Line 1417

// Line 1418

// Line 1419
fn l1419_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1419_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1420
fn l1420_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1420_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1421
fn l1421_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1421_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1422
fn l1422_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1422_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1423
fn l1423_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1423_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1424
fn l1424_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1424_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1425
fn l1425_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1425_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1426
fn l1426_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1426_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1427
fn l1427_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1427_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1428
fn l1428_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1428_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1429
fn l1429_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1429_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1430
fn l1430_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1430_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1431
fn l1431_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1431_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 12.566370614359172 as f64);
}

// Line 1432
fn l1432_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1432_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -12.566370614359172 as f64);
}

// Line 1433
fn l1433_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1433_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -12.566370614359172 as f64);
}

// Line 1434
fn l1434_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1434_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 12.566370614359172 as f64);
}

// Line 1435
fn l1435_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1435_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 1436
fn l1436_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1436_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1437
fn l1437_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1437_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1438
fn l1438_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1438_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 1439
fn l1439_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1439_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 1440
fn l1440_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1440_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1441
fn l1441_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1441_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1442
fn l1442_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1442_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 1443
fn l1443_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1443_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000349513784379046 as f64);
}

// Line 1444
fn l1444_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1444_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000349513784379046 as f64);
}

// Line 1445
fn l1445_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1445_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000349513784379046 as f64);
}

// Line 1446
fn l1446_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1446_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000349513784379046 as f64);
}

// Line 1447
fn l1447_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1447_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1448
fn l1448_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1448_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1449
fn l1449_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1449_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1450
fn l1450_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1450_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1451

// Line 1452

// Line 1453

// Line 1454

// Line 1455

// Line 1456

// Line 1457

// Line 1458

// Line 1459
fn l1459_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1459_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1460
fn l1460_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1460_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1461
fn l1461_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1461_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1462
fn l1462_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1462_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1463
fn l1463_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1463_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1464
fn l1464_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1464_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1465
fn l1465_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1465_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1466
fn l1466_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1466_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1467
fn l1467_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1467_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1468
fn l1468_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1468_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1469
fn l1469_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1469_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1470
fn l1470_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1470_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1471
fn l1471_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1471_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1472
fn l1472_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1472_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1473
fn l1473_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1473_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1474
fn l1474_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1474_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1475
fn l1475_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1475_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1476
fn l1476_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1476_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1477
fn l1477_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1477_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1478
fn l1478_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1478_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1479
fn l1479_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1479_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 28611174857570280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1480
fn l1480_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1480_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -28611174857570280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1481
fn l1481_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1481_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -28611174857570280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1482
fn l1482_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1482_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 28611174857570280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1483
fn l1483_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1483_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 1484
fn l1484_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1484_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1485
fn l1485_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1485_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1486
fn l1486_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1486_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 1487
fn l1487_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1487_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1488
fn l1488_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1488_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1489
fn l1489_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1489_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1490
fn l1490_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1490_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1491

// Line 1492

// Line 1493

// Line 1494

// Line 1495

// Line 1496

// Line 1497

// Line 1498

// Line 1499
fn l1499_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1499_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1500
fn l1500_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1500_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1501
fn l1501_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1501_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1502
fn l1502_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1502_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1503
fn l1503_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1503_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1504
fn l1504_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1504_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1505
fn l1505_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1505_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1506
fn l1506_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1506_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1507
fn l1507_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1507_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1508
fn l1508_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1508_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1509
fn l1509_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1509_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1510
fn l1510_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1510_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1511
fn l1511_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1511_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1512
fn l1512_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1512_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1513
fn l1513_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1513_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1514
fn l1514_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1514_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1515
fn l1515_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1515_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1516
fn l1516_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1516_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1517
fn l1517_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1517_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1518
fn l1518_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1518_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1519
fn l1519_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1519_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1520
fn l1520_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1520_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1521
fn l1521_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1521_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1522
fn l1522_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1522_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1523
fn l1523_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1523_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1524
fn l1524_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1524_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1525
fn l1525_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1525_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1526
fn l1526_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1526_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1527

// Line 1528

// Line 1529

// Line 1530

// Line 1531

// Line 1532

// Line 1533

// Line 1534

// Line 1535

// Line 1536

// Line 1537

// Line 1538

// Line 1539

// Line 1540

// Line 1541

// Line 1542

// Line 1543

// Line 1544

// Line 1545

// Line 1546

// Line 1547

// Line 1548

// Line 1549

// Line 1550

// Line 1551

// Line 1552

// Line 1553

// Line 1554

// Line 1555

// Line 1556

// Line 1557

// Line 1558

// Line 1559

// Line 1560

// Line 1561

// Line 1562

// Line 1563

// Line 1564

// Line 1565

// Line 1566

// Line 1567

// Line 1568

// Line 1569

// Line 1570

// Line 1571

// Line 1572

// Line 1573

// Line 1574

// Line 1575

// Line 1576

// Line 1577

// Line 1578

// Line 1579

// Line 1580

// Line 1581

// Line 1582

// Line 1583

// Line 1584

// Line 1585

// Line 1586

// Line 1587

// Line 1588

// Line 1589

// Line 1590

// Line 1591

// Line 1592

// Line 1593

// Line 1594

// Line 1595

// Line 1596

// Line 1597

// Line 1598

// Line 1599

// Line 1600

// Line 1601

// Line 1602

// Line 1603

// Line 1604

// Line 1605

// Line 1606

// Line 1607

// Line 1608

// Line 1609

// Line 1610

// Line 1611

// Line 1612

// Line 1613

// Line 1614

// Line 1615

// Line 1616

// Line 1617

// Line 1618

// Line 1619
fn l1619_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1619_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1620
fn l1620_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1620_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1621
fn l1621_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1621_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1622
fn l1622_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1622_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1623
fn l1623_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1623_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1624
fn l1624_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1624_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1625
fn l1625_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1625_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1626
fn l1626_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1626_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1627
fn l1627_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1627_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1628
fn l1628_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1628_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1629
fn l1629_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1629_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1630
fn l1630_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1630_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1631
fn l1631_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1631_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1632
fn l1632_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1632_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1633
fn l1633_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1633_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1634
fn l1634_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1634_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1635
fn l1635_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1635_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1636
fn l1636_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1636_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1637
fn l1637_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1637_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1638
fn l1638_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1638_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1639
fn l1639_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1639_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1640
fn l1640_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1640_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1641
fn l1641_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1641_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1642
fn l1642_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1642_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1643
fn l1643_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1643_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1644
fn l1644_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1644_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1645
fn l1645_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1645_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1646
fn l1646_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1646_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1647
fn l1647_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1647_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1648
fn l1648_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1648_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1649
fn l1649_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1649_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1650
fn l1650_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1650_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1651

// Line 1652

// Line 1653

// Line 1654

// Line 1655

// Line 1656

// Line 1657

// Line 1658

// Line 1659
fn l1659_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1659_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1660
fn l1660_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1660_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1661
fn l1661_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1661_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1662
fn l1662_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1662_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1663
fn l1663_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1663_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1664
fn l1664_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1664_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1665
fn l1665_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1665_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1666
fn l1666_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1666_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1667
fn l1667_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1667_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1668
fn l1668_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1668_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1669
fn l1669_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1669_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1670
fn l1670_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1670_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1671
fn l1671_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1671_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1672
fn l1672_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1672_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1673
fn l1673_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1673_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1674
fn l1674_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1674_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1675
fn l1675_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1675_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1676
fn l1676_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1676_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1677
fn l1677_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1677_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1678
fn l1678_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1678_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1679
fn l1679_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1679_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1680
fn l1680_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1680_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1681
fn l1681_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1681_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1682
fn l1682_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1682_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1683
fn l1683_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1683_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1684
fn l1684_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1684_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1685
fn l1685_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1685_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1686
fn l1686_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1686_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1687
fn l1687_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1687_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1688
fn l1688_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1688_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1689
fn l1689_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1689_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1690
fn l1690_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1690_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1691

// Line 1692

// Line 1693

// Line 1694

// Line 1695

// Line 1696

// Line 1697

// Line 1698

// Line 1699
fn l1699_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1699_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1700
fn l1700_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1700_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1701
fn l1701_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1701_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1702
fn l1702_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1702_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1703
fn l1703_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1703_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1704
fn l1704_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1704_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1705
fn l1705_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1705_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1706
fn l1706_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1706_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1707
fn l1707_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1707_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1708
fn l1708_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1708_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1709
fn l1709_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1709_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1710
fn l1710_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1710_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1711
fn l1711_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1711_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1712
fn l1712_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1712_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1713
fn l1713_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1713_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1714
fn l1714_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1714_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1715
fn l1715_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1715_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1716
fn l1716_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1716_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1717
fn l1717_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1717_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1718
fn l1718_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1718_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1719
fn l1719_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1719_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1720
fn l1720_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1720_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1721
fn l1721_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1721_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1722
fn l1722_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1722_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1723
fn l1723_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1723_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1724
fn l1724_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1724_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1725
fn l1725_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1725_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1726
fn l1726_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1726_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1727
fn l1727_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1727_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1728
fn l1728_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1728_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1729
fn l1729_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1729_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1730
fn l1730_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1730_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1731

// Line 1732

// Line 1733

// Line 1734

// Line 1735

// Line 1736

// Line 1737

// Line 1738

// Line 1739
fn l1739_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1739_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1740
fn l1740_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1740_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1741
fn l1741_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1741_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1742
fn l1742_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1742_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1743
fn l1743_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1743_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1744
fn l1744_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1744_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1745
fn l1745_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1745_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1746
fn l1746_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1746_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1747
fn l1747_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1747_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1748
fn l1748_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1748_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1749
fn l1749_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1749_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1750
fn l1750_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1750_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1751
fn l1751_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1751_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1752
fn l1752_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1752_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1753
fn l1753_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1753_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1754
fn l1754_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1754_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 1755
fn l1755_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1755_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1756
fn l1756_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1756_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1757
fn l1757_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1757_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1758
fn l1758_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1758_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 1759
fn l1759_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1759_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1760
fn l1760_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1760_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1761
fn l1761_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1761_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1762
fn l1762_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1762_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 1763
fn l1763_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1763_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1764
fn l1764_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1764_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1765
fn l1765_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1765_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1766
fn l1766_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1766_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 1767
fn l1767_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1767_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1768
fn l1768_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1768_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1769
fn l1769_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1769_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1770
fn l1770_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1770_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 1771

// Line 1772

// Line 1773

// Line 1774

// Line 1775

// Line 1776

// Line 1777

// Line 1778

// Line 1779
fn l1779_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1779_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1780
fn l1780_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1780_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1781
fn l1781_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1781_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1782
fn l1782_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1782_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1783
fn l1783_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1783_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1784
fn l1784_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1784_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1785
fn l1785_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1785_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1786
fn l1786_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1786_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1787
fn l1787_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1787_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1788
fn l1788_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1788_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1789
fn l1789_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1789_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1790
fn l1790_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1790_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1791
fn l1791_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1791_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1792
fn l1792_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1792_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1793
fn l1793_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1793_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1794
fn l1794_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1794_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 1795
fn l1795_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1795_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1796
fn l1796_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1796_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1797
fn l1797_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1797_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1798
fn l1798_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1798_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 1799
fn l1799_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1799_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1800
fn l1800_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1800_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1801
fn l1801_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1801_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1802
fn l1802_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1802_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 1803
fn l1803_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1803_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1804
fn l1804_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1804_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1805
fn l1805_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1805_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1806
fn l1806_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1806_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 1807
fn l1807_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1807_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1808
fn l1808_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1808_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1809
fn l1809_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1809_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1810
fn l1810_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1810_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 1811

// Line 1812

// Line 1813

// Line 1814

// Line 1815

// Line 1816

// Line 1817

// Line 1818

// Line 1819
fn l1819_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1819_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1820
fn l1820_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1820_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1821
fn l1821_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1821_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1822
fn l1822_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1822_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1823
fn l1823_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1823_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1824
fn l1824_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1824_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1825
fn l1825_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1825_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1826
fn l1826_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1826_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1827
fn l1827_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1827_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1828
fn l1828_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1828_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1829
fn l1829_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1829_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1830
fn l1830_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1830_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1831
fn l1831_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1831_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1832
fn l1832_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1832_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1833
fn l1833_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1833_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1834
fn l1834_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1834_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 1835
fn l1835_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1835_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1836
fn l1836_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1836_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1837
fn l1837_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1837_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1838
fn l1838_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1838_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 1839
fn l1839_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1839_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1840
fn l1840_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1840_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1841
fn l1841_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1841_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1842
fn l1842_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1842_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 1843
fn l1843_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1843_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1844
fn l1844_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1844_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1845
fn l1845_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1845_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1846
fn l1846_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1846_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 1847
fn l1847_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1847_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1848
fn l1848_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1848_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1849
fn l1849_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1849_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1850
fn l1850_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1850_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 1851

// Line 1852

// Line 1853

// Line 1854

// Line 1855

// Line 1856

// Line 1857

// Line 1858

// Line 1859
fn l1859_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1859_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1860
fn l1860_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1860_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1861
fn l1861_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1861_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1862
fn l1862_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1862_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1863
fn l1863_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1863_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1864
fn l1864_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1864_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1865
fn l1865_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1865_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1866
fn l1866_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1866_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1867
fn l1867_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1867_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1868
fn l1868_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1868_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1869
fn l1869_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1869_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1870
fn l1870_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1870_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1871
fn l1871_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1871_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1872
fn l1872_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1872_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1873
fn l1873_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1873_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1874
fn l1874_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1874_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 1875
fn l1875_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1875_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1876
fn l1876_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1876_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1877
fn l1877_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1877_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1878
fn l1878_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1878_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 1879
fn l1879_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1879_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1880
fn l1880_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1880_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1881
fn l1881_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1881_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1882
fn l1882_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1882_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 1883
fn l1883_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1883_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1884
fn l1884_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1884_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1885
fn l1885_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1885_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1886
fn l1886_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1886_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1887
fn l1887_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1887_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1888
fn l1888_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1888_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1889
fn l1889_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1889_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1890
fn l1890_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1890_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1891

// Line 1892

// Line 1893

// Line 1894

// Line 1895

// Line 1896

// Line 1897

// Line 1898

// Line 1899
fn l1899_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1899_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1900
fn l1900_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1900_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1901
fn l1901_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1901_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 1902
fn l1902_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1902_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 1903
fn l1903_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1903_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1904
fn l1904_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1904_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1905
fn l1905_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1905_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1906
fn l1906_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1906_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 1907
fn l1907_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1907_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1908
fn l1908_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1908_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1909
fn l1909_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1909_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1910
fn l1910_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1910_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 1911
fn l1911_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1911_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1912
fn l1912_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1912_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1913
fn l1913_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1913_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 1914
fn l1914_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1914_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 1915
fn l1915_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1915_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1916
fn l1916_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1916_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1917
fn l1917_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1917_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 1918
fn l1918_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1918_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 1919
fn l1919_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1919_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1920
fn l1920_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1920_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1921
fn l1921_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1921_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 1922
fn l1922_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1922_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 1923
fn l1923_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1923_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1924
fn l1924_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1924_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1925
fn l1925_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1925_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1926
fn l1926_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1926_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 1927
fn l1927_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1927_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1928
fn l1928_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1928_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1929
fn l1929_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1929_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 1930
fn l1930_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l1930_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 1931

// Line 1932

// Line 1933

// Line 1934

// Line 1935

// Line 1936

// Line 1937

// Line 1938

// Line 1939

// Line 1940

// Line 1941

// Line 1942

// Line 1943

// Line 1944

// Line 1945

// Line 1946

// Line 1947

// Line 1948

// Line 1949

// Line 1950

// Line 1951

// Line 1952

// Line 1953

// Line 1954

// Line 1955

// Line 1956

// Line 1957

// Line 1958

// Line 1959

// Line 1960

// Line 1961

// Line 1962

// Line 1963

// Line 1964

// Line 1965

// Line 1966

// Line 1967

// Line 1968

// Line 1969

// Line 1970

// Line 1971

// Line 1972

// Line 1973

// Line 1974

// Line 1975

// Line 1976

// Line 1977

// Line 1978

// Line 1979

// Line 1980

// Line 1981

// Line 1982

// Line 1983

// Line 1984

// Line 1985

// Line 1986

// Line 1987

// Line 1988

// Line 1989

// Line 1990

// Line 1991

// Line 1992

// Line 1993

// Line 1994

// Line 1995

// Line 1996

// Line 1997

// Line 1998

// Line 1999

// Line 2000

// Line 2001

// Line 2002

// Line 2003

// Line 2004

// Line 2005

// Line 2006

// Line 2007

// Line 2008

// Line 2009

// Line 2010

// Line 2011

// Line 2012

// Line 2013

// Line 2014

// Line 2015

// Line 2016

// Line 2017

// Line 2018

// Line 2019
fn l2019_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2019_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2020
fn l2020_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2020_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2021
fn l2021_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2021_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2022
fn l2022_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2022_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2023
fn l2023_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2023_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2024
fn l2024_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2024_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2025
fn l2025_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2025_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2026
fn l2026_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2026_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2027
fn l2027_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2027_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2028
fn l2028_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2028_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2029
fn l2029_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2029_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2030
fn l2030_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2030_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2031
fn l2031_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2031_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2032
fn l2032_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2032_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2033
fn l2033_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2033_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2034
fn l2034_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2034_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2035
fn l2035_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2035_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2036
fn l2036_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2036_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2037
fn l2037_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2037_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2038
fn l2038_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2038_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2039
fn l2039_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2039_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2040
fn l2040_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2040_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2041
fn l2041_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2041_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2042
fn l2042_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2042_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2043
fn l2043_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2043_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2044
fn l2044_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2044_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2045
fn l2045_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2045_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2046
fn l2046_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2046_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2047
fn l2047_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2047_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2048
fn l2048_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2048_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2049
fn l2049_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2049_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2050
fn l2050_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2050_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2051

// Line 2052

// Line 2053

// Line 2054

// Line 2055

// Line 2056

// Line 2057

// Line 2058

// Line 2059
fn l2059_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2059_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2060
fn l2060_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2060_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2061
fn l2061_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2061_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2062
fn l2062_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2062_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2063
fn l2063_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2063_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2064
fn l2064_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2064_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2065
fn l2065_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2065_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2066
fn l2066_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2066_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2067
fn l2067_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2067_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2068
fn l2068_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2068_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2069
fn l2069_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2069_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2070
fn l2070_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2070_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2071
fn l2071_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2071_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2072
fn l2072_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2072_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2073
fn l2073_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2073_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2074
fn l2074_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2074_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2075
fn l2075_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2075_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2076
fn l2076_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2076_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2077
fn l2077_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2077_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2078
fn l2078_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2078_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2079
fn l2079_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2079_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2080
fn l2080_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2080_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2081
fn l2081_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2081_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2082
fn l2082_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2082_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2083
fn l2083_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2083_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2084
fn l2084_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2084_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2085
fn l2085_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2085_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2086
fn l2086_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2086_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2087
fn l2087_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2087_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2088
fn l2088_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2088_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2089
fn l2089_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2089_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2090
fn l2090_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2090_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2091

// Line 2092

// Line 2093

// Line 2094

// Line 2095

// Line 2096

// Line 2097

// Line 2098

// Line 2099
fn l2099_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2099_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2100
fn l2100_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2100_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2101
fn l2101_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2101_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2102
fn l2102_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2102_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2103
fn l2103_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2103_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2104
fn l2104_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2104_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2105
fn l2105_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2105_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2106
fn l2106_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2106_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2107
fn l2107_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2107_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2108
fn l2108_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2108_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2109
fn l2109_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2109_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2110
fn l2110_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2110_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2111
fn l2111_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2111_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2112
fn l2112_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2112_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2113
fn l2113_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2113_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2114
fn l2114_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2114_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2115
fn l2115_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2115_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2116
fn l2116_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2116_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2117
fn l2117_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2117_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2118
fn l2118_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2118_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2119
fn l2119_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2119_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2120
fn l2120_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2120_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2121
fn l2121_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2121_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2122
fn l2122_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2122_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2123
fn l2123_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2123_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2124
fn l2124_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2124_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2125
fn l2125_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2125_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2126
fn l2126_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2126_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2127
fn l2127_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2127_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2128
fn l2128_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2128_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2129
fn l2129_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2129_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2130
fn l2130_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2130_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2131

// Line 2132

// Line 2133

// Line 2134

// Line 2135

// Line 2136

// Line 2137

// Line 2138

// Line 2139
fn l2139_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2139_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2140
fn l2140_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2140_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2141
fn l2141_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2141_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2142
fn l2142_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2142_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2143
fn l2143_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2143_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2144
fn l2144_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2144_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2145
fn l2145_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2145_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2146
fn l2146_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2146_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2147
fn l2147_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2147_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2148
fn l2148_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2148_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2149
fn l2149_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2149_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2150
fn l2150_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2150_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2151
fn l2151_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2151_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 2152
fn l2152_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2152_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2153
fn l2153_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2153_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2154
fn l2154_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2154_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2155
fn l2155_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2155_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 2156
fn l2156_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2156_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2157
fn l2157_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2157_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2158
fn l2158_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2158_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2159
fn l2159_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2159_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 2160
fn l2160_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2160_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2161
fn l2161_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2161_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2162
fn l2162_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2162_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2163
fn l2163_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2163_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 2164
fn l2164_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2164_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2165
fn l2165_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2165_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2166
fn l2166_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2166_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2167
fn l2167_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2167_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 2168
fn l2168_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2168_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2169
fn l2169_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2169_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2170
fn l2170_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2170_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2171

// Line 2172

// Line 2173

// Line 2174

// Line 2175

// Line 2176

// Line 2177

// Line 2178

// Line 2179
fn l2179_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2179_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2180
fn l2180_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2180_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2181
fn l2181_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2181_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2182
fn l2182_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2182_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2183
fn l2183_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2183_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2184
fn l2184_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2184_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2185
fn l2185_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2185_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2186
fn l2186_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2186_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2187
fn l2187_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2187_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2188
fn l2188_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2188_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2189
fn l2189_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2189_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2190
fn l2190_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2190_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2191
fn l2191_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2191_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 2192
fn l2192_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2192_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2193
fn l2193_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2193_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2194
fn l2194_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2194_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2195
fn l2195_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2195_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 2196
fn l2196_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2196_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2197
fn l2197_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2197_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2198
fn l2198_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2198_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2199
fn l2199_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2199_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 2200
fn l2200_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2200_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2201
fn l2201_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2201_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2202
fn l2202_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2202_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2203
fn l2203_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2203_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 2204
fn l2204_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2204_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2205
fn l2205_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2205_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2206
fn l2206_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2206_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2207
fn l2207_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2207_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 2208
fn l2208_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2208_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2209
fn l2209_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2209_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2210
fn l2210_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2210_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2211

// Line 2212

// Line 2213

// Line 2214

// Line 2215

// Line 2216

// Line 2217

// Line 2218

// Line 2219
fn l2219_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2219_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2220
fn l2220_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2220_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2221
fn l2221_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2221_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2222
fn l2222_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2222_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2223
fn l2223_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2223_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2224
fn l2224_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2224_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2225
fn l2225_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2225_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2226
fn l2226_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2226_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2227
fn l2227_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2227_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2228
fn l2228_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2228_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2229
fn l2229_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2229_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2230
fn l2230_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2230_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2231
fn l2231_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2231_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 2232
fn l2232_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2232_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2233
fn l2233_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2233_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2234
fn l2234_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2234_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2235
fn l2235_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2235_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 2236
fn l2236_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2236_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2237
fn l2237_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2237_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2238
fn l2238_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2238_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2239
fn l2239_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2239_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 2240
fn l2240_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2240_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2241
fn l2241_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2241_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2242
fn l2242_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2242_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2243
fn l2243_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2243_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 2244
fn l2244_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2244_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2245
fn l2245_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2245_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2246
fn l2246_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2246_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2247
fn l2247_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2247_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 2248
fn l2248_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2248_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2249
fn l2249_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2249_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2250
fn l2250_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2250_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2251

// Line 2252

// Line 2253

// Line 2254

// Line 2255

// Line 2256

// Line 2257

// Line 2258

// Line 2259
fn l2259_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2259_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2260
fn l2260_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2260_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2261
fn l2261_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2261_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2262
fn l2262_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2262_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2263
fn l2263_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2263_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2264
fn l2264_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2264_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2265
fn l2265_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2265_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2266
fn l2266_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2266_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2267
fn l2267_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2267_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2268
fn l2268_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2268_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2269
fn l2269_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2269_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2270
fn l2270_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2270_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2271
fn l2271_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2271_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 2272
fn l2272_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2272_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2273
fn l2273_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2273_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2274
fn l2274_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2274_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2275
fn l2275_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2275_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 2276
fn l2276_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2276_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2277
fn l2277_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2277_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2278
fn l2278_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2278_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2279
fn l2279_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2279_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 2280
fn l2280_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2280_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2281
fn l2281_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2281_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2282
fn l2282_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2282_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2283
fn l2283_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2283_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2284
fn l2284_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2284_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2285
fn l2285_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2285_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2286
fn l2286_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2286_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2287
fn l2287_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2287_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2288
fn l2288_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2288_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2289
fn l2289_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2289_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2290
fn l2290_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2290_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2291

// Line 2292

// Line 2293

// Line 2294

// Line 2295

// Line 2296

// Line 2297

// Line 2298

// Line 2299
fn l2299_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2299_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2300
fn l2300_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2300_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2301
fn l2301_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2301_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2302
fn l2302_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2302_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2303
fn l2303_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2303_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2304
fn l2304_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2304_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 2305
fn l2305_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2305_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2306
fn l2306_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2306_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2307
fn l2307_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2307_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2308
fn l2308_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2308_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 2309
fn l2309_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2309_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2310
fn l2310_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2310_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2311
fn l2311_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2311_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 2312
fn l2312_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2312_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 2313
fn l2313_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2313_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2314
fn l2314_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2314_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2315
fn l2315_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2315_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 2316
fn l2316_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2316_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2317
fn l2317_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2317_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2318
fn l2318_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2318_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2319
fn l2319_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2319_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 2320
fn l2320_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2320_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 2321
fn l2321_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2321_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2322
fn l2322_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2322_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2323
fn l2323_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2323_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2324
fn l2324_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2324_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2325
fn l2325_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2325_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2326
fn l2326_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2326_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2327
fn l2327_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2327_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 2328
fn l2328_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2328_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2329
fn l2329_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2329_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2330
fn l2330_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2330_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2331

// Line 2332

// Line 2333

// Line 2334

// Line 2335

// Line 2336

// Line 2337

// Line 2338

// Line 2339

// Line 2340

// Line 2341

// Line 2342

// Line 2343

// Line 2344

// Line 2345

// Line 2346

// Line 2347

// Line 2348

// Line 2349

// Line 2350

// Line 2351

// Line 2352

// Line 2353

// Line 2354

// Line 2355

// Line 2356

// Line 2357

// Line 2358

// Line 2359

// Line 2360

// Line 2361

// Line 2362

// Line 2363

// Line 2364

// Line 2365

// Line 2366

// Line 2367

// Line 2368

// Line 2369

// Line 2370

// Line 2371

// Line 2372

// Line 2373

// Line 2374

// Line 2375

// Line 2376

// Line 2377

// Line 2378

// Line 2379

// Line 2380

// Line 2381

// Line 2382

// Line 2383

// Line 2384

// Line 2385

// Line 2386

// Line 2387

// Line 2388

// Line 2389

// Line 2390

// Line 2391

// Line 2392

// Line 2393

// Line 2394

// Line 2395

// Line 2396

// Line 2397

// Line 2398

// Line 2399

// Line 2400

// Line 2401

// Line 2402

// Line 2403

// Line 2404

// Line 2405

// Line 2406

// Line 2407

// Line 2408

// Line 2409

// Line 2410

// Line 2411

// Line 2412

// Line 2413

// Line 2414

// Line 2415

// Line 2416

// Line 2417

// Line 2418

// Line 2419
fn l2419_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2419_action_invoke");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2420
fn l2420_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2420_action_invoke");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2421

// Line 2422
fn l2422_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2422_action_invoke");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022227587494850775 as f64);
}

// Line 2423

// Line 2424
fn l2424_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2424_action_invoke");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014916681462400413 as f64);
}

// Line 2425

// Line 2426
fn l2426_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2426_action_invoke");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, &vm_context);
    assert_eq!(result, 0.7071067811865476 as f64);
}

// Line 2427

// Line 2428
fn l2428_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2428_action_invoke");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2429

// Line 2430
fn l2430_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2430_action_invoke");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 2.5066282746310002 as f64);
}

// Line 2431

// Line 2432
fn l2432_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2432_action_invoke");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 13407807929942596000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2433

// Line 2434
fn l2434_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2434_action_invoke");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2435

// Line 2436

// Line 2437

// Line 2438

// Line 2439
fn l2439_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2439_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2440
fn l2440_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2440_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2441
fn l2441_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2441_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 2442
fn l2442_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2442_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2443
fn l2443_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2443_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 2444
fn l2444_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2444_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2445
fn l2445_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2445_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 2446
fn l2446_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2446_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2447
fn l2447_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2447_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 2448
fn l2448_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2448_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2449
fn l2449_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2449_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -7.0 as f64);
}

// Line 2450
fn l2450_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2450_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.0 as f64);
}

// Line 2451
fn l2451_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2451_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2452
fn l2452_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2452_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2453
fn l2453_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2453_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 2454
fn l2454_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2454_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2455

// Line 2456

// Line 2457

// Line 2458

// Line 2459
fn l2459_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2459_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2460
fn l2460_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2460_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2461
fn l2461_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2461_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2462
fn l2462_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2462_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2463
fn l2463_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2463_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2464
fn l2464_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2464_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2465
fn l2465_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2465_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2466
fn l2466_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2466_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2467
fn l2467_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2467_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 2468
fn l2468_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2468_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2469
fn l2469_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2469_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.0 as f64);
}

// Line 2470
fn l2470_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2470_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 7.0 as f64);
}

// Line 2471
fn l2471_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2471_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2472
fn l2472_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2472_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2473
fn l2473_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2473_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 2474
fn l2474_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2474_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2475

// Line 2476

// Line 2477

// Line 2478

// Line 2479
fn l2479_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2479_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2480
fn l2480_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2480_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2481
fn l2481_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2481_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2482
fn l2482_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2482_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2483
fn l2483_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2483_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2484
fn l2484_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2484_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2485
fn l2485_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2485_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2486
fn l2486_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2486_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2487
fn l2487_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2487_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 2488
fn l2488_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2488_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2489
fn l2489_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2489_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.0 as f64);
}

// Line 2490
fn l2490_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2490_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.0 as f64);
}

// Line 2491
fn l2491_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2491_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2492
fn l2492_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2492_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2493
fn l2493_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2493_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 2494
fn l2494_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2494_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2495

// Line 2496

// Line 2497

// Line 2498

// Line 2499
fn l2499_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2499_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2500
fn l2500_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2500_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2501
fn l2501_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2501_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2502
fn l2502_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2502_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2503
fn l2503_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2503_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2504
fn l2504_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2504_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2505
fn l2505_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2505_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 2506
fn l2506_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2506_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 2507
fn l2507_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2507_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 2508
fn l2508_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2508_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 2509
fn l2509_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2509_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.0 as f64);
}

// Line 2510
fn l2510_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2510_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.0 as f64);
}

// Line 2511
fn l2511_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2511_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2512
fn l2512_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2512_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 2513
fn l2513_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2513_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 2514
fn l2514_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l2514_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 2515

// Line 2516

// Line 2517

// Line 2518

#[test]
fn test_module_1() {
    let result_object = create_module_1();
    let vm_context = result_object.instance.generate_context();
    // We group the calls together
    l19_action_invoke(&result_object, &vm_context);
    l20_action_invoke(&result_object, &vm_context);
    l21_action_invoke(&result_object, &vm_context);
    l22_action_invoke(&result_object, &vm_context);
    l23_action_invoke(&result_object, &vm_context);
    l24_action_invoke(&result_object, &vm_context);
    l25_action_invoke(&result_object, &vm_context);
    l26_action_invoke(&result_object, &vm_context);
    l27_action_invoke(&result_object, &vm_context);
    l28_action_invoke(&result_object, &vm_context);
    l29_action_invoke(&result_object, &vm_context);
    l30_action_invoke(&result_object, &vm_context);
    l31_action_invoke(&result_object, &vm_context);
    l32_action_invoke(&result_object, &vm_context);
    l33_action_invoke(&result_object, &vm_context);
    l34_action_invoke(&result_object, &vm_context);
    l35_action_invoke(&result_object, &vm_context);
    l36_action_invoke(&result_object, &vm_context);
    l37_action_invoke(&result_object, &vm_context);
    l38_action_invoke(&result_object, &vm_context);
    l39_action_invoke(&result_object, &vm_context);
    l40_action_invoke(&result_object, &vm_context);
    l41_action_invoke(&result_object, &vm_context);
    l42_action_invoke(&result_object, &vm_context);
    l43_action_invoke(&result_object, &vm_context);
    l44_action_invoke(&result_object, &vm_context);
    l45_action_invoke(&result_object, &vm_context);
    l46_action_invoke(&result_object, &vm_context);
    l47_action_invoke(&result_object, &vm_context);
    l48_action_invoke(&result_object, &vm_context);
    l49_action_invoke(&result_object, &vm_context);
    l50_action_invoke(&result_object, &vm_context);
    l59_action_invoke(&result_object, &vm_context);
    l60_action_invoke(&result_object, &vm_context);
    l61_action_invoke(&result_object, &vm_context);
    l62_action_invoke(&result_object, &vm_context);
    l63_action_invoke(&result_object, &vm_context);
    l64_action_invoke(&result_object, &vm_context);
    l65_action_invoke(&result_object, &vm_context);
    l66_action_invoke(&result_object, &vm_context);
    l67_action_invoke(&result_object, &vm_context);
    l68_action_invoke(&result_object, &vm_context);
    l69_action_invoke(&result_object, &vm_context);
    l70_action_invoke(&result_object, &vm_context);
    l71_action_invoke(&result_object, &vm_context);
    l72_action_invoke(&result_object, &vm_context);
    l73_action_invoke(&result_object, &vm_context);
    l74_action_invoke(&result_object, &vm_context);
    l75_action_invoke(&result_object, &vm_context);
    l76_action_invoke(&result_object, &vm_context);
    l77_action_invoke(&result_object, &vm_context);
    l78_action_invoke(&result_object, &vm_context);
    l79_action_invoke(&result_object, &vm_context);
    l80_action_invoke(&result_object, &vm_context);
    l81_action_invoke(&result_object, &vm_context);
    l82_action_invoke(&result_object, &vm_context);
    l83_action_invoke(&result_object, &vm_context);
    l84_action_invoke(&result_object, &vm_context);
    l85_action_invoke(&result_object, &vm_context);
    l86_action_invoke(&result_object, &vm_context);
    l87_action_invoke(&result_object, &vm_context);
    l88_action_invoke(&result_object, &vm_context);
    l89_action_invoke(&result_object, &vm_context);
    l90_action_invoke(&result_object, &vm_context);
    l99_action_invoke(&result_object, &vm_context);
    l100_action_invoke(&result_object, &vm_context);
    l101_action_invoke(&result_object, &vm_context);
    l102_action_invoke(&result_object, &vm_context);
    l103_action_invoke(&result_object, &vm_context);
    l104_action_invoke(&result_object, &vm_context);
    l105_action_invoke(&result_object, &vm_context);
    l106_action_invoke(&result_object, &vm_context);
    l107_action_invoke(&result_object, &vm_context);
    l108_action_invoke(&result_object, &vm_context);
    l109_action_invoke(&result_object, &vm_context);
    l110_action_invoke(&result_object, &vm_context);
    l111_action_invoke(&result_object, &vm_context);
    l112_action_invoke(&result_object, &vm_context);
    l113_action_invoke(&result_object, &vm_context);
    l114_action_invoke(&result_object, &vm_context);
    l115_action_invoke(&result_object, &vm_context);
    l116_action_invoke(&result_object, &vm_context);
    l117_action_invoke(&result_object, &vm_context);
    l118_action_invoke(&result_object, &vm_context);
    l119_action_invoke(&result_object, &vm_context);
    l120_action_invoke(&result_object, &vm_context);
    l121_action_invoke(&result_object, &vm_context);
    l122_action_invoke(&result_object, &vm_context);
    l123_action_invoke(&result_object, &vm_context);
    l124_action_invoke(&result_object, &vm_context);
    l125_action_invoke(&result_object, &vm_context);
    l126_action_invoke(&result_object, &vm_context);
    l127_action_invoke(&result_object, &vm_context);
    l128_action_invoke(&result_object, &vm_context);
    l129_action_invoke(&result_object, &vm_context);
    l130_action_invoke(&result_object, &vm_context);
    l139_action_invoke(&result_object, &vm_context);
    l140_action_invoke(&result_object, &vm_context);
    l141_action_invoke(&result_object, &vm_context);
    l142_action_invoke(&result_object, &vm_context);
    l143_action_invoke(&result_object, &vm_context);
    l144_action_invoke(&result_object, &vm_context);
    l145_action_invoke(&result_object, &vm_context);
    l146_action_invoke(&result_object, &vm_context);
    l147_action_invoke(&result_object, &vm_context);
    l148_action_invoke(&result_object, &vm_context);
    l149_action_invoke(&result_object, &vm_context);
    l150_action_invoke(&result_object, &vm_context);
    l151_action_invoke(&result_object, &vm_context);
    l152_action_invoke(&result_object, &vm_context);
    l153_action_invoke(&result_object, &vm_context);
    l154_action_invoke(&result_object, &vm_context);
    l155_action_invoke(&result_object, &vm_context);
    l156_action_invoke(&result_object, &vm_context);
    l157_action_invoke(&result_object, &vm_context);
    l158_action_invoke(&result_object, &vm_context);
    l159_action_invoke(&result_object, &vm_context);
    l160_action_invoke(&result_object, &vm_context);
    l161_action_invoke(&result_object, &vm_context);
    l162_action_invoke(&result_object, &vm_context);
    l163_action_invoke(&result_object, &vm_context);
    l164_action_invoke(&result_object, &vm_context);
    l165_action_invoke(&result_object, &vm_context);
    l166_action_invoke(&result_object, &vm_context);
    l167_action_invoke(&result_object, &vm_context);
    l168_action_invoke(&result_object, &vm_context);
    l169_action_invoke(&result_object, &vm_context);
    l170_action_invoke(&result_object, &vm_context);
    l179_action_invoke(&result_object, &vm_context);
    l180_action_invoke(&result_object, &vm_context);
    l181_action_invoke(&result_object, &vm_context);
    l182_action_invoke(&result_object, &vm_context);
    l183_action_invoke(&result_object, &vm_context);
    l184_action_invoke(&result_object, &vm_context);
    l185_action_invoke(&result_object, &vm_context);
    l186_action_invoke(&result_object, &vm_context);
    l187_action_invoke(&result_object, &vm_context);
    l188_action_invoke(&result_object, &vm_context);
    l189_action_invoke(&result_object, &vm_context);
    l190_action_invoke(&result_object, &vm_context);
    l191_action_invoke(&result_object, &vm_context);
    l192_action_invoke(&result_object, &vm_context);
    l193_action_invoke(&result_object, &vm_context);
    l194_action_invoke(&result_object, &vm_context);
    l195_action_invoke(&result_object, &vm_context);
    l196_action_invoke(&result_object, &vm_context);
    l197_action_invoke(&result_object, &vm_context);
    l198_action_invoke(&result_object, &vm_context);
    l199_action_invoke(&result_object, &vm_context);
    l200_action_invoke(&result_object, &vm_context);
    l201_action_invoke(&result_object, &vm_context);
    l202_action_invoke(&result_object, &vm_context);
    l203_action_invoke(&result_object, &vm_context);
    l204_action_invoke(&result_object, &vm_context);
    l205_action_invoke(&result_object, &vm_context);
    l206_action_invoke(&result_object, &vm_context);
    l207_action_invoke(&result_object, &vm_context);
    l208_action_invoke(&result_object, &vm_context);
    l209_action_invoke(&result_object, &vm_context);
    l210_action_invoke(&result_object, &vm_context);
    l219_action_invoke(&result_object, &vm_context);
    l220_action_invoke(&result_object, &vm_context);
    l221_action_invoke(&result_object, &vm_context);
    l222_action_invoke(&result_object, &vm_context);
    l223_action_invoke(&result_object, &vm_context);
    l224_action_invoke(&result_object, &vm_context);
    l225_action_invoke(&result_object, &vm_context);
    l226_action_invoke(&result_object, &vm_context);
    l227_action_invoke(&result_object, &vm_context);
    l228_action_invoke(&result_object, &vm_context);
    l229_action_invoke(&result_object, &vm_context);
    l230_action_invoke(&result_object, &vm_context);
    l231_action_invoke(&result_object, &vm_context);
    l232_action_invoke(&result_object, &vm_context);
    l233_action_invoke(&result_object, &vm_context);
    l234_action_invoke(&result_object, &vm_context);
    l235_action_invoke(&result_object, &vm_context);
    l236_action_invoke(&result_object, &vm_context);
    l237_action_invoke(&result_object, &vm_context);
    l238_action_invoke(&result_object, &vm_context);
    l239_action_invoke(&result_object, &vm_context);
    l240_action_invoke(&result_object, &vm_context);
    l241_action_invoke(&result_object, &vm_context);
    l242_action_invoke(&result_object, &vm_context);
    l243_action_invoke(&result_object, &vm_context);
    l244_action_invoke(&result_object, &vm_context);
    l245_action_invoke(&result_object, &vm_context);
    l246_action_invoke(&result_object, &vm_context);
    l247_action_invoke(&result_object, &vm_context);
    l248_action_invoke(&result_object, &vm_context);
    l249_action_invoke(&result_object, &vm_context);
    l250_action_invoke(&result_object, &vm_context);
    l259_action_invoke(&result_object, &vm_context);
    l260_action_invoke(&result_object, &vm_context);
    l261_action_invoke(&result_object, &vm_context);
    l262_action_invoke(&result_object, &vm_context);
    l263_action_invoke(&result_object, &vm_context);
    l264_action_invoke(&result_object, &vm_context);
    l265_action_invoke(&result_object, &vm_context);
    l266_action_invoke(&result_object, &vm_context);
    l267_action_invoke(&result_object, &vm_context);
    l268_action_invoke(&result_object, &vm_context);
    l269_action_invoke(&result_object, &vm_context);
    l270_action_invoke(&result_object, &vm_context);
    l271_action_invoke(&result_object, &vm_context);
    l272_action_invoke(&result_object, &vm_context);
    l273_action_invoke(&result_object, &vm_context);
    l274_action_invoke(&result_object, &vm_context);
    l275_action_invoke(&result_object, &vm_context);
    l276_action_invoke(&result_object, &vm_context);
    l277_action_invoke(&result_object, &vm_context);
    l278_action_invoke(&result_object, &vm_context);
    l279_action_invoke(&result_object, &vm_context);
    l280_action_invoke(&result_object, &vm_context);
    l281_action_invoke(&result_object, &vm_context);
    l282_action_invoke(&result_object, &vm_context);
    l283_action_invoke(&result_object, &vm_context);
    l284_action_invoke(&result_object, &vm_context);
    l285_action_invoke(&result_object, &vm_context);
    l286_action_invoke(&result_object, &vm_context);
    l287_action_invoke(&result_object, &vm_context);
    l288_action_invoke(&result_object, &vm_context);
    l289_action_invoke(&result_object, &vm_context);
    l290_action_invoke(&result_object, &vm_context);
    l299_action_invoke(&result_object, &vm_context);
    l300_action_invoke(&result_object, &vm_context);
    l301_action_invoke(&result_object, &vm_context);
    l302_action_invoke(&result_object, &vm_context);
    l303_action_invoke(&result_object, &vm_context);
    l304_action_invoke(&result_object, &vm_context);
    l305_action_invoke(&result_object, &vm_context);
    l306_action_invoke(&result_object, &vm_context);
    l307_action_invoke(&result_object, &vm_context);
    l308_action_invoke(&result_object, &vm_context);
    l309_action_invoke(&result_object, &vm_context);
    l310_action_invoke(&result_object, &vm_context);
    l311_action_invoke(&result_object, &vm_context);
    l312_action_invoke(&result_object, &vm_context);
    l313_action_invoke(&result_object, &vm_context);
    l314_action_invoke(&result_object, &vm_context);
    l315_action_invoke(&result_object, &vm_context);
    l316_action_invoke(&result_object, &vm_context);
    l317_action_invoke(&result_object, &vm_context);
    l318_action_invoke(&result_object, &vm_context);
    l319_action_invoke(&result_object, &vm_context);
    l320_action_invoke(&result_object, &vm_context);
    l321_action_invoke(&result_object, &vm_context);
    l322_action_invoke(&result_object, &vm_context);
    l323_action_invoke(&result_object, &vm_context);
    l324_action_invoke(&result_object, &vm_context);
    l325_action_invoke(&result_object, &vm_context);
    l326_action_invoke(&result_object, &vm_context);
    l327_action_invoke(&result_object, &vm_context);
    l330_action_invoke(&result_object, &vm_context);
    l419_action_invoke(&result_object, &vm_context);
    l420_action_invoke(&result_object, &vm_context);
    l421_action_invoke(&result_object, &vm_context);
    l422_action_invoke(&result_object, &vm_context);
    l423_action_invoke(&result_object, &vm_context);
    l424_action_invoke(&result_object, &vm_context);
    l425_action_invoke(&result_object, &vm_context);
    l426_action_invoke(&result_object, &vm_context);
    l427_action_invoke(&result_object, &vm_context);
    l428_action_invoke(&result_object, &vm_context);
    l429_action_invoke(&result_object, &vm_context);
    l430_action_invoke(&result_object, &vm_context);
    l431_action_invoke(&result_object, &vm_context);
    l432_action_invoke(&result_object, &vm_context);
    l433_action_invoke(&result_object, &vm_context);
    l434_action_invoke(&result_object, &vm_context);
    l435_action_invoke(&result_object, &vm_context);
    l436_action_invoke(&result_object, &vm_context);
    l437_action_invoke(&result_object, &vm_context);
    l438_action_invoke(&result_object, &vm_context);
    l439_action_invoke(&result_object, &vm_context);
    l440_action_invoke(&result_object, &vm_context);
    l441_action_invoke(&result_object, &vm_context);
    l442_action_invoke(&result_object, &vm_context);
    l443_action_invoke(&result_object, &vm_context);
    l444_action_invoke(&result_object, &vm_context);
    l445_action_invoke(&result_object, &vm_context);
    l446_action_invoke(&result_object, &vm_context);
    l447_action_invoke(&result_object, &vm_context);
    l448_action_invoke(&result_object, &vm_context);
    l449_action_invoke(&result_object, &vm_context);
    l450_action_invoke(&result_object, &vm_context);
    l459_action_invoke(&result_object, &vm_context);
    l460_action_invoke(&result_object, &vm_context);
    l461_action_invoke(&result_object, &vm_context);
    l462_action_invoke(&result_object, &vm_context);
    l463_action_invoke(&result_object, &vm_context);
    l464_action_invoke(&result_object, &vm_context);
    l465_action_invoke(&result_object, &vm_context);
    l466_action_invoke(&result_object, &vm_context);
    l467_action_invoke(&result_object, &vm_context);
    l468_action_invoke(&result_object, &vm_context);
    l469_action_invoke(&result_object, &vm_context);
    l470_action_invoke(&result_object, &vm_context);
    l471_action_invoke(&result_object, &vm_context);
    l472_action_invoke(&result_object, &vm_context);
    l473_action_invoke(&result_object, &vm_context);
    l474_action_invoke(&result_object, &vm_context);
    l475_action_invoke(&result_object, &vm_context);
    l476_action_invoke(&result_object, &vm_context);
    l477_action_invoke(&result_object, &vm_context);
    l478_action_invoke(&result_object, &vm_context);
    l479_action_invoke(&result_object, &vm_context);
    l480_action_invoke(&result_object, &vm_context);
    l481_action_invoke(&result_object, &vm_context);
    l482_action_invoke(&result_object, &vm_context);
    l483_action_invoke(&result_object, &vm_context);
    l484_action_invoke(&result_object, &vm_context);
    l485_action_invoke(&result_object, &vm_context);
    l486_action_invoke(&result_object, &vm_context);
    l487_action_invoke(&result_object, &vm_context);
    l488_action_invoke(&result_object, &vm_context);
    l489_action_invoke(&result_object, &vm_context);
    l490_action_invoke(&result_object, &vm_context);
    l499_action_invoke(&result_object, &vm_context);
    l500_action_invoke(&result_object, &vm_context);
    l501_action_invoke(&result_object, &vm_context);
    l502_action_invoke(&result_object, &vm_context);
    l503_action_invoke(&result_object, &vm_context);
    l504_action_invoke(&result_object, &vm_context);
    l505_action_invoke(&result_object, &vm_context);
    l506_action_invoke(&result_object, &vm_context);
    l507_action_invoke(&result_object, &vm_context);
    l508_action_invoke(&result_object, &vm_context);
    l509_action_invoke(&result_object, &vm_context);
    l510_action_invoke(&result_object, &vm_context);
    l511_action_invoke(&result_object, &vm_context);
    l512_action_invoke(&result_object, &vm_context);
    l513_action_invoke(&result_object, &vm_context);
    l514_action_invoke(&result_object, &vm_context);
    l515_action_invoke(&result_object, &vm_context);
    l516_action_invoke(&result_object, &vm_context);
    l517_action_invoke(&result_object, &vm_context);
    l518_action_invoke(&result_object, &vm_context);
    l519_action_invoke(&result_object, &vm_context);
    l520_action_invoke(&result_object, &vm_context);
    l521_action_invoke(&result_object, &vm_context);
    l522_action_invoke(&result_object, &vm_context);
    l523_action_invoke(&result_object, &vm_context);
    l524_action_invoke(&result_object, &vm_context);
    l525_action_invoke(&result_object, &vm_context);
    l526_action_invoke(&result_object, &vm_context);
    l527_action_invoke(&result_object, &vm_context);
    l528_action_invoke(&result_object, &vm_context);
    l529_action_invoke(&result_object, &vm_context);
    l530_action_invoke(&result_object, &vm_context);
    l539_action_invoke(&result_object, &vm_context);
    l540_action_invoke(&result_object, &vm_context);
    l541_action_invoke(&result_object, &vm_context);
    l542_action_invoke(&result_object, &vm_context);
    l543_action_invoke(&result_object, &vm_context);
    l544_action_invoke(&result_object, &vm_context);
    l545_action_invoke(&result_object, &vm_context);
    l546_action_invoke(&result_object, &vm_context);
    l547_action_invoke(&result_object, &vm_context);
    l548_action_invoke(&result_object, &vm_context);
    l549_action_invoke(&result_object, &vm_context);
    l550_action_invoke(&result_object, &vm_context);
    l551_action_invoke(&result_object, &vm_context);
    l552_action_invoke(&result_object, &vm_context);
    l553_action_invoke(&result_object, &vm_context);
    l554_action_invoke(&result_object, &vm_context);
    l555_action_invoke(&result_object, &vm_context);
    l556_action_invoke(&result_object, &vm_context);
    l557_action_invoke(&result_object, &vm_context);
    l558_action_invoke(&result_object, &vm_context);
    l559_action_invoke(&result_object, &vm_context);
    l560_action_invoke(&result_object, &vm_context);
    l561_action_invoke(&result_object, &vm_context);
    l562_action_invoke(&result_object, &vm_context);
    l563_action_invoke(&result_object, &vm_context);
    l564_action_invoke(&result_object, &vm_context);
    l565_action_invoke(&result_object, &vm_context);
    l566_action_invoke(&result_object, &vm_context);
    l567_action_invoke(&result_object, &vm_context);
    l568_action_invoke(&result_object, &vm_context);
    l569_action_invoke(&result_object, &vm_context);
    l570_action_invoke(&result_object, &vm_context);
    l579_action_invoke(&result_object, &vm_context);
    l580_action_invoke(&result_object, &vm_context);
    l581_action_invoke(&result_object, &vm_context);
    l582_action_invoke(&result_object, &vm_context);
    l583_action_invoke(&result_object, &vm_context);
    l584_action_invoke(&result_object, &vm_context);
    l585_action_invoke(&result_object, &vm_context);
    l586_action_invoke(&result_object, &vm_context);
    l587_action_invoke(&result_object, &vm_context);
    l588_action_invoke(&result_object, &vm_context);
    l589_action_invoke(&result_object, &vm_context);
    l590_action_invoke(&result_object, &vm_context);
    l591_action_invoke(&result_object, &vm_context);
    l592_action_invoke(&result_object, &vm_context);
    l593_action_invoke(&result_object, &vm_context);
    l594_action_invoke(&result_object, &vm_context);
    l595_action_invoke(&result_object, &vm_context);
    l596_action_invoke(&result_object, &vm_context);
    l597_action_invoke(&result_object, &vm_context);
    l598_action_invoke(&result_object, &vm_context);
    l599_action_invoke(&result_object, &vm_context);
    l600_action_invoke(&result_object, &vm_context);
    l601_action_invoke(&result_object, &vm_context);
    l602_action_invoke(&result_object, &vm_context);
    l603_action_invoke(&result_object, &vm_context);
    l604_action_invoke(&result_object, &vm_context);
    l605_action_invoke(&result_object, &vm_context);
    l606_action_invoke(&result_object, &vm_context);
    l607_action_invoke(&result_object, &vm_context);
    l608_action_invoke(&result_object, &vm_context);
    l609_action_invoke(&result_object, &vm_context);
    l610_action_invoke(&result_object, &vm_context);
    l619_action_invoke(&result_object, &vm_context);
    l620_action_invoke(&result_object, &vm_context);
    l621_action_invoke(&result_object, &vm_context);
    l622_action_invoke(&result_object, &vm_context);
    l623_action_invoke(&result_object, &vm_context);
    l624_action_invoke(&result_object, &vm_context);
    l625_action_invoke(&result_object, &vm_context);
    l626_action_invoke(&result_object, &vm_context);
    l627_action_invoke(&result_object, &vm_context);
    l628_action_invoke(&result_object, &vm_context);
    l629_action_invoke(&result_object, &vm_context);
    l630_action_invoke(&result_object, &vm_context);
    l631_action_invoke(&result_object, &vm_context);
    l632_action_invoke(&result_object, &vm_context);
    l633_action_invoke(&result_object, &vm_context);
    l634_action_invoke(&result_object, &vm_context);
    l635_action_invoke(&result_object, &vm_context);
    l636_action_invoke(&result_object, &vm_context);
    l637_action_invoke(&result_object, &vm_context);
    l638_action_invoke(&result_object, &vm_context);
    l639_action_invoke(&result_object, &vm_context);
    l640_action_invoke(&result_object, &vm_context);
    l641_action_invoke(&result_object, &vm_context);
    l642_action_invoke(&result_object, &vm_context);
    l643_action_invoke(&result_object, &vm_context);
    l644_action_invoke(&result_object, &vm_context);
    l645_action_invoke(&result_object, &vm_context);
    l646_action_invoke(&result_object, &vm_context);
    l647_action_invoke(&result_object, &vm_context);
    l648_action_invoke(&result_object, &vm_context);
    l649_action_invoke(&result_object, &vm_context);
    l650_action_invoke(&result_object, &vm_context);
    l659_action_invoke(&result_object, &vm_context);
    l660_action_invoke(&result_object, &vm_context);
    l661_action_invoke(&result_object, &vm_context);
    l662_action_invoke(&result_object, &vm_context);
    l663_action_invoke(&result_object, &vm_context);
    l664_action_invoke(&result_object, &vm_context);
    l665_action_invoke(&result_object, &vm_context);
    l666_action_invoke(&result_object, &vm_context);
    l667_action_invoke(&result_object, &vm_context);
    l668_action_invoke(&result_object, &vm_context);
    l669_action_invoke(&result_object, &vm_context);
    l670_action_invoke(&result_object, &vm_context);
    l671_action_invoke(&result_object, &vm_context);
    l672_action_invoke(&result_object, &vm_context);
    l673_action_invoke(&result_object, &vm_context);
    l674_action_invoke(&result_object, &vm_context);
    l675_action_invoke(&result_object, &vm_context);
    l676_action_invoke(&result_object, &vm_context);
    l677_action_invoke(&result_object, &vm_context);
    l678_action_invoke(&result_object, &vm_context);
    l679_action_invoke(&result_object, &vm_context);
    l680_action_invoke(&result_object, &vm_context);
    l681_action_invoke(&result_object, &vm_context);
    l682_action_invoke(&result_object, &vm_context);
    l683_action_invoke(&result_object, &vm_context);
    l684_action_invoke(&result_object, &vm_context);
    l685_action_invoke(&result_object, &vm_context);
    l686_action_invoke(&result_object, &vm_context);
    l687_action_invoke(&result_object, &vm_context);
    l688_action_invoke(&result_object, &vm_context);
    l689_action_invoke(&result_object, &vm_context);
    l690_action_invoke(&result_object, &vm_context);
    l699_action_invoke(&result_object, &vm_context);
    l700_action_invoke(&result_object, &vm_context);
    l701_action_invoke(&result_object, &vm_context);
    l702_action_invoke(&result_object, &vm_context);
    l703_action_invoke(&result_object, &vm_context);
    l704_action_invoke(&result_object, &vm_context);
    l705_action_invoke(&result_object, &vm_context);
    l706_action_invoke(&result_object, &vm_context);
    l707_action_invoke(&result_object, &vm_context);
    l708_action_invoke(&result_object, &vm_context);
    l709_action_invoke(&result_object, &vm_context);
    l710_action_invoke(&result_object, &vm_context);
    l711_action_invoke(&result_object, &vm_context);
    l712_action_invoke(&result_object, &vm_context);
    l713_action_invoke(&result_object, &vm_context);
    l714_action_invoke(&result_object, &vm_context);
    l715_action_invoke(&result_object, &vm_context);
    l716_action_invoke(&result_object, &vm_context);
    l717_action_invoke(&result_object, &vm_context);
    l718_action_invoke(&result_object, &vm_context);
    l719_action_invoke(&result_object, &vm_context);
    l720_action_invoke(&result_object, &vm_context);
    l721_action_invoke(&result_object, &vm_context);
    l722_action_invoke(&result_object, &vm_context);
    l723_action_invoke(&result_object, &vm_context);
    l724_action_invoke(&result_object, &vm_context);
    l725_action_invoke(&result_object, &vm_context);
    l726_action_invoke(&result_object, &vm_context);
    l728_action_invoke(&result_object, &vm_context);
    l729_action_invoke(&result_object, &vm_context);
    l819_action_invoke(&result_object, &vm_context);
    l820_action_invoke(&result_object, &vm_context);
    l821_action_invoke(&result_object, &vm_context);
    l822_action_invoke(&result_object, &vm_context);
    l823_action_invoke(&result_object, &vm_context);
    l824_action_invoke(&result_object, &vm_context);
    l825_action_invoke(&result_object, &vm_context);
    l826_action_invoke(&result_object, &vm_context);
    l827_action_invoke(&result_object, &vm_context);
    l828_action_invoke(&result_object, &vm_context);
    l829_action_invoke(&result_object, &vm_context);
    l830_action_invoke(&result_object, &vm_context);
    l831_action_invoke(&result_object, &vm_context);
    l832_action_invoke(&result_object, &vm_context);
    l833_action_invoke(&result_object, &vm_context);
    l834_action_invoke(&result_object, &vm_context);
    l835_action_invoke(&result_object, &vm_context);
    l836_action_invoke(&result_object, &vm_context);
    l837_action_invoke(&result_object, &vm_context);
    l838_action_invoke(&result_object, &vm_context);
    l839_action_invoke(&result_object, &vm_context);
    l840_action_invoke(&result_object, &vm_context);
    l841_action_invoke(&result_object, &vm_context);
    l842_action_invoke(&result_object, &vm_context);
    l843_action_invoke(&result_object, &vm_context);
    l844_action_invoke(&result_object, &vm_context);
    l845_action_invoke(&result_object, &vm_context);
    l846_action_invoke(&result_object, &vm_context);
    l859_action_invoke(&result_object, &vm_context);
    l860_action_invoke(&result_object, &vm_context);
    l861_action_invoke(&result_object, &vm_context);
    l862_action_invoke(&result_object, &vm_context);
    l863_action_invoke(&result_object, &vm_context);
    l864_action_invoke(&result_object, &vm_context);
    l865_action_invoke(&result_object, &vm_context);
    l866_action_invoke(&result_object, &vm_context);
    l867_action_invoke(&result_object, &vm_context);
    l868_action_invoke(&result_object, &vm_context);
    l869_action_invoke(&result_object, &vm_context);
    l870_action_invoke(&result_object, &vm_context);
    l871_action_invoke(&result_object, &vm_context);
    l872_action_invoke(&result_object, &vm_context);
    l873_action_invoke(&result_object, &vm_context);
    l874_action_invoke(&result_object, &vm_context);
    l875_action_invoke(&result_object, &vm_context);
    l876_action_invoke(&result_object, &vm_context);
    l877_action_invoke(&result_object, &vm_context);
    l878_action_invoke(&result_object, &vm_context);
    l879_action_invoke(&result_object, &vm_context);
    l880_action_invoke(&result_object, &vm_context);
    l881_action_invoke(&result_object, &vm_context);
    l882_action_invoke(&result_object, &vm_context);
    l883_action_invoke(&result_object, &vm_context);
    l884_action_invoke(&result_object, &vm_context);
    l885_action_invoke(&result_object, &vm_context);
    l886_action_invoke(&result_object, &vm_context);
    l887_action_invoke(&result_object, &vm_context);
    l888_action_invoke(&result_object, &vm_context);
    l889_action_invoke(&result_object, &vm_context);
    l890_action_invoke(&result_object, &vm_context);
    l899_action_invoke(&result_object, &vm_context);
    l900_action_invoke(&result_object, &vm_context);
    l901_action_invoke(&result_object, &vm_context);
    l902_action_invoke(&result_object, &vm_context);
    l903_action_invoke(&result_object, &vm_context);
    l904_action_invoke(&result_object, &vm_context);
    l905_action_invoke(&result_object, &vm_context);
    l906_action_invoke(&result_object, &vm_context);
    l907_action_invoke(&result_object, &vm_context);
    l908_action_invoke(&result_object, &vm_context);
    l909_action_invoke(&result_object, &vm_context);
    l910_action_invoke(&result_object, &vm_context);
    l911_action_invoke(&result_object, &vm_context);
    l912_action_invoke(&result_object, &vm_context);
    l913_action_invoke(&result_object, &vm_context);
    l914_action_invoke(&result_object, &vm_context);
    l915_action_invoke(&result_object, &vm_context);
    l916_action_invoke(&result_object, &vm_context);
    l917_action_invoke(&result_object, &vm_context);
    l918_action_invoke(&result_object, &vm_context);
    l919_action_invoke(&result_object, &vm_context);
    l920_action_invoke(&result_object, &vm_context);
    l921_action_invoke(&result_object, &vm_context);
    l922_action_invoke(&result_object, &vm_context);
    l923_action_invoke(&result_object, &vm_context);
    l924_action_invoke(&result_object, &vm_context);
    l925_action_invoke(&result_object, &vm_context);
    l926_action_invoke(&result_object, &vm_context);
    l927_action_invoke(&result_object, &vm_context);
    l928_action_invoke(&result_object, &vm_context);
    l929_action_invoke(&result_object, &vm_context);
    l930_action_invoke(&result_object, &vm_context);
    l939_action_invoke(&result_object, &vm_context);
    l940_action_invoke(&result_object, &vm_context);
    l941_action_invoke(&result_object, &vm_context);
    l942_action_invoke(&result_object, &vm_context);
    l943_action_invoke(&result_object, &vm_context);
    l944_action_invoke(&result_object, &vm_context);
    l945_action_invoke(&result_object, &vm_context);
    l946_action_invoke(&result_object, &vm_context);
    l947_action_invoke(&result_object, &vm_context);
    l948_action_invoke(&result_object, &vm_context);
    l949_action_invoke(&result_object, &vm_context);
    l950_action_invoke(&result_object, &vm_context);
    l951_action_invoke(&result_object, &vm_context);
    l952_action_invoke(&result_object, &vm_context);
    l953_action_invoke(&result_object, &vm_context);
    l954_action_invoke(&result_object, &vm_context);
    l955_action_invoke(&result_object, &vm_context);
    l956_action_invoke(&result_object, &vm_context);
    l957_action_invoke(&result_object, &vm_context);
    l958_action_invoke(&result_object, &vm_context);
    l959_action_invoke(&result_object, &vm_context);
    l960_action_invoke(&result_object, &vm_context);
    l961_action_invoke(&result_object, &vm_context);
    l962_action_invoke(&result_object, &vm_context);
    l963_action_invoke(&result_object, &vm_context);
    l964_action_invoke(&result_object, &vm_context);
    l965_action_invoke(&result_object, &vm_context);
    l966_action_invoke(&result_object, &vm_context);
    l967_action_invoke(&result_object, &vm_context);
    l968_action_invoke(&result_object, &vm_context);
    l969_action_invoke(&result_object, &vm_context);
    l970_action_invoke(&result_object, &vm_context);
    l979_action_invoke(&result_object, &vm_context);
    l980_action_invoke(&result_object, &vm_context);
    l981_action_invoke(&result_object, &vm_context);
    l982_action_invoke(&result_object, &vm_context);
    l983_action_invoke(&result_object, &vm_context);
    l984_action_invoke(&result_object, &vm_context);
    l985_action_invoke(&result_object, &vm_context);
    l986_action_invoke(&result_object, &vm_context);
    l987_action_invoke(&result_object, &vm_context);
    l988_action_invoke(&result_object, &vm_context);
    l989_action_invoke(&result_object, &vm_context);
    l990_action_invoke(&result_object, &vm_context);
    l991_action_invoke(&result_object, &vm_context);
    l992_action_invoke(&result_object, &vm_context);
    l993_action_invoke(&result_object, &vm_context);
    l994_action_invoke(&result_object, &vm_context);
    l995_action_invoke(&result_object, &vm_context);
    l996_action_invoke(&result_object, &vm_context);
    l997_action_invoke(&result_object, &vm_context);
    l998_action_invoke(&result_object, &vm_context);
    l999_action_invoke(&result_object, &vm_context);
    l1000_action_invoke(&result_object, &vm_context);
    l1001_action_invoke(&result_object, &vm_context);
    l1002_action_invoke(&result_object, &vm_context);
    l1003_action_invoke(&result_object, &vm_context);
    l1004_action_invoke(&result_object, &vm_context);
    l1005_action_invoke(&result_object, &vm_context);
    l1006_action_invoke(&result_object, &vm_context);
    l1007_action_invoke(&result_object, &vm_context);
    l1008_action_invoke(&result_object, &vm_context);
    l1009_action_invoke(&result_object, &vm_context);
    l1010_action_invoke(&result_object, &vm_context);
    l1019_action_invoke(&result_object, &vm_context);
    l1020_action_invoke(&result_object, &vm_context);
    l1021_action_invoke(&result_object, &vm_context);
    l1022_action_invoke(&result_object, &vm_context);
    l1023_action_invoke(&result_object, &vm_context);
    l1024_action_invoke(&result_object, &vm_context);
    l1025_action_invoke(&result_object, &vm_context);
    l1026_action_invoke(&result_object, &vm_context);
    l1027_action_invoke(&result_object, &vm_context);
    l1028_action_invoke(&result_object, &vm_context);
    l1029_action_invoke(&result_object, &vm_context);
    l1030_action_invoke(&result_object, &vm_context);
    l1031_action_invoke(&result_object, &vm_context);
    l1032_action_invoke(&result_object, &vm_context);
    l1033_action_invoke(&result_object, &vm_context);
    l1034_action_invoke(&result_object, &vm_context);
    l1035_action_invoke(&result_object, &vm_context);
    l1036_action_invoke(&result_object, &vm_context);
    l1037_action_invoke(&result_object, &vm_context);
    l1038_action_invoke(&result_object, &vm_context);
    l1039_action_invoke(&result_object, &vm_context);
    l1040_action_invoke(&result_object, &vm_context);
    l1041_action_invoke(&result_object, &vm_context);
    l1042_action_invoke(&result_object, &vm_context);
    l1043_action_invoke(&result_object, &vm_context);
    l1044_action_invoke(&result_object, &vm_context);
    l1045_action_invoke(&result_object, &vm_context);
    l1046_action_invoke(&result_object, &vm_context);
    l1047_action_invoke(&result_object, &vm_context);
    l1048_action_invoke(&result_object, &vm_context);
    l1049_action_invoke(&result_object, &vm_context);
    l1050_action_invoke(&result_object, &vm_context);
    l1059_action_invoke(&result_object, &vm_context);
    l1060_action_invoke(&result_object, &vm_context);
    l1061_action_invoke(&result_object, &vm_context);
    l1062_action_invoke(&result_object, &vm_context);
    l1063_action_invoke(&result_object, &vm_context);
    l1064_action_invoke(&result_object, &vm_context);
    l1065_action_invoke(&result_object, &vm_context);
    l1066_action_invoke(&result_object, &vm_context);
    l1067_action_invoke(&result_object, &vm_context);
    l1068_action_invoke(&result_object, &vm_context);
    l1069_action_invoke(&result_object, &vm_context);
    l1070_action_invoke(&result_object, &vm_context);
    l1071_action_invoke(&result_object, &vm_context);
    l1072_action_invoke(&result_object, &vm_context);
    l1073_action_invoke(&result_object, &vm_context);
    l1074_action_invoke(&result_object, &vm_context);
    l1075_action_invoke(&result_object, &vm_context);
    l1076_action_invoke(&result_object, &vm_context);
    l1077_action_invoke(&result_object, &vm_context);
    l1078_action_invoke(&result_object, &vm_context);
    l1079_action_invoke(&result_object, &vm_context);
    l1080_action_invoke(&result_object, &vm_context);
    l1081_action_invoke(&result_object, &vm_context);
    l1082_action_invoke(&result_object, &vm_context);
    l1083_action_invoke(&result_object, &vm_context);
    l1084_action_invoke(&result_object, &vm_context);
    l1085_action_invoke(&result_object, &vm_context);
    l1086_action_invoke(&result_object, &vm_context);
    l1087_action_invoke(&result_object, &vm_context);
    l1088_action_invoke(&result_object, &vm_context);
    l1089_action_invoke(&result_object, &vm_context);
    l1090_action_invoke(&result_object, &vm_context);
    l1103_action_invoke(&result_object, &vm_context);
    l1104_action_invoke(&result_object, &vm_context);
    l1105_action_invoke(&result_object, &vm_context);
    l1106_action_invoke(&result_object, &vm_context);
    l1107_action_invoke(&result_object, &vm_context);
    l1108_action_invoke(&result_object, &vm_context);
    l1109_action_invoke(&result_object, &vm_context);
    l1110_action_invoke(&result_object, &vm_context);
    l1111_action_invoke(&result_object, &vm_context);
    l1112_action_invoke(&result_object, &vm_context);
    l1113_action_invoke(&result_object, &vm_context);
    l1114_action_invoke(&result_object, &vm_context);
    l1115_action_invoke(&result_object, &vm_context);
    l1116_action_invoke(&result_object, &vm_context);
    l1117_action_invoke(&result_object, &vm_context);
    l1118_action_invoke(&result_object, &vm_context);
    l1119_action_invoke(&result_object, &vm_context);
    l1120_action_invoke(&result_object, &vm_context);
    l1121_action_invoke(&result_object, &vm_context);
    l1122_action_invoke(&result_object, &vm_context);
    l1123_action_invoke(&result_object, &vm_context);
    l1124_action_invoke(&result_object, &vm_context);
    l1125_action_invoke(&result_object, &vm_context);
    l1126_action_invoke(&result_object, &vm_context);
    l1127_action_invoke(&result_object, &vm_context);
    l1128_action_invoke(&result_object, &vm_context);
    l1129_action_invoke(&result_object, &vm_context);
    l1130_action_invoke(&result_object, &vm_context);
    l1223_action_invoke(&result_object, &vm_context);
    l1224_action_invoke(&result_object, &vm_context);
    l1225_action_invoke(&result_object, &vm_context);
    l1226_action_invoke(&result_object, &vm_context);
    l1227_action_invoke(&result_object, &vm_context);
    l1228_action_invoke(&result_object, &vm_context);
    l1229_action_invoke(&result_object, &vm_context);
    l1230_action_invoke(&result_object, &vm_context);
    l1231_action_invoke(&result_object, &vm_context);
    l1232_action_invoke(&result_object, &vm_context);
    l1233_action_invoke(&result_object, &vm_context);
    l1234_action_invoke(&result_object, &vm_context);
    l1235_action_invoke(&result_object, &vm_context);
    l1236_action_invoke(&result_object, &vm_context);
    l1237_action_invoke(&result_object, &vm_context);
    l1238_action_invoke(&result_object, &vm_context);
    l1239_action_invoke(&result_object, &vm_context);
    l1240_action_invoke(&result_object, &vm_context);
    l1241_action_invoke(&result_object, &vm_context);
    l1242_action_invoke(&result_object, &vm_context);
    l1243_action_invoke(&result_object, &vm_context);
    l1244_action_invoke(&result_object, &vm_context);
    l1245_action_invoke(&result_object, &vm_context);
    l1246_action_invoke(&result_object, &vm_context);
    l1247_action_invoke(&result_object, &vm_context);
    l1248_action_invoke(&result_object, &vm_context);
    l1249_action_invoke(&result_object, &vm_context);
    l1250_action_invoke(&result_object, &vm_context);
    l1259_action_invoke(&result_object, &vm_context);
    l1260_action_invoke(&result_object, &vm_context);
    l1261_action_invoke(&result_object, &vm_context);
    l1262_action_invoke(&result_object, &vm_context);
    l1263_action_invoke(&result_object, &vm_context);
    l1264_action_invoke(&result_object, &vm_context);
    l1265_action_invoke(&result_object, &vm_context);
    l1266_action_invoke(&result_object, &vm_context);
    l1267_action_invoke(&result_object, &vm_context);
    l1268_action_invoke(&result_object, &vm_context);
    l1269_action_invoke(&result_object, &vm_context);
    l1270_action_invoke(&result_object, &vm_context);
    l1271_action_invoke(&result_object, &vm_context);
    l1272_action_invoke(&result_object, &vm_context);
    l1273_action_invoke(&result_object, &vm_context);
    l1274_action_invoke(&result_object, &vm_context);
    l1275_action_invoke(&result_object, &vm_context);
    l1276_action_invoke(&result_object, &vm_context);
    l1277_action_invoke(&result_object, &vm_context);
    l1278_action_invoke(&result_object, &vm_context);
    l1279_action_invoke(&result_object, &vm_context);
    l1280_action_invoke(&result_object, &vm_context);
    l1281_action_invoke(&result_object, &vm_context);
    l1282_action_invoke(&result_object, &vm_context);
    l1283_action_invoke(&result_object, &vm_context);
    l1284_action_invoke(&result_object, &vm_context);
    l1285_action_invoke(&result_object, &vm_context);
    l1286_action_invoke(&result_object, &vm_context);
    l1287_action_invoke(&result_object, &vm_context);
    l1288_action_invoke(&result_object, &vm_context);
    l1289_action_invoke(&result_object, &vm_context);
    l1290_action_invoke(&result_object, &vm_context);
    l1299_action_invoke(&result_object, &vm_context);
    l1300_action_invoke(&result_object, &vm_context);
    l1301_action_invoke(&result_object, &vm_context);
    l1302_action_invoke(&result_object, &vm_context);
    l1303_action_invoke(&result_object, &vm_context);
    l1304_action_invoke(&result_object, &vm_context);
    l1305_action_invoke(&result_object, &vm_context);
    l1306_action_invoke(&result_object, &vm_context);
    l1307_action_invoke(&result_object, &vm_context);
    l1308_action_invoke(&result_object, &vm_context);
    l1309_action_invoke(&result_object, &vm_context);
    l1310_action_invoke(&result_object, &vm_context);
    l1311_action_invoke(&result_object, &vm_context);
    l1312_action_invoke(&result_object, &vm_context);
    l1313_action_invoke(&result_object, &vm_context);
    l1314_action_invoke(&result_object, &vm_context);
    l1315_action_invoke(&result_object, &vm_context);
    l1316_action_invoke(&result_object, &vm_context);
    l1317_action_invoke(&result_object, &vm_context);
    l1318_action_invoke(&result_object, &vm_context);
    l1319_action_invoke(&result_object, &vm_context);
    l1320_action_invoke(&result_object, &vm_context);
    l1321_action_invoke(&result_object, &vm_context);
    l1322_action_invoke(&result_object, &vm_context);
    l1323_action_invoke(&result_object, &vm_context);
    l1324_action_invoke(&result_object, &vm_context);
    l1325_action_invoke(&result_object, &vm_context);
    l1326_action_invoke(&result_object, &vm_context);
    l1327_action_invoke(&result_object, &vm_context);
    l1328_action_invoke(&result_object, &vm_context);
    l1329_action_invoke(&result_object, &vm_context);
    l1330_action_invoke(&result_object, &vm_context);
    l1339_action_invoke(&result_object, &vm_context);
    l1340_action_invoke(&result_object, &vm_context);
    l1341_action_invoke(&result_object, &vm_context);
    l1342_action_invoke(&result_object, &vm_context);
    l1343_action_invoke(&result_object, &vm_context);
    l1344_action_invoke(&result_object, &vm_context);
    l1345_action_invoke(&result_object, &vm_context);
    l1346_action_invoke(&result_object, &vm_context);
    l1347_action_invoke(&result_object, &vm_context);
    l1348_action_invoke(&result_object, &vm_context);
    l1349_action_invoke(&result_object, &vm_context);
    l1350_action_invoke(&result_object, &vm_context);
    l1351_action_invoke(&result_object, &vm_context);
    l1352_action_invoke(&result_object, &vm_context);
    l1353_action_invoke(&result_object, &vm_context);
    l1354_action_invoke(&result_object, &vm_context);
    l1355_action_invoke(&result_object, &vm_context);
    l1356_action_invoke(&result_object, &vm_context);
    l1357_action_invoke(&result_object, &vm_context);
    l1358_action_invoke(&result_object, &vm_context);
    l1359_action_invoke(&result_object, &vm_context);
    l1360_action_invoke(&result_object, &vm_context);
    l1361_action_invoke(&result_object, &vm_context);
    l1362_action_invoke(&result_object, &vm_context);
    l1363_action_invoke(&result_object, &vm_context);
    l1364_action_invoke(&result_object, &vm_context);
    l1365_action_invoke(&result_object, &vm_context);
    l1366_action_invoke(&result_object, &vm_context);
    l1367_action_invoke(&result_object, &vm_context);
    l1368_action_invoke(&result_object, &vm_context);
    l1369_action_invoke(&result_object, &vm_context);
    l1370_action_invoke(&result_object, &vm_context);
    l1379_action_invoke(&result_object, &vm_context);
    l1380_action_invoke(&result_object, &vm_context);
    l1381_action_invoke(&result_object, &vm_context);
    l1382_action_invoke(&result_object, &vm_context);
    l1383_action_invoke(&result_object, &vm_context);
    l1384_action_invoke(&result_object, &vm_context);
    l1385_action_invoke(&result_object, &vm_context);
    l1386_action_invoke(&result_object, &vm_context);
    l1387_action_invoke(&result_object, &vm_context);
    l1388_action_invoke(&result_object, &vm_context);
    l1389_action_invoke(&result_object, &vm_context);
    l1390_action_invoke(&result_object, &vm_context);
    l1391_action_invoke(&result_object, &vm_context);
    l1392_action_invoke(&result_object, &vm_context);
    l1393_action_invoke(&result_object, &vm_context);
    l1394_action_invoke(&result_object, &vm_context);
    l1395_action_invoke(&result_object, &vm_context);
    l1396_action_invoke(&result_object, &vm_context);
    l1397_action_invoke(&result_object, &vm_context);
    l1398_action_invoke(&result_object, &vm_context);
    l1399_action_invoke(&result_object, &vm_context);
    l1400_action_invoke(&result_object, &vm_context);
    l1401_action_invoke(&result_object, &vm_context);
    l1402_action_invoke(&result_object, &vm_context);
    l1403_action_invoke(&result_object, &vm_context);
    l1404_action_invoke(&result_object, &vm_context);
    l1405_action_invoke(&result_object, &vm_context);
    l1406_action_invoke(&result_object, &vm_context);
    l1407_action_invoke(&result_object, &vm_context);
    l1408_action_invoke(&result_object, &vm_context);
    l1409_action_invoke(&result_object, &vm_context);
    l1410_action_invoke(&result_object, &vm_context);
    l1419_action_invoke(&result_object, &vm_context);
    l1420_action_invoke(&result_object, &vm_context);
    l1421_action_invoke(&result_object, &vm_context);
    l1422_action_invoke(&result_object, &vm_context);
    l1423_action_invoke(&result_object, &vm_context);
    l1424_action_invoke(&result_object, &vm_context);
    l1425_action_invoke(&result_object, &vm_context);
    l1426_action_invoke(&result_object, &vm_context);
    l1427_action_invoke(&result_object, &vm_context);
    l1428_action_invoke(&result_object, &vm_context);
    l1429_action_invoke(&result_object, &vm_context);
    l1430_action_invoke(&result_object, &vm_context);
    l1431_action_invoke(&result_object, &vm_context);
    l1432_action_invoke(&result_object, &vm_context);
    l1433_action_invoke(&result_object, &vm_context);
    l1434_action_invoke(&result_object, &vm_context);
    l1435_action_invoke(&result_object, &vm_context);
    l1436_action_invoke(&result_object, &vm_context);
    l1437_action_invoke(&result_object, &vm_context);
    l1438_action_invoke(&result_object, &vm_context);
    l1439_action_invoke(&result_object, &vm_context);
    l1440_action_invoke(&result_object, &vm_context);
    l1441_action_invoke(&result_object, &vm_context);
    l1442_action_invoke(&result_object, &vm_context);
    l1443_action_invoke(&result_object, &vm_context);
    l1444_action_invoke(&result_object, &vm_context);
    l1445_action_invoke(&result_object, &vm_context);
    l1446_action_invoke(&result_object, &vm_context);
    l1447_action_invoke(&result_object, &vm_context);
    l1448_action_invoke(&result_object, &vm_context);
    l1449_action_invoke(&result_object, &vm_context);
    l1450_action_invoke(&result_object, &vm_context);
    l1459_action_invoke(&result_object, &vm_context);
    l1460_action_invoke(&result_object, &vm_context);
    l1461_action_invoke(&result_object, &vm_context);
    l1462_action_invoke(&result_object, &vm_context);
    l1463_action_invoke(&result_object, &vm_context);
    l1464_action_invoke(&result_object, &vm_context);
    l1465_action_invoke(&result_object, &vm_context);
    l1466_action_invoke(&result_object, &vm_context);
    l1467_action_invoke(&result_object, &vm_context);
    l1468_action_invoke(&result_object, &vm_context);
    l1469_action_invoke(&result_object, &vm_context);
    l1470_action_invoke(&result_object, &vm_context);
    l1471_action_invoke(&result_object, &vm_context);
    l1472_action_invoke(&result_object, &vm_context);
    l1473_action_invoke(&result_object, &vm_context);
    l1474_action_invoke(&result_object, &vm_context);
    l1475_action_invoke(&result_object, &vm_context);
    l1476_action_invoke(&result_object, &vm_context);
    l1477_action_invoke(&result_object, &vm_context);
    l1478_action_invoke(&result_object, &vm_context);
    l1479_action_invoke(&result_object, &vm_context);
    l1480_action_invoke(&result_object, &vm_context);
    l1481_action_invoke(&result_object, &vm_context);
    l1482_action_invoke(&result_object, &vm_context);
    l1483_action_invoke(&result_object, &vm_context);
    l1484_action_invoke(&result_object, &vm_context);
    l1485_action_invoke(&result_object, &vm_context);
    l1486_action_invoke(&result_object, &vm_context);
    l1487_action_invoke(&result_object, &vm_context);
    l1488_action_invoke(&result_object, &vm_context);
    l1489_action_invoke(&result_object, &vm_context);
    l1490_action_invoke(&result_object, &vm_context);
    l1499_action_invoke(&result_object, &vm_context);
    l1500_action_invoke(&result_object, &vm_context);
    l1501_action_invoke(&result_object, &vm_context);
    l1502_action_invoke(&result_object, &vm_context);
    l1503_action_invoke(&result_object, &vm_context);
    l1504_action_invoke(&result_object, &vm_context);
    l1505_action_invoke(&result_object, &vm_context);
    l1506_action_invoke(&result_object, &vm_context);
    l1507_action_invoke(&result_object, &vm_context);
    l1508_action_invoke(&result_object, &vm_context);
    l1509_action_invoke(&result_object, &vm_context);
    l1510_action_invoke(&result_object, &vm_context);
    l1511_action_invoke(&result_object, &vm_context);
    l1512_action_invoke(&result_object, &vm_context);
    l1513_action_invoke(&result_object, &vm_context);
    l1514_action_invoke(&result_object, &vm_context);
    l1515_action_invoke(&result_object, &vm_context);
    l1516_action_invoke(&result_object, &vm_context);
    l1517_action_invoke(&result_object, &vm_context);
    l1518_action_invoke(&result_object, &vm_context);
    l1519_action_invoke(&result_object, &vm_context);
    l1520_action_invoke(&result_object, &vm_context);
    l1521_action_invoke(&result_object, &vm_context);
    l1522_action_invoke(&result_object, &vm_context);
    l1523_action_invoke(&result_object, &vm_context);
    l1524_action_invoke(&result_object, &vm_context);
    l1525_action_invoke(&result_object, &vm_context);
    l1526_action_invoke(&result_object, &vm_context);
    l1619_action_invoke(&result_object, &vm_context);
    l1620_action_invoke(&result_object, &vm_context);
    l1621_action_invoke(&result_object, &vm_context);
    l1622_action_invoke(&result_object, &vm_context);
    l1623_action_invoke(&result_object, &vm_context);
    l1624_action_invoke(&result_object, &vm_context);
    l1625_action_invoke(&result_object, &vm_context);
    l1626_action_invoke(&result_object, &vm_context);
    l1627_action_invoke(&result_object, &vm_context);
    l1628_action_invoke(&result_object, &vm_context);
    l1629_action_invoke(&result_object, &vm_context);
    l1630_action_invoke(&result_object, &vm_context);
    l1631_action_invoke(&result_object, &vm_context);
    l1632_action_invoke(&result_object, &vm_context);
    l1633_action_invoke(&result_object, &vm_context);
    l1634_action_invoke(&result_object, &vm_context);
    l1635_action_invoke(&result_object, &vm_context);
    l1636_action_invoke(&result_object, &vm_context);
    l1637_action_invoke(&result_object, &vm_context);
    l1638_action_invoke(&result_object, &vm_context);
    l1639_action_invoke(&result_object, &vm_context);
    l1640_action_invoke(&result_object, &vm_context);
    l1641_action_invoke(&result_object, &vm_context);
    l1642_action_invoke(&result_object, &vm_context);
    l1643_action_invoke(&result_object, &vm_context);
    l1644_action_invoke(&result_object, &vm_context);
    l1645_action_invoke(&result_object, &vm_context);
    l1646_action_invoke(&result_object, &vm_context);
    l1647_action_invoke(&result_object, &vm_context);
    l1648_action_invoke(&result_object, &vm_context);
    l1649_action_invoke(&result_object, &vm_context);
    l1650_action_invoke(&result_object, &vm_context);
    l1659_action_invoke(&result_object, &vm_context);
    l1660_action_invoke(&result_object, &vm_context);
    l1661_action_invoke(&result_object, &vm_context);
    l1662_action_invoke(&result_object, &vm_context);
    l1663_action_invoke(&result_object, &vm_context);
    l1664_action_invoke(&result_object, &vm_context);
    l1665_action_invoke(&result_object, &vm_context);
    l1666_action_invoke(&result_object, &vm_context);
    l1667_action_invoke(&result_object, &vm_context);
    l1668_action_invoke(&result_object, &vm_context);
    l1669_action_invoke(&result_object, &vm_context);
    l1670_action_invoke(&result_object, &vm_context);
    l1671_action_invoke(&result_object, &vm_context);
    l1672_action_invoke(&result_object, &vm_context);
    l1673_action_invoke(&result_object, &vm_context);
    l1674_action_invoke(&result_object, &vm_context);
    l1675_action_invoke(&result_object, &vm_context);
    l1676_action_invoke(&result_object, &vm_context);
    l1677_action_invoke(&result_object, &vm_context);
    l1678_action_invoke(&result_object, &vm_context);
    l1679_action_invoke(&result_object, &vm_context);
    l1680_action_invoke(&result_object, &vm_context);
    l1681_action_invoke(&result_object, &vm_context);
    l1682_action_invoke(&result_object, &vm_context);
    l1683_action_invoke(&result_object, &vm_context);
    l1684_action_invoke(&result_object, &vm_context);
    l1685_action_invoke(&result_object, &vm_context);
    l1686_action_invoke(&result_object, &vm_context);
    l1687_action_invoke(&result_object, &vm_context);
    l1688_action_invoke(&result_object, &vm_context);
    l1689_action_invoke(&result_object, &vm_context);
    l1690_action_invoke(&result_object, &vm_context);
    l1699_action_invoke(&result_object, &vm_context);
    l1700_action_invoke(&result_object, &vm_context);
    l1701_action_invoke(&result_object, &vm_context);
    l1702_action_invoke(&result_object, &vm_context);
    l1703_action_invoke(&result_object, &vm_context);
    l1704_action_invoke(&result_object, &vm_context);
    l1705_action_invoke(&result_object, &vm_context);
    l1706_action_invoke(&result_object, &vm_context);
    l1707_action_invoke(&result_object, &vm_context);
    l1708_action_invoke(&result_object, &vm_context);
    l1709_action_invoke(&result_object, &vm_context);
    l1710_action_invoke(&result_object, &vm_context);
    l1711_action_invoke(&result_object, &vm_context);
    l1712_action_invoke(&result_object, &vm_context);
    l1713_action_invoke(&result_object, &vm_context);
    l1714_action_invoke(&result_object, &vm_context);
    l1715_action_invoke(&result_object, &vm_context);
    l1716_action_invoke(&result_object, &vm_context);
    l1717_action_invoke(&result_object, &vm_context);
    l1718_action_invoke(&result_object, &vm_context);
    l1719_action_invoke(&result_object, &vm_context);
    l1720_action_invoke(&result_object, &vm_context);
    l1721_action_invoke(&result_object, &vm_context);
    l1722_action_invoke(&result_object, &vm_context);
    l1723_action_invoke(&result_object, &vm_context);
    l1724_action_invoke(&result_object, &vm_context);
    l1725_action_invoke(&result_object, &vm_context);
    l1726_action_invoke(&result_object, &vm_context);
    l1727_action_invoke(&result_object, &vm_context);
    l1728_action_invoke(&result_object, &vm_context);
    l1729_action_invoke(&result_object, &vm_context);
    l1730_action_invoke(&result_object, &vm_context);
    l1739_action_invoke(&result_object, &vm_context);
    l1740_action_invoke(&result_object, &vm_context);
    l1741_action_invoke(&result_object, &vm_context);
    l1742_action_invoke(&result_object, &vm_context);
    l1743_action_invoke(&result_object, &vm_context);
    l1744_action_invoke(&result_object, &vm_context);
    l1745_action_invoke(&result_object, &vm_context);
    l1746_action_invoke(&result_object, &vm_context);
    l1747_action_invoke(&result_object, &vm_context);
    l1748_action_invoke(&result_object, &vm_context);
    l1749_action_invoke(&result_object, &vm_context);
    l1750_action_invoke(&result_object, &vm_context);
    l1751_action_invoke(&result_object, &vm_context);
    l1752_action_invoke(&result_object, &vm_context);
    l1753_action_invoke(&result_object, &vm_context);
    l1754_action_invoke(&result_object, &vm_context);
    l1755_action_invoke(&result_object, &vm_context);
    l1756_action_invoke(&result_object, &vm_context);
    l1757_action_invoke(&result_object, &vm_context);
    l1758_action_invoke(&result_object, &vm_context);
    l1759_action_invoke(&result_object, &vm_context);
    l1760_action_invoke(&result_object, &vm_context);
    l1761_action_invoke(&result_object, &vm_context);
    l1762_action_invoke(&result_object, &vm_context);
    l1763_action_invoke(&result_object, &vm_context);
    l1764_action_invoke(&result_object, &vm_context);
    l1765_action_invoke(&result_object, &vm_context);
    l1766_action_invoke(&result_object, &vm_context);
    l1767_action_invoke(&result_object, &vm_context);
    l1768_action_invoke(&result_object, &vm_context);
    l1769_action_invoke(&result_object, &vm_context);
    l1770_action_invoke(&result_object, &vm_context);
    l1779_action_invoke(&result_object, &vm_context);
    l1780_action_invoke(&result_object, &vm_context);
    l1781_action_invoke(&result_object, &vm_context);
    l1782_action_invoke(&result_object, &vm_context);
    l1783_action_invoke(&result_object, &vm_context);
    l1784_action_invoke(&result_object, &vm_context);
    l1785_action_invoke(&result_object, &vm_context);
    l1786_action_invoke(&result_object, &vm_context);
    l1787_action_invoke(&result_object, &vm_context);
    l1788_action_invoke(&result_object, &vm_context);
    l1789_action_invoke(&result_object, &vm_context);
    l1790_action_invoke(&result_object, &vm_context);
    l1791_action_invoke(&result_object, &vm_context);
    l1792_action_invoke(&result_object, &vm_context);
    l1793_action_invoke(&result_object, &vm_context);
    l1794_action_invoke(&result_object, &vm_context);
    l1795_action_invoke(&result_object, &vm_context);
    l1796_action_invoke(&result_object, &vm_context);
    l1797_action_invoke(&result_object, &vm_context);
    l1798_action_invoke(&result_object, &vm_context);
    l1799_action_invoke(&result_object, &vm_context);
    l1800_action_invoke(&result_object, &vm_context);
    l1801_action_invoke(&result_object, &vm_context);
    l1802_action_invoke(&result_object, &vm_context);
    l1803_action_invoke(&result_object, &vm_context);
    l1804_action_invoke(&result_object, &vm_context);
    l1805_action_invoke(&result_object, &vm_context);
    l1806_action_invoke(&result_object, &vm_context);
    l1807_action_invoke(&result_object, &vm_context);
    l1808_action_invoke(&result_object, &vm_context);
    l1809_action_invoke(&result_object, &vm_context);
    l1810_action_invoke(&result_object, &vm_context);
    l1819_action_invoke(&result_object, &vm_context);
    l1820_action_invoke(&result_object, &vm_context);
    l1821_action_invoke(&result_object, &vm_context);
    l1822_action_invoke(&result_object, &vm_context);
    l1823_action_invoke(&result_object, &vm_context);
    l1824_action_invoke(&result_object, &vm_context);
    l1825_action_invoke(&result_object, &vm_context);
    l1826_action_invoke(&result_object, &vm_context);
    l1827_action_invoke(&result_object, &vm_context);
    l1828_action_invoke(&result_object, &vm_context);
    l1829_action_invoke(&result_object, &vm_context);
    l1830_action_invoke(&result_object, &vm_context);
    l1831_action_invoke(&result_object, &vm_context);
    l1832_action_invoke(&result_object, &vm_context);
    l1833_action_invoke(&result_object, &vm_context);
    l1834_action_invoke(&result_object, &vm_context);
    l1835_action_invoke(&result_object, &vm_context);
    l1836_action_invoke(&result_object, &vm_context);
    l1837_action_invoke(&result_object, &vm_context);
    l1838_action_invoke(&result_object, &vm_context);
    l1839_action_invoke(&result_object, &vm_context);
    l1840_action_invoke(&result_object, &vm_context);
    l1841_action_invoke(&result_object, &vm_context);
    l1842_action_invoke(&result_object, &vm_context);
    l1843_action_invoke(&result_object, &vm_context);
    l1844_action_invoke(&result_object, &vm_context);
    l1845_action_invoke(&result_object, &vm_context);
    l1846_action_invoke(&result_object, &vm_context);
    l1847_action_invoke(&result_object, &vm_context);
    l1848_action_invoke(&result_object, &vm_context);
    l1849_action_invoke(&result_object, &vm_context);
    l1850_action_invoke(&result_object, &vm_context);
    l1859_action_invoke(&result_object, &vm_context);
    l1860_action_invoke(&result_object, &vm_context);
    l1861_action_invoke(&result_object, &vm_context);
    l1862_action_invoke(&result_object, &vm_context);
    l1863_action_invoke(&result_object, &vm_context);
    l1864_action_invoke(&result_object, &vm_context);
    l1865_action_invoke(&result_object, &vm_context);
    l1866_action_invoke(&result_object, &vm_context);
    l1867_action_invoke(&result_object, &vm_context);
    l1868_action_invoke(&result_object, &vm_context);
    l1869_action_invoke(&result_object, &vm_context);
    l1870_action_invoke(&result_object, &vm_context);
    l1871_action_invoke(&result_object, &vm_context);
    l1872_action_invoke(&result_object, &vm_context);
    l1873_action_invoke(&result_object, &vm_context);
    l1874_action_invoke(&result_object, &vm_context);
    l1875_action_invoke(&result_object, &vm_context);
    l1876_action_invoke(&result_object, &vm_context);
    l1877_action_invoke(&result_object, &vm_context);
    l1878_action_invoke(&result_object, &vm_context);
    l1879_action_invoke(&result_object, &vm_context);
    l1880_action_invoke(&result_object, &vm_context);
    l1881_action_invoke(&result_object, &vm_context);
    l1882_action_invoke(&result_object, &vm_context);
    l1883_action_invoke(&result_object, &vm_context);
    l1884_action_invoke(&result_object, &vm_context);
    l1885_action_invoke(&result_object, &vm_context);
    l1886_action_invoke(&result_object, &vm_context);
    l1887_action_invoke(&result_object, &vm_context);
    l1888_action_invoke(&result_object, &vm_context);
    l1889_action_invoke(&result_object, &vm_context);
    l1890_action_invoke(&result_object, &vm_context);
    l1899_action_invoke(&result_object, &vm_context);
    l1900_action_invoke(&result_object, &vm_context);
    l1901_action_invoke(&result_object, &vm_context);
    l1902_action_invoke(&result_object, &vm_context);
    l1903_action_invoke(&result_object, &vm_context);
    l1904_action_invoke(&result_object, &vm_context);
    l1905_action_invoke(&result_object, &vm_context);
    l1906_action_invoke(&result_object, &vm_context);
    l1907_action_invoke(&result_object, &vm_context);
    l1908_action_invoke(&result_object, &vm_context);
    l1909_action_invoke(&result_object, &vm_context);
    l1910_action_invoke(&result_object, &vm_context);
    l1911_action_invoke(&result_object, &vm_context);
    l1912_action_invoke(&result_object, &vm_context);
    l1913_action_invoke(&result_object, &vm_context);
    l1914_action_invoke(&result_object, &vm_context);
    l1915_action_invoke(&result_object, &vm_context);
    l1916_action_invoke(&result_object, &vm_context);
    l1917_action_invoke(&result_object, &vm_context);
    l1918_action_invoke(&result_object, &vm_context);
    l1919_action_invoke(&result_object, &vm_context);
    l1920_action_invoke(&result_object, &vm_context);
    l1921_action_invoke(&result_object, &vm_context);
    l1922_action_invoke(&result_object, &vm_context);
    l1923_action_invoke(&result_object, &vm_context);
    l1924_action_invoke(&result_object, &vm_context);
    l1925_action_invoke(&result_object, &vm_context);
    l1926_action_invoke(&result_object, &vm_context);
    l1927_action_invoke(&result_object, &vm_context);
    l1928_action_invoke(&result_object, &vm_context);
    l1929_action_invoke(&result_object, &vm_context);
    l1930_action_invoke(&result_object, &vm_context);
    l2019_action_invoke(&result_object, &vm_context);
    l2020_action_invoke(&result_object, &vm_context);
    l2021_action_invoke(&result_object, &vm_context);
    l2022_action_invoke(&result_object, &vm_context);
    l2023_action_invoke(&result_object, &vm_context);
    l2024_action_invoke(&result_object, &vm_context);
    l2025_action_invoke(&result_object, &vm_context);
    l2026_action_invoke(&result_object, &vm_context);
    l2027_action_invoke(&result_object, &vm_context);
    l2028_action_invoke(&result_object, &vm_context);
    l2029_action_invoke(&result_object, &vm_context);
    l2030_action_invoke(&result_object, &vm_context);
    l2031_action_invoke(&result_object, &vm_context);
    l2032_action_invoke(&result_object, &vm_context);
    l2033_action_invoke(&result_object, &vm_context);
    l2034_action_invoke(&result_object, &vm_context);
    l2035_action_invoke(&result_object, &vm_context);
    l2036_action_invoke(&result_object, &vm_context);
    l2037_action_invoke(&result_object, &vm_context);
    l2038_action_invoke(&result_object, &vm_context);
    l2039_action_invoke(&result_object, &vm_context);
    l2040_action_invoke(&result_object, &vm_context);
    l2041_action_invoke(&result_object, &vm_context);
    l2042_action_invoke(&result_object, &vm_context);
    l2043_action_invoke(&result_object, &vm_context);
    l2044_action_invoke(&result_object, &vm_context);
    l2045_action_invoke(&result_object, &vm_context);
    l2046_action_invoke(&result_object, &vm_context);
    l2047_action_invoke(&result_object, &vm_context);
    l2048_action_invoke(&result_object, &vm_context);
    l2049_action_invoke(&result_object, &vm_context);
    l2050_action_invoke(&result_object, &vm_context);
    l2059_action_invoke(&result_object, &vm_context);
    l2060_action_invoke(&result_object, &vm_context);
    l2061_action_invoke(&result_object, &vm_context);
    l2062_action_invoke(&result_object, &vm_context);
    l2063_action_invoke(&result_object, &vm_context);
    l2064_action_invoke(&result_object, &vm_context);
    l2065_action_invoke(&result_object, &vm_context);
    l2066_action_invoke(&result_object, &vm_context);
    l2067_action_invoke(&result_object, &vm_context);
    l2068_action_invoke(&result_object, &vm_context);
    l2069_action_invoke(&result_object, &vm_context);
    l2070_action_invoke(&result_object, &vm_context);
    l2071_action_invoke(&result_object, &vm_context);
    l2072_action_invoke(&result_object, &vm_context);
    l2073_action_invoke(&result_object, &vm_context);
    l2074_action_invoke(&result_object, &vm_context);
    l2075_action_invoke(&result_object, &vm_context);
    l2076_action_invoke(&result_object, &vm_context);
    l2077_action_invoke(&result_object, &vm_context);
    l2078_action_invoke(&result_object, &vm_context);
    l2079_action_invoke(&result_object, &vm_context);
    l2080_action_invoke(&result_object, &vm_context);
    l2081_action_invoke(&result_object, &vm_context);
    l2082_action_invoke(&result_object, &vm_context);
    l2083_action_invoke(&result_object, &vm_context);
    l2084_action_invoke(&result_object, &vm_context);
    l2085_action_invoke(&result_object, &vm_context);
    l2086_action_invoke(&result_object, &vm_context);
    l2087_action_invoke(&result_object, &vm_context);
    l2088_action_invoke(&result_object, &vm_context);
    l2089_action_invoke(&result_object, &vm_context);
    l2090_action_invoke(&result_object, &vm_context);
    l2099_action_invoke(&result_object, &vm_context);
    l2100_action_invoke(&result_object, &vm_context);
    l2101_action_invoke(&result_object, &vm_context);
    l2102_action_invoke(&result_object, &vm_context);
    l2103_action_invoke(&result_object, &vm_context);
    l2104_action_invoke(&result_object, &vm_context);
    l2105_action_invoke(&result_object, &vm_context);
    l2106_action_invoke(&result_object, &vm_context);
    l2107_action_invoke(&result_object, &vm_context);
    l2108_action_invoke(&result_object, &vm_context);
    l2109_action_invoke(&result_object, &vm_context);
    l2110_action_invoke(&result_object, &vm_context);
    l2111_action_invoke(&result_object, &vm_context);
    l2112_action_invoke(&result_object, &vm_context);
    l2113_action_invoke(&result_object, &vm_context);
    l2114_action_invoke(&result_object, &vm_context);
    l2115_action_invoke(&result_object, &vm_context);
    l2116_action_invoke(&result_object, &vm_context);
    l2117_action_invoke(&result_object, &vm_context);
    l2118_action_invoke(&result_object, &vm_context);
    l2119_action_invoke(&result_object, &vm_context);
    l2120_action_invoke(&result_object, &vm_context);
    l2121_action_invoke(&result_object, &vm_context);
    l2122_action_invoke(&result_object, &vm_context);
    l2123_action_invoke(&result_object, &vm_context);
    l2124_action_invoke(&result_object, &vm_context);
    l2125_action_invoke(&result_object, &vm_context);
    l2126_action_invoke(&result_object, &vm_context);
    l2127_action_invoke(&result_object, &vm_context);
    l2128_action_invoke(&result_object, &vm_context);
    l2129_action_invoke(&result_object, &vm_context);
    l2130_action_invoke(&result_object, &vm_context);
    l2139_action_invoke(&result_object, &vm_context);
    l2140_action_invoke(&result_object, &vm_context);
    l2141_action_invoke(&result_object, &vm_context);
    l2142_action_invoke(&result_object, &vm_context);
    l2143_action_invoke(&result_object, &vm_context);
    l2144_action_invoke(&result_object, &vm_context);
    l2145_action_invoke(&result_object, &vm_context);
    l2146_action_invoke(&result_object, &vm_context);
    l2147_action_invoke(&result_object, &vm_context);
    l2148_action_invoke(&result_object, &vm_context);
    l2149_action_invoke(&result_object, &vm_context);
    l2150_action_invoke(&result_object, &vm_context);
    l2151_action_invoke(&result_object, &vm_context);
    l2152_action_invoke(&result_object, &vm_context);
    l2153_action_invoke(&result_object, &vm_context);
    l2154_action_invoke(&result_object, &vm_context);
    l2155_action_invoke(&result_object, &vm_context);
    l2156_action_invoke(&result_object, &vm_context);
    l2157_action_invoke(&result_object, &vm_context);
    l2158_action_invoke(&result_object, &vm_context);
    l2159_action_invoke(&result_object, &vm_context);
    l2160_action_invoke(&result_object, &vm_context);
    l2161_action_invoke(&result_object, &vm_context);
    l2162_action_invoke(&result_object, &vm_context);
    l2163_action_invoke(&result_object, &vm_context);
    l2164_action_invoke(&result_object, &vm_context);
    l2165_action_invoke(&result_object, &vm_context);
    l2166_action_invoke(&result_object, &vm_context);
    l2167_action_invoke(&result_object, &vm_context);
    l2168_action_invoke(&result_object, &vm_context);
    l2169_action_invoke(&result_object, &vm_context);
    l2170_action_invoke(&result_object, &vm_context);
    l2179_action_invoke(&result_object, &vm_context);
    l2180_action_invoke(&result_object, &vm_context);
    l2181_action_invoke(&result_object, &vm_context);
    l2182_action_invoke(&result_object, &vm_context);
    l2183_action_invoke(&result_object, &vm_context);
    l2184_action_invoke(&result_object, &vm_context);
    l2185_action_invoke(&result_object, &vm_context);
    l2186_action_invoke(&result_object, &vm_context);
    l2187_action_invoke(&result_object, &vm_context);
    l2188_action_invoke(&result_object, &vm_context);
    l2189_action_invoke(&result_object, &vm_context);
    l2190_action_invoke(&result_object, &vm_context);
    l2191_action_invoke(&result_object, &vm_context);
    l2192_action_invoke(&result_object, &vm_context);
    l2193_action_invoke(&result_object, &vm_context);
    l2194_action_invoke(&result_object, &vm_context);
    l2195_action_invoke(&result_object, &vm_context);
    l2196_action_invoke(&result_object, &vm_context);
    l2197_action_invoke(&result_object, &vm_context);
    l2198_action_invoke(&result_object, &vm_context);
    l2199_action_invoke(&result_object, &vm_context);
    l2200_action_invoke(&result_object, &vm_context);
    l2201_action_invoke(&result_object, &vm_context);
    l2202_action_invoke(&result_object, &vm_context);
    l2203_action_invoke(&result_object, &vm_context);
    l2204_action_invoke(&result_object, &vm_context);
    l2205_action_invoke(&result_object, &vm_context);
    l2206_action_invoke(&result_object, &vm_context);
    l2207_action_invoke(&result_object, &vm_context);
    l2208_action_invoke(&result_object, &vm_context);
    l2209_action_invoke(&result_object, &vm_context);
    l2210_action_invoke(&result_object, &vm_context);
    l2219_action_invoke(&result_object, &vm_context);
    l2220_action_invoke(&result_object, &vm_context);
    l2221_action_invoke(&result_object, &vm_context);
    l2222_action_invoke(&result_object, &vm_context);
    l2223_action_invoke(&result_object, &vm_context);
    l2224_action_invoke(&result_object, &vm_context);
    l2225_action_invoke(&result_object, &vm_context);
    l2226_action_invoke(&result_object, &vm_context);
    l2227_action_invoke(&result_object, &vm_context);
    l2228_action_invoke(&result_object, &vm_context);
    l2229_action_invoke(&result_object, &vm_context);
    l2230_action_invoke(&result_object, &vm_context);
    l2231_action_invoke(&result_object, &vm_context);
    l2232_action_invoke(&result_object, &vm_context);
    l2233_action_invoke(&result_object, &vm_context);
    l2234_action_invoke(&result_object, &vm_context);
    l2235_action_invoke(&result_object, &vm_context);
    l2236_action_invoke(&result_object, &vm_context);
    l2237_action_invoke(&result_object, &vm_context);
    l2238_action_invoke(&result_object, &vm_context);
    l2239_action_invoke(&result_object, &vm_context);
    l2240_action_invoke(&result_object, &vm_context);
    l2241_action_invoke(&result_object, &vm_context);
    l2242_action_invoke(&result_object, &vm_context);
    l2243_action_invoke(&result_object, &vm_context);
    l2244_action_invoke(&result_object, &vm_context);
    l2245_action_invoke(&result_object, &vm_context);
    l2246_action_invoke(&result_object, &vm_context);
    l2247_action_invoke(&result_object, &vm_context);
    l2248_action_invoke(&result_object, &vm_context);
    l2249_action_invoke(&result_object, &vm_context);
    l2250_action_invoke(&result_object, &vm_context);
    l2259_action_invoke(&result_object, &vm_context);
    l2260_action_invoke(&result_object, &vm_context);
    l2261_action_invoke(&result_object, &vm_context);
    l2262_action_invoke(&result_object, &vm_context);
    l2263_action_invoke(&result_object, &vm_context);
    l2264_action_invoke(&result_object, &vm_context);
    l2265_action_invoke(&result_object, &vm_context);
    l2266_action_invoke(&result_object, &vm_context);
    l2267_action_invoke(&result_object, &vm_context);
    l2268_action_invoke(&result_object, &vm_context);
    l2269_action_invoke(&result_object, &vm_context);
    l2270_action_invoke(&result_object, &vm_context);
    l2271_action_invoke(&result_object, &vm_context);
    l2272_action_invoke(&result_object, &vm_context);
    l2273_action_invoke(&result_object, &vm_context);
    l2274_action_invoke(&result_object, &vm_context);
    l2275_action_invoke(&result_object, &vm_context);
    l2276_action_invoke(&result_object, &vm_context);
    l2277_action_invoke(&result_object, &vm_context);
    l2278_action_invoke(&result_object, &vm_context);
    l2279_action_invoke(&result_object, &vm_context);
    l2280_action_invoke(&result_object, &vm_context);
    l2281_action_invoke(&result_object, &vm_context);
    l2282_action_invoke(&result_object, &vm_context);
    l2283_action_invoke(&result_object, &vm_context);
    l2284_action_invoke(&result_object, &vm_context);
    l2285_action_invoke(&result_object, &vm_context);
    l2286_action_invoke(&result_object, &vm_context);
    l2287_action_invoke(&result_object, &vm_context);
    l2288_action_invoke(&result_object, &vm_context);
    l2289_action_invoke(&result_object, &vm_context);
    l2290_action_invoke(&result_object, &vm_context);
    l2299_action_invoke(&result_object, &vm_context);
    l2300_action_invoke(&result_object, &vm_context);
    l2301_action_invoke(&result_object, &vm_context);
    l2302_action_invoke(&result_object, &vm_context);
    l2303_action_invoke(&result_object, &vm_context);
    l2304_action_invoke(&result_object, &vm_context);
    l2305_action_invoke(&result_object, &vm_context);
    l2306_action_invoke(&result_object, &vm_context);
    l2307_action_invoke(&result_object, &vm_context);
    l2308_action_invoke(&result_object, &vm_context);
    l2309_action_invoke(&result_object, &vm_context);
    l2310_action_invoke(&result_object, &vm_context);
    l2311_action_invoke(&result_object, &vm_context);
    l2312_action_invoke(&result_object, &vm_context);
    l2313_action_invoke(&result_object, &vm_context);
    l2314_action_invoke(&result_object, &vm_context);
    l2315_action_invoke(&result_object, &vm_context);
    l2316_action_invoke(&result_object, &vm_context);
    l2317_action_invoke(&result_object, &vm_context);
    l2318_action_invoke(&result_object, &vm_context);
    l2319_action_invoke(&result_object, &vm_context);
    l2320_action_invoke(&result_object, &vm_context);
    l2321_action_invoke(&result_object, &vm_context);
    l2322_action_invoke(&result_object, &vm_context);
    l2323_action_invoke(&result_object, &vm_context);
    l2324_action_invoke(&result_object, &vm_context);
    l2325_action_invoke(&result_object, &vm_context);
    l2326_action_invoke(&result_object, &vm_context);
    l2327_action_invoke(&result_object, &vm_context);
    l2328_action_invoke(&result_object, &vm_context);
    l2329_action_invoke(&result_object, &vm_context);
    l2330_action_invoke(&result_object, &vm_context);
    l2419_action_invoke(&result_object, &vm_context);
    l2420_action_invoke(&result_object, &vm_context);
    l2422_action_invoke(&result_object, &vm_context);
    l2424_action_invoke(&result_object, &vm_context);
    l2426_action_invoke(&result_object, &vm_context);
    l2428_action_invoke(&result_object, &vm_context);
    l2430_action_invoke(&result_object, &vm_context);
    l2432_action_invoke(&result_object, &vm_context);
    l2434_action_invoke(&result_object, &vm_context);
    l2439_action_invoke(&result_object, &vm_context);
    l2440_action_invoke(&result_object, &vm_context);
    l2441_action_invoke(&result_object, &vm_context);
    l2442_action_invoke(&result_object, &vm_context);
    l2443_action_invoke(&result_object, &vm_context);
    l2444_action_invoke(&result_object, &vm_context);
    l2445_action_invoke(&result_object, &vm_context);
    l2446_action_invoke(&result_object, &vm_context);
    l2447_action_invoke(&result_object, &vm_context);
    l2448_action_invoke(&result_object, &vm_context);
    l2449_action_invoke(&result_object, &vm_context);
    l2450_action_invoke(&result_object, &vm_context);
    l2451_action_invoke(&result_object, &vm_context);
    l2452_action_invoke(&result_object, &vm_context);
    l2453_action_invoke(&result_object, &vm_context);
    l2454_action_invoke(&result_object, &vm_context);
    l2459_action_invoke(&result_object, &vm_context);
    l2460_action_invoke(&result_object, &vm_context);
    l2461_action_invoke(&result_object, &vm_context);
    l2462_action_invoke(&result_object, &vm_context);
    l2463_action_invoke(&result_object, &vm_context);
    l2464_action_invoke(&result_object, &vm_context);
    l2465_action_invoke(&result_object, &vm_context);
    l2466_action_invoke(&result_object, &vm_context);
    l2467_action_invoke(&result_object, &vm_context);
    l2468_action_invoke(&result_object, &vm_context);
    l2469_action_invoke(&result_object, &vm_context);
    l2470_action_invoke(&result_object, &vm_context);
    l2471_action_invoke(&result_object, &vm_context);
    l2472_action_invoke(&result_object, &vm_context);
    l2473_action_invoke(&result_object, &vm_context);
    l2474_action_invoke(&result_object, &vm_context);
    l2479_action_invoke(&result_object, &vm_context);
    l2480_action_invoke(&result_object, &vm_context);
    l2481_action_invoke(&result_object, &vm_context);
    l2482_action_invoke(&result_object, &vm_context);
    l2483_action_invoke(&result_object, &vm_context);
    l2484_action_invoke(&result_object, &vm_context);
    l2485_action_invoke(&result_object, &vm_context);
    l2486_action_invoke(&result_object, &vm_context);
    l2487_action_invoke(&result_object, &vm_context);
    l2488_action_invoke(&result_object, &vm_context);
    l2489_action_invoke(&result_object, &vm_context);
    l2490_action_invoke(&result_object, &vm_context);
    l2491_action_invoke(&result_object, &vm_context);
    l2492_action_invoke(&result_object, &vm_context);
    l2493_action_invoke(&result_object, &vm_context);
    l2494_action_invoke(&result_object, &vm_context);
    l2499_action_invoke(&result_object, &vm_context);
    l2500_action_invoke(&result_object, &vm_context);
    l2501_action_invoke(&result_object, &vm_context);
    l2502_action_invoke(&result_object, &vm_context);
    l2503_action_invoke(&result_object, &vm_context);
    l2504_action_invoke(&result_object, &vm_context);
    l2505_action_invoke(&result_object, &vm_context);
    l2506_action_invoke(&result_object, &vm_context);
    l2507_action_invoke(&result_object, &vm_context);
    l2508_action_invoke(&result_object, &vm_context);
    l2509_action_invoke(&result_object, &vm_context);
    l2510_action_invoke(&result_object, &vm_context);
    l2511_action_invoke(&result_object, &vm_context);
    l2512_action_invoke(&result_object, &vm_context);
    l2513_action_invoke(&result_object, &vm_context);
    l2514_action_invoke(&result_object, &vm_context);
}
