// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/f64_bitwise.wast
#![allow(
    warnings,
    dead_code
)]
use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, VmCtx, Export};
use super::_common::spectest_importobject;
use wabt::wat2wasm;


// Line 4
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param f64) (result f64)))
      (type (;1;) (func (param f64 f64) (result f64)))
      (func (;0;) (type 0) (param f64) (result f64)
        get_local 0
        f64.abs)
      (func (;1;) (type 0) (param f64) (result f64)
        get_local 0
        f64.neg)
      (func (;2;) (type 1) (param f64 f64) (result f64)
        get_local 0
        get_local 1
        f64.copysign)
      (export \"abs\" (func 0))
      (export \"neg\" (func 1))
      (export \"copysign\" (func 2)))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 10
fn l10_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l10_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 11
fn l11_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l11_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 12
fn l12_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l12_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 13
fn l13_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l13_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 14
fn l14_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l14_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 15
fn l15_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l15_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 16
fn l16_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l16_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 17
fn l17_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l17_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 18
fn l18_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l18_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 19
fn l19_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l19_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 20
fn l20_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l20_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 21
fn l21_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l21_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 22
fn l22_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l22_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 23
fn l23_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l23_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 24
fn l24_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l24_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 25
fn l25_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l25_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 26
fn l26_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l26_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 27
fn l27_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l27_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 28
fn l28_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l28_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 29
fn l29_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l29_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 30
fn l30_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l30_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 31
fn l31_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l31_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 32
fn l32_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l32_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 33
fn l33_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l33_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 34
fn l34_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l34_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 35
fn l35_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l35_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 36
fn l36_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l36_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 37
fn l37_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l37_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 38
fn l38_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l38_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 39
fn l39_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l39_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 40
fn l40_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l40_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 41
fn l41_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l41_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 42
fn l42_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l42_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 43
fn l43_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l43_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 44
fn l44_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l44_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 45
fn l45_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l45_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 46
fn l46_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l46_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 47
fn l47_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l47_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 48
fn l48_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l48_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 49
fn l49_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l49_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 50
fn l50_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l50_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 51
fn l51_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l51_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 52
fn l52_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l52_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 53
fn l53_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l53_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 54
fn l54_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l54_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 55
fn l55_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l55_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 56
fn l56_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l56_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 57
fn l57_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l57_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 58
fn l58_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l58_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 59
fn l59_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l59_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 60
fn l60_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l60_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 61
fn l61_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l61_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 62
fn l62_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l62_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 63
fn l63_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l63_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 64
fn l64_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l64_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 65
fn l65_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l65_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 66
fn l66_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l66_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 67
fn l67_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l67_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 68
fn l68_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l68_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 69
fn l69_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l69_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 70
fn l70_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l70_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 71
fn l71_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l71_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 72
fn l72_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l72_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 73
fn l73_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l73_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 74
fn l74_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l74_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 75
fn l75_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l75_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 76
fn l76_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l76_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 77
fn l77_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l77_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 78
fn l78_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l78_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 79
fn l79_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l79_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 80
fn l80_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l80_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 81
fn l81_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l81_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 82
fn l82_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l82_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 83
fn l83_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l83_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 84
fn l84_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l84_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 85
fn l85_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l85_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 86
fn l86_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l86_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 87
fn l87_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l87_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 88
fn l88_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l88_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 89
fn l89_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l89_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 90
fn l90_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l90_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 91
fn l91_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l91_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 92
fn l92_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l92_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 93
fn l93_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l93_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 94
fn l94_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l94_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 95
fn l95_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l95_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 96
fn l96_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l96_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 97
fn l97_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l97_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 98
fn l98_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l98_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 99
fn l99_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l99_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 100
fn l100_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l100_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 101
fn l101_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l101_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 102
fn l102_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l102_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 103
fn l103_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l103_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 104
fn l104_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l104_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 105
fn l105_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l105_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 106
fn l106_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l106_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 107
fn l107_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l107_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 108
fn l108_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l108_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 109
fn l109_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l109_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 110
fn l110_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l110_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 111
fn l111_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l111_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 112
fn l112_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l112_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 113
fn l113_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l113_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 114
fn l114_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l114_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 115
fn l115_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l115_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 116
fn l116_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l116_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 117
fn l117_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l117_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 118
fn l118_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l118_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 119
fn l119_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l119_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 120
fn l120_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l120_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 121
fn l121_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l121_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 122
fn l122_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l122_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 123
fn l123_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l123_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 124
fn l124_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l124_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 125
fn l125_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l125_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 126
fn l126_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l126_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 127
fn l127_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l127_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 128
fn l128_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l128_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 129
fn l129_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l129_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 130
fn l130_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l130_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 131
fn l131_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l131_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 132
fn l132_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l132_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 133
fn l133_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l133_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 134
fn l134_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l134_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 135
fn l135_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l135_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 136
fn l136_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l136_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 137
fn l137_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l137_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 138
fn l138_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l138_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 139
fn l139_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l139_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 140
fn l140_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l140_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 141
fn l141_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l141_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 142
fn l142_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l142_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 143
fn l143_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l143_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 144
fn l144_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l144_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 145
fn l145_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l145_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 146
fn l146_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l146_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 147
fn l147_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l147_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 148
fn l148_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l148_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 149
fn l149_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l149_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 150
fn l150_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l150_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 151
fn l151_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l151_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 152
fn l152_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l152_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 153
fn l153_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l153_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 154
fn l154_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l154_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 155
fn l155_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l155_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 156
fn l156_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l156_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 157
fn l157_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l157_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 158
fn l158_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l158_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 159
fn l159_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l159_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 160
fn l160_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l160_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 161
fn l161_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l161_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 162
fn l162_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l162_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 163
fn l163_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l163_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 164
fn l164_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l164_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 165
fn l165_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l165_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 166
fn l166_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l166_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 167
fn l167_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l167_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 168
fn l168_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l168_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 169
fn l169_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l169_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 170
fn l170_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l170_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 171
fn l171_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l171_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 172
fn l172_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l172_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 173
fn l173_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l173_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 174
fn l174_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l174_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 175
fn l175_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l175_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 176
fn l176_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l176_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 177
fn l177_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l177_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 178
fn l178_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l178_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 179
fn l179_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l179_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 180
fn l180_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l180_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 181
fn l181_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l181_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 182
fn l182_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l182_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 183
fn l183_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l183_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 184
fn l184_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l184_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 185
fn l185_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l185_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 186
fn l186_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l186_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 187
fn l187_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l187_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 188
fn l188_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l188_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 189
fn l189_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l189_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 190
fn l190_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l190_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 191
fn l191_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l191_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 192
fn l192_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l192_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 193
fn l193_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l193_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 194
fn l194_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l194_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 195
fn l195_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l195_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 196
fn l196_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l196_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 197
fn l197_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l197_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 198
fn l198_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l198_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 199
fn l199_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l199_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 200
fn l200_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l200_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 201
fn l201_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l201_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 202
fn l202_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l202_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 203
fn l203_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l203_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 204
fn l204_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l204_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 205
fn l205_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l205_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 206
fn l206_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l206_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 207
fn l207_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l207_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 208
fn l208_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l208_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 209
fn l209_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l209_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 210
fn l210_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l210_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 211
fn l211_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l211_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 212
fn l212_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l212_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 213
fn l213_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l213_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 214
fn l214_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l214_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 215
fn l215_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l215_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 216
fn l216_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l216_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 217
fn l217_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l217_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 218
fn l218_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l218_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 219
fn l219_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l219_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 220
fn l220_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l220_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 221
fn l221_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l221_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 222
fn l222_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l222_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 223
fn l223_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l223_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 224
fn l224_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l224_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 225
fn l225_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l225_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 226
fn l226_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l226_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 227
fn l227_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l227_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 228
fn l228_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l228_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 229
fn l229_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l229_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 230
fn l230_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l230_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 231
fn l231_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l231_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 232
fn l232_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l232_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 233
fn l233_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l233_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 234
fn l234_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l234_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 235
fn l235_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l235_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 236
fn l236_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l236_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 237
fn l237_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l237_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 238
fn l238_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l238_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 239
fn l239_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l239_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 240
fn l240_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l240_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 241
fn l241_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l241_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 242
fn l242_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l242_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 243
fn l243_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l243_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 244
fn l244_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l244_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 245
fn l245_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l245_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 246
fn l246_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l246_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 247
fn l247_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l247_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 248
fn l248_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l248_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 249
fn l249_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l249_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 250
fn l250_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l250_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 251
fn l251_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l251_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 252
fn l252_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l252_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 253
fn l253_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l253_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 254
fn l254_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l254_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 255
fn l255_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l255_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 256
fn l256_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l256_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 257
fn l257_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l257_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 258
fn l258_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l258_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 259
fn l259_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l259_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 260
fn l260_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l260_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 261
fn l261_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l261_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 262
fn l262_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l262_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 263
fn l263_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l263_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 264
fn l264_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l264_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 265
fn l265_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l265_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 266
fn l266_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l266_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 267
fn l267_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l267_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 268
fn l268_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l268_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 269
fn l269_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l269_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 270
fn l270_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l270_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 271
fn l271_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l271_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 272
fn l272_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l272_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 273
fn l273_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l273_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 274
fn l274_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l274_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 275
fn l275_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l275_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 276
fn l276_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l276_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 277
fn l277_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l277_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 278
fn l278_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l278_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 279
fn l279_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l279_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 280
fn l280_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l280_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 281
fn l281_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l281_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 282
fn l282_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l282_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 283
fn l283_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l283_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 284
fn l284_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l284_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 285
fn l285_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l285_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 286
fn l286_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l286_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 287
fn l287_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l287_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 288
fn l288_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l288_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 289
fn l289_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l289_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 290
fn l290_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l290_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 291
fn l291_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l291_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 292
fn l292_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l292_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 293
fn l293_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l293_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 294
fn l294_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l294_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 295
fn l295_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l295_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 296
fn l296_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l296_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 297
fn l297_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l297_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 298
fn l298_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l298_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, -0.0 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 299
fn l299_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l299_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, 0.0 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 300
fn l300_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l300_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, -0.0 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 301
fn l301_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l301_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, 0.0 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 302
fn l302_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l302_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 303
fn l303_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l303_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 304
fn l304_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l304_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 305
fn l305_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l305_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 306
fn l306_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l306_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 307
fn l307_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l307_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 308
fn l308_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l308_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 309
fn l309_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l309_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 310
fn l310_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l310_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, -0.5 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 311
fn l311_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l311_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, 0.5 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 312
fn l312_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l312_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, -0.5 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 313
fn l313_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l313_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, 0.5 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 314
fn l314_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l314_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, -1.0 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 315
fn l315_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l315_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, 1.0 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 316
fn l316_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l316_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, -1.0 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 317
fn l317_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l317_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, 1.0 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 318
fn l318_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l318_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 319
fn l319_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l319_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 320
fn l320_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l320_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 321
fn l321_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l321_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 322
fn l322_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l322_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 323
fn l323_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l323_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 324
fn l324_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l324_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 325
fn l325_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l325_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 326
fn l326_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l326_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 327
fn l327_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l327_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 328
fn l328_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l328_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 329
fn l329_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l329_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 330
fn l330_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l330_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 331
fn l331_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l331_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 332
fn l332_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l332_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 333
fn l333_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l333_action_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 334
fn l334_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l334_action_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 335
fn l335_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l335_action_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 336
fn l336_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l336_action_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 337
fn l337_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l337_action_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 338
fn l338_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l338_action_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 339
fn l339_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l339_action_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 340
fn l340_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l340_action_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 341
fn l341_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l341_action_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 342
fn l342_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l342_action_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 343
fn l343_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l343_action_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 344
fn l344_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l344_action_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 345
fn l345_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l345_action_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 346
fn l346_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l346_action_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 347
fn l347_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l347_action_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 348
fn l348_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l348_action_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 349
fn l349_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l349_action_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 350
fn l350_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l350_action_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 351
fn l351_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l351_action_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 352
fn l352_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l352_action_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 353
fn l353_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l353_action_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 354
fn l354_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l354_action_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 355
fn l355_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l355_action_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 356
fn l356_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l356_action_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 357
fn l357_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l357_action_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 358
fn l358_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l358_action_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 359
fn l359_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l359_action_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 360
fn l360_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l360_action_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 361
fn l361_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l361_action_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 362
fn l362_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l362_action_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 363
fn l363_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l363_action_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 364
fn l364_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l364_action_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 365
fn l365_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l365_action_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 366
fn l366_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l366_action_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 367
fn l367_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l367_action_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 368
fn l368_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l368_action_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-std::f64::NAN, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 369
fn l369_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l369_action_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(std::f64::NAN, &vm_context);
    assert!(result.is_nan());
            assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

#[test]
fn test_module_1() {
    let result_object = create_module_1();
    let vm_context = result_object.instance.generate_context();
    // We group the calls together
    l10_action_invoke(&result_object, &vm_context);
    l11_action_invoke(&result_object, &vm_context);
    l12_action_invoke(&result_object, &vm_context);
    l13_action_invoke(&result_object, &vm_context);
    l14_action_invoke(&result_object, &vm_context);
    l15_action_invoke(&result_object, &vm_context);
    l16_action_invoke(&result_object, &vm_context);
    l17_action_invoke(&result_object, &vm_context);
    l18_action_invoke(&result_object, &vm_context);
    l19_action_invoke(&result_object, &vm_context);
    l20_action_invoke(&result_object, &vm_context);
    l21_action_invoke(&result_object, &vm_context);
    l22_action_invoke(&result_object, &vm_context);
    l23_action_invoke(&result_object, &vm_context);
    l24_action_invoke(&result_object, &vm_context);
    l25_action_invoke(&result_object, &vm_context);
    l26_action_invoke(&result_object, &vm_context);
    l27_action_invoke(&result_object, &vm_context);
    l28_action_invoke(&result_object, &vm_context);
    l29_action_invoke(&result_object, &vm_context);
    l30_action_invoke(&result_object, &vm_context);
    l31_action_invoke(&result_object, &vm_context);
    l32_action_invoke(&result_object, &vm_context);
    l33_action_invoke(&result_object, &vm_context);
    l34_action_invoke(&result_object, &vm_context);
    l35_action_invoke(&result_object, &vm_context);
    l36_action_invoke(&result_object, &vm_context);
    l37_action_invoke(&result_object, &vm_context);
    l38_action_invoke(&result_object, &vm_context);
    l39_action_invoke(&result_object, &vm_context);
    l40_action_invoke(&result_object, &vm_context);
    l41_action_invoke(&result_object, &vm_context);
    l42_action_invoke(&result_object, &vm_context);
    l43_action_invoke(&result_object, &vm_context);
    l44_action_invoke(&result_object, &vm_context);
    l45_action_invoke(&result_object, &vm_context);
    l46_action_invoke(&result_object, &vm_context);
    l47_action_invoke(&result_object, &vm_context);
    l48_action_invoke(&result_object, &vm_context);
    l49_action_invoke(&result_object, &vm_context);
    l50_action_invoke(&result_object, &vm_context);
    l51_action_invoke(&result_object, &vm_context);
    l52_action_invoke(&result_object, &vm_context);
    l53_action_invoke(&result_object, &vm_context);
    l54_action_invoke(&result_object, &vm_context);
    l55_action_invoke(&result_object, &vm_context);
    l56_action_invoke(&result_object, &vm_context);
    l57_action_invoke(&result_object, &vm_context);
    l58_action_invoke(&result_object, &vm_context);
    l59_action_invoke(&result_object, &vm_context);
    l60_action_invoke(&result_object, &vm_context);
    l61_action_invoke(&result_object, &vm_context);
    l62_action_invoke(&result_object, &vm_context);
    l63_action_invoke(&result_object, &vm_context);
    l64_action_invoke(&result_object, &vm_context);
    l65_action_invoke(&result_object, &vm_context);
    l66_action_invoke(&result_object, &vm_context);
    l67_action_invoke(&result_object, &vm_context);
    l68_action_invoke(&result_object, &vm_context);
    l69_action_invoke(&result_object, &vm_context);
    l70_action_invoke(&result_object, &vm_context);
    l71_action_invoke(&result_object, &vm_context);
    l72_action_invoke(&result_object, &vm_context);
    l73_action_invoke(&result_object, &vm_context);
    l74_action_invoke(&result_object, &vm_context);
    l75_action_invoke(&result_object, &vm_context);
    l76_action_invoke(&result_object, &vm_context);
    l77_action_invoke(&result_object, &vm_context);
    l78_action_invoke(&result_object, &vm_context);
    l79_action_invoke(&result_object, &vm_context);
    l80_action_invoke(&result_object, &vm_context);
    l81_action_invoke(&result_object, &vm_context);
    l82_action_invoke(&result_object, &vm_context);
    l83_action_invoke(&result_object, &vm_context);
    l84_action_invoke(&result_object, &vm_context);
    l85_action_invoke(&result_object, &vm_context);
    l86_action_invoke(&result_object, &vm_context);
    l87_action_invoke(&result_object, &vm_context);
    l88_action_invoke(&result_object, &vm_context);
    l89_action_invoke(&result_object, &vm_context);
    l90_action_invoke(&result_object, &vm_context);
    l91_action_invoke(&result_object, &vm_context);
    l92_action_invoke(&result_object, &vm_context);
    l93_action_invoke(&result_object, &vm_context);
    l94_action_invoke(&result_object, &vm_context);
    l95_action_invoke(&result_object, &vm_context);
    l96_action_invoke(&result_object, &vm_context);
    l97_action_invoke(&result_object, &vm_context);
    l98_action_invoke(&result_object, &vm_context);
    l99_action_invoke(&result_object, &vm_context);
    l100_action_invoke(&result_object, &vm_context);
    l101_action_invoke(&result_object, &vm_context);
    l102_action_invoke(&result_object, &vm_context);
    l103_action_invoke(&result_object, &vm_context);
    l104_action_invoke(&result_object, &vm_context);
    l105_action_invoke(&result_object, &vm_context);
    l106_action_invoke(&result_object, &vm_context);
    l107_action_invoke(&result_object, &vm_context);
    l108_action_invoke(&result_object, &vm_context);
    l109_action_invoke(&result_object, &vm_context);
    l110_action_invoke(&result_object, &vm_context);
    l111_action_invoke(&result_object, &vm_context);
    l112_action_invoke(&result_object, &vm_context);
    l113_action_invoke(&result_object, &vm_context);
    l114_action_invoke(&result_object, &vm_context);
    l115_action_invoke(&result_object, &vm_context);
    l116_action_invoke(&result_object, &vm_context);
    l117_action_invoke(&result_object, &vm_context);
    l118_action_invoke(&result_object, &vm_context);
    l119_action_invoke(&result_object, &vm_context);
    l120_action_invoke(&result_object, &vm_context);
    l121_action_invoke(&result_object, &vm_context);
    l122_action_invoke(&result_object, &vm_context);
    l123_action_invoke(&result_object, &vm_context);
    l124_action_invoke(&result_object, &vm_context);
    l125_action_invoke(&result_object, &vm_context);
    l126_action_invoke(&result_object, &vm_context);
    l127_action_invoke(&result_object, &vm_context);
    l128_action_invoke(&result_object, &vm_context);
    l129_action_invoke(&result_object, &vm_context);
    l130_action_invoke(&result_object, &vm_context);
    l131_action_invoke(&result_object, &vm_context);
    l132_action_invoke(&result_object, &vm_context);
    l133_action_invoke(&result_object, &vm_context);
    l134_action_invoke(&result_object, &vm_context);
    l135_action_invoke(&result_object, &vm_context);
    l136_action_invoke(&result_object, &vm_context);
    l137_action_invoke(&result_object, &vm_context);
    l138_action_invoke(&result_object, &vm_context);
    l139_action_invoke(&result_object, &vm_context);
    l140_action_invoke(&result_object, &vm_context);
    l141_action_invoke(&result_object, &vm_context);
    l142_action_invoke(&result_object, &vm_context);
    l143_action_invoke(&result_object, &vm_context);
    l144_action_invoke(&result_object, &vm_context);
    l145_action_invoke(&result_object, &vm_context);
    l146_action_invoke(&result_object, &vm_context);
    l147_action_invoke(&result_object, &vm_context);
    l148_action_invoke(&result_object, &vm_context);
    l149_action_invoke(&result_object, &vm_context);
    l150_action_invoke(&result_object, &vm_context);
    l151_action_invoke(&result_object, &vm_context);
    l152_action_invoke(&result_object, &vm_context);
    l153_action_invoke(&result_object, &vm_context);
    l154_action_invoke(&result_object, &vm_context);
    l155_action_invoke(&result_object, &vm_context);
    l156_action_invoke(&result_object, &vm_context);
    l157_action_invoke(&result_object, &vm_context);
    l158_action_invoke(&result_object, &vm_context);
    l159_action_invoke(&result_object, &vm_context);
    l160_action_invoke(&result_object, &vm_context);
    l161_action_invoke(&result_object, &vm_context);
    l162_action_invoke(&result_object, &vm_context);
    l163_action_invoke(&result_object, &vm_context);
    l164_action_invoke(&result_object, &vm_context);
    l165_action_invoke(&result_object, &vm_context);
    l166_action_invoke(&result_object, &vm_context);
    l167_action_invoke(&result_object, &vm_context);
    l168_action_invoke(&result_object, &vm_context);
    l169_action_invoke(&result_object, &vm_context);
    l170_action_invoke(&result_object, &vm_context);
    l171_action_invoke(&result_object, &vm_context);
    l172_action_invoke(&result_object, &vm_context);
    l173_action_invoke(&result_object, &vm_context);
    l174_action_invoke(&result_object, &vm_context);
    l175_action_invoke(&result_object, &vm_context);
    l176_action_invoke(&result_object, &vm_context);
    l177_action_invoke(&result_object, &vm_context);
    l178_action_invoke(&result_object, &vm_context);
    l179_action_invoke(&result_object, &vm_context);
    l180_action_invoke(&result_object, &vm_context);
    l181_action_invoke(&result_object, &vm_context);
    l182_action_invoke(&result_object, &vm_context);
    l183_action_invoke(&result_object, &vm_context);
    l184_action_invoke(&result_object, &vm_context);
    l185_action_invoke(&result_object, &vm_context);
    l186_action_invoke(&result_object, &vm_context);
    l187_action_invoke(&result_object, &vm_context);
    l188_action_invoke(&result_object, &vm_context);
    l189_action_invoke(&result_object, &vm_context);
    l190_action_invoke(&result_object, &vm_context);
    l191_action_invoke(&result_object, &vm_context);
    l192_action_invoke(&result_object, &vm_context);
    l193_action_invoke(&result_object, &vm_context);
    l194_action_invoke(&result_object, &vm_context);
    l195_action_invoke(&result_object, &vm_context);
    l196_action_invoke(&result_object, &vm_context);
    l197_action_invoke(&result_object, &vm_context);
    l198_action_invoke(&result_object, &vm_context);
    l199_action_invoke(&result_object, &vm_context);
    l200_action_invoke(&result_object, &vm_context);
    l201_action_invoke(&result_object, &vm_context);
    l202_action_invoke(&result_object, &vm_context);
    l203_action_invoke(&result_object, &vm_context);
    l204_action_invoke(&result_object, &vm_context);
    l205_action_invoke(&result_object, &vm_context);
    l206_action_invoke(&result_object, &vm_context);
    l207_action_invoke(&result_object, &vm_context);
    l208_action_invoke(&result_object, &vm_context);
    l209_action_invoke(&result_object, &vm_context);
    l210_action_invoke(&result_object, &vm_context);
    l211_action_invoke(&result_object, &vm_context);
    l212_action_invoke(&result_object, &vm_context);
    l213_action_invoke(&result_object, &vm_context);
    l214_action_invoke(&result_object, &vm_context);
    l215_action_invoke(&result_object, &vm_context);
    l216_action_invoke(&result_object, &vm_context);
    l217_action_invoke(&result_object, &vm_context);
    l218_action_invoke(&result_object, &vm_context);
    l219_action_invoke(&result_object, &vm_context);
    l220_action_invoke(&result_object, &vm_context);
    l221_action_invoke(&result_object, &vm_context);
    l222_action_invoke(&result_object, &vm_context);
    l223_action_invoke(&result_object, &vm_context);
    l224_action_invoke(&result_object, &vm_context);
    l225_action_invoke(&result_object, &vm_context);
    l226_action_invoke(&result_object, &vm_context);
    l227_action_invoke(&result_object, &vm_context);
    l228_action_invoke(&result_object, &vm_context);
    l229_action_invoke(&result_object, &vm_context);
    l230_action_invoke(&result_object, &vm_context);
    l231_action_invoke(&result_object, &vm_context);
    l232_action_invoke(&result_object, &vm_context);
    l233_action_invoke(&result_object, &vm_context);
    l234_action_invoke(&result_object, &vm_context);
    l235_action_invoke(&result_object, &vm_context);
    l236_action_invoke(&result_object, &vm_context);
    l237_action_invoke(&result_object, &vm_context);
    l238_action_invoke(&result_object, &vm_context);
    l239_action_invoke(&result_object, &vm_context);
    l240_action_invoke(&result_object, &vm_context);
    l241_action_invoke(&result_object, &vm_context);
    l242_action_invoke(&result_object, &vm_context);
    l243_action_invoke(&result_object, &vm_context);
    l244_action_invoke(&result_object, &vm_context);
    l245_action_invoke(&result_object, &vm_context);
    l246_action_invoke(&result_object, &vm_context);
    l247_action_invoke(&result_object, &vm_context);
    l248_action_invoke(&result_object, &vm_context);
    l249_action_invoke(&result_object, &vm_context);
    l250_action_invoke(&result_object, &vm_context);
    l251_action_invoke(&result_object, &vm_context);
    l252_action_invoke(&result_object, &vm_context);
    l253_action_invoke(&result_object, &vm_context);
    l254_action_invoke(&result_object, &vm_context);
    l255_action_invoke(&result_object, &vm_context);
    l256_action_invoke(&result_object, &vm_context);
    l257_action_invoke(&result_object, &vm_context);
    l258_action_invoke(&result_object, &vm_context);
    l259_action_invoke(&result_object, &vm_context);
    l260_action_invoke(&result_object, &vm_context);
    l261_action_invoke(&result_object, &vm_context);
    l262_action_invoke(&result_object, &vm_context);
    l263_action_invoke(&result_object, &vm_context);
    l264_action_invoke(&result_object, &vm_context);
    l265_action_invoke(&result_object, &vm_context);
    l266_action_invoke(&result_object, &vm_context);
    l267_action_invoke(&result_object, &vm_context);
    l268_action_invoke(&result_object, &vm_context);
    l269_action_invoke(&result_object, &vm_context);
    l270_action_invoke(&result_object, &vm_context);
    l271_action_invoke(&result_object, &vm_context);
    l272_action_invoke(&result_object, &vm_context);
    l273_action_invoke(&result_object, &vm_context);
    l274_action_invoke(&result_object, &vm_context);
    l275_action_invoke(&result_object, &vm_context);
    l276_action_invoke(&result_object, &vm_context);
    l277_action_invoke(&result_object, &vm_context);
    l278_action_invoke(&result_object, &vm_context);
    l279_action_invoke(&result_object, &vm_context);
    l280_action_invoke(&result_object, &vm_context);
    l281_action_invoke(&result_object, &vm_context);
    l282_action_invoke(&result_object, &vm_context);
    l283_action_invoke(&result_object, &vm_context);
    l284_action_invoke(&result_object, &vm_context);
    l285_action_invoke(&result_object, &vm_context);
    l286_action_invoke(&result_object, &vm_context);
    l287_action_invoke(&result_object, &vm_context);
    l288_action_invoke(&result_object, &vm_context);
    l289_action_invoke(&result_object, &vm_context);
    l290_action_invoke(&result_object, &vm_context);
    l291_action_invoke(&result_object, &vm_context);
    l292_action_invoke(&result_object, &vm_context);
    l293_action_invoke(&result_object, &vm_context);
    l294_action_invoke(&result_object, &vm_context);
    l295_action_invoke(&result_object, &vm_context);
    l296_action_invoke(&result_object, &vm_context);
    l297_action_invoke(&result_object, &vm_context);
    l298_action_invoke(&result_object, &vm_context);
    l299_action_invoke(&result_object, &vm_context);
    l300_action_invoke(&result_object, &vm_context);
    l301_action_invoke(&result_object, &vm_context);
    l302_action_invoke(&result_object, &vm_context);
    l303_action_invoke(&result_object, &vm_context);
    l304_action_invoke(&result_object, &vm_context);
    l305_action_invoke(&result_object, &vm_context);
    l306_action_invoke(&result_object, &vm_context);
    l307_action_invoke(&result_object, &vm_context);
    l308_action_invoke(&result_object, &vm_context);
    l309_action_invoke(&result_object, &vm_context);
    l310_action_invoke(&result_object, &vm_context);
    l311_action_invoke(&result_object, &vm_context);
    l312_action_invoke(&result_object, &vm_context);
    l313_action_invoke(&result_object, &vm_context);
    l314_action_invoke(&result_object, &vm_context);
    l315_action_invoke(&result_object, &vm_context);
    l316_action_invoke(&result_object, &vm_context);
    l317_action_invoke(&result_object, &vm_context);
    l318_action_invoke(&result_object, &vm_context);
    l319_action_invoke(&result_object, &vm_context);
    l320_action_invoke(&result_object, &vm_context);
    l321_action_invoke(&result_object, &vm_context);
    l322_action_invoke(&result_object, &vm_context);
    l323_action_invoke(&result_object, &vm_context);
    l324_action_invoke(&result_object, &vm_context);
    l325_action_invoke(&result_object, &vm_context);
    l326_action_invoke(&result_object, &vm_context);
    l327_action_invoke(&result_object, &vm_context);
    l328_action_invoke(&result_object, &vm_context);
    l329_action_invoke(&result_object, &vm_context);
    l330_action_invoke(&result_object, &vm_context);
    l331_action_invoke(&result_object, &vm_context);
    l332_action_invoke(&result_object, &vm_context);
    l333_action_invoke(&result_object, &vm_context);
    l334_action_invoke(&result_object, &vm_context);
    l335_action_invoke(&result_object, &vm_context);
    l336_action_invoke(&result_object, &vm_context);
    l337_action_invoke(&result_object, &vm_context);
    l338_action_invoke(&result_object, &vm_context);
    l339_action_invoke(&result_object, &vm_context);
    l340_action_invoke(&result_object, &vm_context);
    l341_action_invoke(&result_object, &vm_context);
    l342_action_invoke(&result_object, &vm_context);
    l343_action_invoke(&result_object, &vm_context);
    l344_action_invoke(&result_object, &vm_context);
    l345_action_invoke(&result_object, &vm_context);
    l346_action_invoke(&result_object, &vm_context);
    l347_action_invoke(&result_object, &vm_context);
    l348_action_invoke(&result_object, &vm_context);
    l349_action_invoke(&result_object, &vm_context);
    l350_action_invoke(&result_object, &vm_context);
    l351_action_invoke(&result_object, &vm_context);
    l352_action_invoke(&result_object, &vm_context);
    l353_action_invoke(&result_object, &vm_context);
    l354_action_invoke(&result_object, &vm_context);
    l355_action_invoke(&result_object, &vm_context);
    l356_action_invoke(&result_object, &vm_context);
    l357_action_invoke(&result_object, &vm_context);
    l358_action_invoke(&result_object, &vm_context);
    l359_action_invoke(&result_object, &vm_context);
    l360_action_invoke(&result_object, &vm_context);
    l361_action_invoke(&result_object, &vm_context);
    l362_action_invoke(&result_object, &vm_context);
    l363_action_invoke(&result_object, &vm_context);
    l364_action_invoke(&result_object, &vm_context);
    l365_action_invoke(&result_object, &vm_context);
    l366_action_invoke(&result_object, &vm_context);
    l367_action_invoke(&result_object, &vm_context);
    l368_action_invoke(&result_object, &vm_context);
    l369_action_invoke(&result_object, &vm_context);
}
