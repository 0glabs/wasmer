// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/f64_bitwise.wast
#![allow(
    warnings,
    dead_code
)]
use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, VmCtx, Export};
use super::_common::spectest_importobject;
use wabt::wat2wasm;


// Line 4
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param f64) (result f64)))
      (type (;1;) (func (param f64 f64) (result f64)))
      (func (;0;) (type 0) (param f64) (result f64)
        get_local 0
        f64.abs)
      (func (;1;) (type 0) (param f64) (result f64)
        get_local 0
        f64.neg)
      (func (;2;) (type 1) (param f64 f64) (result f64)
        get_local 0
        get_local 1
        f64.copysign)
      (export \"abs\" (func 0))
      (export \"neg\" (func 1))
      (export \"copysign\" (func 2)))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 10
fn l10_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l10_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 11
fn l11_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l11_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 12
fn l12_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l12_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 13
fn l13_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l13_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 14
fn l14_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l14_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 15
fn l15_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l15_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 16
fn l16_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l16_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 17
fn l17_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l17_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 18
fn l18_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l18_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 19
fn l19_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l19_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 20
fn l20_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l20_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 21
fn l21_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l21_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 22
fn l22_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l22_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 23
fn l23_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l23_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 24
fn l24_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l24_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 25
fn l25_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l25_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 26
fn l26_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l26_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 27
fn l27_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l27_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 28
fn l28_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l28_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 29
fn l29_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l29_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 30
fn l30_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l30_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 31
fn l31_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l31_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 32
fn l32_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l32_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 33
fn l33_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l33_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 34
fn l34_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l34_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 35
fn l35_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l35_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 36
fn l36_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l36_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 37
fn l37_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l37_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 38
fn l38_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l38_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 39
fn l39_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l39_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 40
fn l40_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l40_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 41
fn l41_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l41_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 42
fn l42_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l42_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 43
fn l43_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l43_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 44
fn l44_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l44_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 45
fn l45_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l45_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 46
fn l46_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l46_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 47
fn l47_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l47_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 48
fn l48_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l48_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 49
fn l49_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l49_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 50
fn l50_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l50_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 51
fn l51_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l51_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 52
fn l52_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l52_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 53
fn l53_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l53_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 54
fn l54_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l54_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 55
fn l55_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l55_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 56
fn l56_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l56_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 57
fn l57_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l57_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 58
fn l58_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l58_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 59
fn l59_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l59_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 60
fn l60_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l60_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 61
fn l61_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l61_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 62
fn l62_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l62_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 63
fn l63_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l63_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 64
fn l64_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l64_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 65
fn l65_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l65_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 66
fn l66_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l66_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 67
fn l67_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l67_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 68
fn l68_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l68_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 69
fn l69_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l69_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 70
fn l70_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l70_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 71
fn l71_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l71_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 72
fn l72_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l72_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 73
fn l73_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l73_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 74
fn l74_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l74_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 75
fn l75_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l75_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 76
fn l76_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l76_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 77
fn l77_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l77_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 78
fn l78_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l78_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 79
fn l79_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l79_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 80
fn l80_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l80_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 81
fn l81_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l81_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 82
fn l82_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l82_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 83
fn l83_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l83_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 84
fn l84_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l84_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 85
fn l85_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l85_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 86
fn l86_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l86_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 87
fn l87_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l87_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 88
fn l88_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l88_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 89
fn l89_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l89_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 90
fn l90_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l90_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 91
fn l91_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l91_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 92
fn l92_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l92_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 93
fn l93_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l93_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 94
fn l94_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l94_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 95
fn l95_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l95_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 96
fn l96_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l96_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 97
fn l97_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l97_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 98
fn l98_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l98_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 99
fn l99_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l99_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 100
fn l100_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l100_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 101
fn l101_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l101_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 102
fn l102_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l102_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 103
fn l103_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l103_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 104
fn l104_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l104_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 105
fn l105_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l105_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 106
fn l106_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l106_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 107
fn l107_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l107_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 108
fn l108_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l108_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 109
fn l109_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l109_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 110
fn l110_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l110_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 111
fn l111_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l111_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 112
fn l112_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l112_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 113
fn l113_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l113_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 114
fn l114_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l114_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 115
fn l115_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l115_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 116
fn l116_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l116_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 117
fn l117_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l117_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 118
fn l118_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l118_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 119
fn l119_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l119_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 120
fn l120_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l120_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 121
fn l121_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l121_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 122
fn l122_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l122_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 123
fn l123_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l123_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 124
fn l124_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l124_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 125
fn l125_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l125_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 126
fn l126_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l126_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 127
fn l127_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l127_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 128
fn l128_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l128_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 129
fn l129_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l129_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 130
fn l130_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l130_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 131
fn l131_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l131_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 132
fn l132_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l132_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 133
fn l133_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l133_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 134
fn l134_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l134_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 135
fn l135_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l135_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 136
fn l136_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l136_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 137
fn l137_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l137_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 138
fn l138_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l138_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 139
fn l139_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l139_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 140
fn l140_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l140_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 141
fn l141_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l141_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 142
fn l142_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l142_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 143
fn l143_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l143_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 144
fn l144_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l144_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 145
fn l145_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l145_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 146
fn l146_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l146_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 147
fn l147_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l147_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 148
fn l148_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l148_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 149
fn l149_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l149_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 150
fn l150_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l150_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 151
fn l151_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l151_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 152
fn l152_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l152_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 153
fn l153_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l153_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 154
fn l154_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l154_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 155
fn l155_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l155_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 156
fn l156_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l156_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 157
fn l157_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l157_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 158
fn l158_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l158_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 159
fn l159_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l159_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 160
fn l160_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l160_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 161
fn l161_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l161_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 162
fn l162_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l162_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 163
fn l163_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l163_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 164
fn l164_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l164_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 165
fn l165_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l165_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 166
fn l166_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l166_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 167
fn l167_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l167_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 168
fn l168_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l168_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 169
fn l169_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l169_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 170
fn l170_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l170_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 171
fn l171_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l171_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 172
fn l172_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l172_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 173
fn l173_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l173_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 174
fn l174_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l174_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 175
fn l175_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l175_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 176
fn l176_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l176_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 177
fn l177_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l177_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 178
fn l178_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l178_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 179
fn l179_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l179_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 180
fn l180_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l180_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 181
fn l181_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l181_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 182
fn l182_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l182_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 183
fn l183_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l183_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 184
fn l184_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l184_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 185
fn l185_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l185_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 186
fn l186_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l186_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 187
fn l187_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l187_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 188
fn l188_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l188_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 189
fn l189_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l189_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 190
fn l190_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l190_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 191
fn l191_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l191_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 192
fn l192_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l192_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 193
fn l193_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l193_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 194
fn l194_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l194_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 195
fn l195_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l195_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 196
fn l196_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l196_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 197
fn l197_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l197_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 198
fn l198_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l198_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 199
fn l199_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l199_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 200
fn l200_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l200_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 201
fn l201_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l201_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 202
fn l202_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l202_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 203
fn l203_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l203_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 204
fn l204_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l204_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 205
fn l205_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l205_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 206
fn l206_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l206_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 207
fn l207_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l207_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 208
fn l208_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l208_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 209
fn l209_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l209_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 210
fn l210_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l210_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 211
fn l211_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l211_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 212
fn l212_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l212_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 213
fn l213_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l213_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 214
fn l214_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l214_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 215
fn l215_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l215_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 216
fn l216_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l216_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 217
fn l217_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l217_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 218
fn l218_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l218_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 219
fn l219_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l219_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 220
fn l220_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l220_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 221
fn l221_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l221_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 222
fn l222_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l222_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 223
fn l223_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l223_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 224
fn l224_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l224_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 225
fn l225_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l225_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 226
fn l226_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l226_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 227
fn l227_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l227_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 228
fn l228_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l228_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 229
fn l229_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l229_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 230
fn l230_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l230_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 231
fn l231_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l231_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 232
fn l232_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l232_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 233
fn l233_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l233_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 234
fn l234_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l234_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 235
fn l235_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l235_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 236
fn l236_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l236_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 237
fn l237_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l237_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 238
fn l238_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l238_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 239
fn l239_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l239_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 240
fn l240_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l240_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 241
fn l241_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l241_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 242
fn l242_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l242_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 243
fn l243_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l243_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 244
fn l244_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l244_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 245
fn l245_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l245_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 246
fn l246_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l246_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 247
fn l247_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l247_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 248
fn l248_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l248_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 249
fn l249_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l249_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 250
fn l250_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l250_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 251
fn l251_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l251_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 252
fn l252_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l252_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 253
fn l253_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l253_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 254
fn l254_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l254_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 255
fn l255_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l255_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 256
fn l256_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l256_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 257
fn l257_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l257_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 258
fn l258_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l258_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 259
fn l259_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l259_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 260
fn l260_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l260_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 261
fn l261_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l261_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 262
fn l262_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l262_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 263
fn l263_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l263_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 264
fn l264_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l264_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 265
fn l265_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l265_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 266
fn l266_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l266_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 267
fn l267_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l267_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 268
fn l268_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l268_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 269
fn l269_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l269_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 270
fn l270_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l270_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 271
fn l271_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l271_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 272
fn l272_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l272_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 273
fn l273_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l273_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 274
fn l274_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l274_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 275
fn l275_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l275_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 276
fn l276_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l276_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 277
fn l277_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l277_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 278
fn l278_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l278_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 279
fn l279_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l279_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 280
fn l280_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l280_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 281
fn l281_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l281_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 282
fn l282_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l282_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 283
fn l283_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l283_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 284
fn l284_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l284_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 285
fn l285_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l285_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 286
fn l286_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l286_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 287
fn l287_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l287_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 288
fn l288_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l288_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 289
fn l289_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l289_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 290
fn l290_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l290_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 291
fn l291_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l291_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 292
fn l292_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l292_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 293
fn l293_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l293_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 294
fn l294_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l294_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 295
fn l295_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l295_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 296
fn l296_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l296_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 297
fn l297_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l297_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 298
fn l298_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l298_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.0 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 299
fn l299_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l299_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.0 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 300
fn l300_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l300_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.0 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 301
fn l301_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l301_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.0 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 302
fn l302_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l302_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 303
fn l303_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l303_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 304
fn l304_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l304_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 305
fn l305_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l305_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 306
fn l306_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l306_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 307
fn l307_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l307_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 308
fn l308_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l308_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 309
fn l309_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l309_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 310
fn l310_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l310_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.5 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 311
fn l311_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l311_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.5 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 312
fn l312_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l312_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.5 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 313
fn l313_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l313_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.5 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 314
fn l314_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l314_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -1.0 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 315
fn l315_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l315_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 1.0 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 316
fn l316_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l316_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -1.0 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 317
fn l317_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l317_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 1.0 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 318
fn l318_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l318_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 319
fn l319_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l319_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 320
fn l320_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l320_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 321
fn l321_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l321_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 322
fn l322_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l322_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 323
fn l323_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l323_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 324
fn l324_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l324_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 325
fn l325_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l325_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 326
fn l326_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l326_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 327
fn l327_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l327_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 328
fn l328_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l328_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 329
fn l329_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l329_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 330
fn l330_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l330_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 331
fn l331_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l331_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 332
fn l332_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l332_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

// Line 333
fn l333_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l333_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 334
fn l334_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l334_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 335
fn l335_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l335_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 336
fn l336_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l336_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 337
fn l337_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l337_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 338
fn l338_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l338_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 339
fn l339_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l339_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 340
fn l340_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l340_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 341
fn l341_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l341_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 342
fn l342_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l342_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 343
fn l343_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l343_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 344
fn l344_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l344_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 345
fn l345_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l345_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 346
fn l346_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l346_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 347
fn l347_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l347_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 348
fn l348_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l348_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 349
fn l349_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l349_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 350
fn l350_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l350_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 351
fn l351_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l351_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("abs") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 352
fn l352_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l352_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 353
fn l353_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l353_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, &vm_context);
    assert_eq!(result, -0.0 as f64);
}

// Line 354
fn l354_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l354_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 355
fn l355_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l355_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64);
}

// Line 356
fn l356_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l356_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 357
fn l357_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l357_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64);
}

// Line 358
fn l358_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l358_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, &vm_context);
    assert_eq!(result, 0.5 as f64);
}

// Line 359
fn l359_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l359_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, &vm_context);
    assert_eq!(result, -0.5 as f64);
}

// Line 360
fn l360_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l360_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, &vm_context);
    assert_eq!(result, 1.0 as f64);
}

// Line 361
fn l361_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l361_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, &vm_context);
    assert_eq!(result, -1.0 as f64);
}

// Line 362
fn l362_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l362_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 6.283185307179586 as f64);
}

// Line 363
fn l363_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l363_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, &vm_context);
    assert_eq!(result, -6.283185307179586 as f64);
}

// Line 364
fn l364_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l364_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 365
fn l365_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l365_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64);
}

// Line 366
fn l366_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l366_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, std::f64::INFINITY);
}

// Line 367
fn l367_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l367_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, &vm_context);
    assert_eq!(result, std::f64::NEG_INFINITY);
}

// Line 368
fn l368_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l368_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 369
fn l369_assert_return_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "l369_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("neg") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (-std::f64::NAN).is_sign_positive());
}

#[test]
fn test_module_1() {
    let result_object = create_module_1();
    // We group the calls together
    l10_assert_return_invoke(&result_object);
    l11_assert_return_invoke(&result_object);
    l12_assert_return_invoke(&result_object);
    l13_assert_return_invoke(&result_object);
    l14_assert_return_invoke(&result_object);
    l15_assert_return_invoke(&result_object);
    l16_assert_return_invoke(&result_object);
    l17_assert_return_invoke(&result_object);
    l18_assert_return_invoke(&result_object);
    l19_assert_return_invoke(&result_object);
    l20_assert_return_invoke(&result_object);
    l21_assert_return_invoke(&result_object);
    l22_assert_return_invoke(&result_object);
    l23_assert_return_invoke(&result_object);
    l24_assert_return_invoke(&result_object);
    l25_assert_return_invoke(&result_object);
    l26_assert_return_invoke(&result_object);
    l27_assert_return_invoke(&result_object);
    l28_assert_return_invoke(&result_object);
    l29_assert_return_invoke(&result_object);
    l30_assert_return_invoke(&result_object);
    l31_assert_return_invoke(&result_object);
    l32_assert_return_invoke(&result_object);
    l33_assert_return_invoke(&result_object);
    l34_assert_return_invoke(&result_object);
    l35_assert_return_invoke(&result_object);
    l36_assert_return_invoke(&result_object);
    l37_assert_return_invoke(&result_object);
    l38_assert_return_invoke(&result_object);
    l39_assert_return_invoke(&result_object);
    l40_assert_return_invoke(&result_object);
    l41_assert_return_invoke(&result_object);
    l42_assert_return_invoke(&result_object);
    l43_assert_return_invoke(&result_object);
    l44_assert_return_invoke(&result_object);
    l45_assert_return_invoke(&result_object);
    l46_assert_return_invoke(&result_object);
    l47_assert_return_invoke(&result_object);
    l48_assert_return_invoke(&result_object);
    l49_assert_return_invoke(&result_object);
    l50_assert_return_invoke(&result_object);
    l51_assert_return_invoke(&result_object);
    l52_assert_return_invoke(&result_object);
    l53_assert_return_invoke(&result_object);
    l54_assert_return_invoke(&result_object);
    l55_assert_return_invoke(&result_object);
    l56_assert_return_invoke(&result_object);
    l57_assert_return_invoke(&result_object);
    l58_assert_return_invoke(&result_object);
    l59_assert_return_invoke(&result_object);
    l60_assert_return_invoke(&result_object);
    l61_assert_return_invoke(&result_object);
    l62_assert_return_invoke(&result_object);
    l63_assert_return_invoke(&result_object);
    l64_assert_return_invoke(&result_object);
    l65_assert_return_invoke(&result_object);
    l66_assert_return_invoke(&result_object);
    l67_assert_return_invoke(&result_object);
    l68_assert_return_invoke(&result_object);
    l69_assert_return_invoke(&result_object);
    l70_assert_return_invoke(&result_object);
    l71_assert_return_invoke(&result_object);
    l72_assert_return_invoke(&result_object);
    l73_assert_return_invoke(&result_object);
    l74_assert_return_invoke(&result_object);
    l75_assert_return_invoke(&result_object);
    l76_assert_return_invoke(&result_object);
    l77_assert_return_invoke(&result_object);
    l78_assert_return_invoke(&result_object);
    l79_assert_return_invoke(&result_object);
    l80_assert_return_invoke(&result_object);
    l81_assert_return_invoke(&result_object);
    l82_assert_return_invoke(&result_object);
    l83_assert_return_invoke(&result_object);
    l84_assert_return_invoke(&result_object);
    l85_assert_return_invoke(&result_object);
    l86_assert_return_invoke(&result_object);
    l87_assert_return_invoke(&result_object);
    l88_assert_return_invoke(&result_object);
    l89_assert_return_invoke(&result_object);
    l90_assert_return_invoke(&result_object);
    l91_assert_return_invoke(&result_object);
    l92_assert_return_invoke(&result_object);
    l93_assert_return_invoke(&result_object);
    l94_assert_return_invoke(&result_object);
    l95_assert_return_invoke(&result_object);
    l96_assert_return_invoke(&result_object);
    l97_assert_return_invoke(&result_object);
    l98_assert_return_invoke(&result_object);
    l99_assert_return_invoke(&result_object);
    l100_assert_return_invoke(&result_object);
    l101_assert_return_invoke(&result_object);
    l102_assert_return_invoke(&result_object);
    l103_assert_return_invoke(&result_object);
    l104_assert_return_invoke(&result_object);
    l105_assert_return_invoke(&result_object);
    l106_assert_return_invoke(&result_object);
    l107_assert_return_invoke(&result_object);
    l108_assert_return_invoke(&result_object);
    l109_assert_return_invoke(&result_object);
    l110_assert_return_invoke(&result_object);
    l111_assert_return_invoke(&result_object);
    l112_assert_return_invoke(&result_object);
    l113_assert_return_invoke(&result_object);
    l114_assert_return_invoke(&result_object);
    l115_assert_return_invoke(&result_object);
    l116_assert_return_invoke(&result_object);
    l117_assert_return_invoke(&result_object);
    l118_assert_return_invoke(&result_object);
    l119_assert_return_invoke(&result_object);
    l120_assert_return_invoke(&result_object);
    l121_assert_return_invoke(&result_object);
    l122_assert_return_invoke(&result_object);
    l123_assert_return_invoke(&result_object);
    l124_assert_return_invoke(&result_object);
    l125_assert_return_invoke(&result_object);
    l126_assert_return_invoke(&result_object);
    l127_assert_return_invoke(&result_object);
    l128_assert_return_invoke(&result_object);
    l129_assert_return_invoke(&result_object);
    l130_assert_return_invoke(&result_object);
    l131_assert_return_invoke(&result_object);
    l132_assert_return_invoke(&result_object);
    l133_assert_return_invoke(&result_object);
    l134_assert_return_invoke(&result_object);
    l135_assert_return_invoke(&result_object);
    l136_assert_return_invoke(&result_object);
    l137_assert_return_invoke(&result_object);
    l138_assert_return_invoke(&result_object);
    l139_assert_return_invoke(&result_object);
    l140_assert_return_invoke(&result_object);
    l141_assert_return_invoke(&result_object);
    l142_assert_return_invoke(&result_object);
    l143_assert_return_invoke(&result_object);
    l144_assert_return_invoke(&result_object);
    l145_assert_return_invoke(&result_object);
    l146_assert_return_invoke(&result_object);
    l147_assert_return_invoke(&result_object);
    l148_assert_return_invoke(&result_object);
    l149_assert_return_invoke(&result_object);
    l150_assert_return_invoke(&result_object);
    l151_assert_return_invoke(&result_object);
    l152_assert_return_invoke(&result_object);
    l153_assert_return_invoke(&result_object);
    l154_assert_return_invoke(&result_object);
    l155_assert_return_invoke(&result_object);
    l156_assert_return_invoke(&result_object);
    l157_assert_return_invoke(&result_object);
    l158_assert_return_invoke(&result_object);
    l159_assert_return_invoke(&result_object);
    l160_assert_return_invoke(&result_object);
    l161_assert_return_invoke(&result_object);
    l162_assert_return_invoke(&result_object);
    l163_assert_return_invoke(&result_object);
    l164_assert_return_invoke(&result_object);
    l165_assert_return_invoke(&result_object);
    l166_assert_return_invoke(&result_object);
    l167_assert_return_invoke(&result_object);
    l168_assert_return_invoke(&result_object);
    l169_assert_return_invoke(&result_object);
    l170_assert_return_invoke(&result_object);
    l171_assert_return_invoke(&result_object);
    l172_assert_return_invoke(&result_object);
    l173_assert_return_invoke(&result_object);
    l174_assert_return_invoke(&result_object);
    l175_assert_return_invoke(&result_object);
    l176_assert_return_invoke(&result_object);
    l177_assert_return_invoke(&result_object);
    l178_assert_return_invoke(&result_object);
    l179_assert_return_invoke(&result_object);
    l180_assert_return_invoke(&result_object);
    l181_assert_return_invoke(&result_object);
    l182_assert_return_invoke(&result_object);
    l183_assert_return_invoke(&result_object);
    l184_assert_return_invoke(&result_object);
    l185_assert_return_invoke(&result_object);
    l186_assert_return_invoke(&result_object);
    l187_assert_return_invoke(&result_object);
    l188_assert_return_invoke(&result_object);
    l189_assert_return_invoke(&result_object);
    l190_assert_return_invoke(&result_object);
    l191_assert_return_invoke(&result_object);
    l192_assert_return_invoke(&result_object);
    l193_assert_return_invoke(&result_object);
    l194_assert_return_invoke(&result_object);
    l195_assert_return_invoke(&result_object);
    l196_assert_return_invoke(&result_object);
    l197_assert_return_invoke(&result_object);
    l198_assert_return_invoke(&result_object);
    l199_assert_return_invoke(&result_object);
    l200_assert_return_invoke(&result_object);
    l201_assert_return_invoke(&result_object);
    l202_assert_return_invoke(&result_object);
    l203_assert_return_invoke(&result_object);
    l204_assert_return_invoke(&result_object);
    l205_assert_return_invoke(&result_object);
    l206_assert_return_invoke(&result_object);
    l207_assert_return_invoke(&result_object);
    l208_assert_return_invoke(&result_object);
    l209_assert_return_invoke(&result_object);
    l210_assert_return_invoke(&result_object);
    l211_assert_return_invoke(&result_object);
    l212_assert_return_invoke(&result_object);
    l213_assert_return_invoke(&result_object);
    l214_assert_return_invoke(&result_object);
    l215_assert_return_invoke(&result_object);
    l216_assert_return_invoke(&result_object);
    l217_assert_return_invoke(&result_object);
    l218_assert_return_invoke(&result_object);
    l219_assert_return_invoke(&result_object);
    l220_assert_return_invoke(&result_object);
    l221_assert_return_invoke(&result_object);
    l222_assert_return_invoke(&result_object);
    l223_assert_return_invoke(&result_object);
    l224_assert_return_invoke(&result_object);
    l225_assert_return_invoke(&result_object);
    l226_assert_return_invoke(&result_object);
    l227_assert_return_invoke(&result_object);
    l228_assert_return_invoke(&result_object);
    l229_assert_return_invoke(&result_object);
    l230_assert_return_invoke(&result_object);
    l231_assert_return_invoke(&result_object);
    l232_assert_return_invoke(&result_object);
    l233_assert_return_invoke(&result_object);
    l234_assert_return_invoke(&result_object);
    l235_assert_return_invoke(&result_object);
    l236_assert_return_invoke(&result_object);
    l237_assert_return_invoke(&result_object);
    l238_assert_return_invoke(&result_object);
    l239_assert_return_invoke(&result_object);
    l240_assert_return_invoke(&result_object);
    l241_assert_return_invoke(&result_object);
    l242_assert_return_invoke(&result_object);
    l243_assert_return_invoke(&result_object);
    l244_assert_return_invoke(&result_object);
    l245_assert_return_invoke(&result_object);
    l246_assert_return_invoke(&result_object);
    l247_assert_return_invoke(&result_object);
    l248_assert_return_invoke(&result_object);
    l249_assert_return_invoke(&result_object);
    l250_assert_return_invoke(&result_object);
    l251_assert_return_invoke(&result_object);
    l252_assert_return_invoke(&result_object);
    l253_assert_return_invoke(&result_object);
    l254_assert_return_invoke(&result_object);
    l255_assert_return_invoke(&result_object);
    l256_assert_return_invoke(&result_object);
    l257_assert_return_invoke(&result_object);
    l258_assert_return_invoke(&result_object);
    l259_assert_return_invoke(&result_object);
    l260_assert_return_invoke(&result_object);
    l261_assert_return_invoke(&result_object);
    l262_assert_return_invoke(&result_object);
    l263_assert_return_invoke(&result_object);
    l264_assert_return_invoke(&result_object);
    l265_assert_return_invoke(&result_object);
    l266_assert_return_invoke(&result_object);
    l267_assert_return_invoke(&result_object);
    l268_assert_return_invoke(&result_object);
    l269_assert_return_invoke(&result_object);
    l270_assert_return_invoke(&result_object);
    l271_assert_return_invoke(&result_object);
    l272_assert_return_invoke(&result_object);
    l273_assert_return_invoke(&result_object);
    l274_assert_return_invoke(&result_object);
    l275_assert_return_invoke(&result_object);
    l276_assert_return_invoke(&result_object);
    l277_assert_return_invoke(&result_object);
    l278_assert_return_invoke(&result_object);
    l279_assert_return_invoke(&result_object);
    l280_assert_return_invoke(&result_object);
    l281_assert_return_invoke(&result_object);
    l282_assert_return_invoke(&result_object);
    l283_assert_return_invoke(&result_object);
    l284_assert_return_invoke(&result_object);
    l285_assert_return_invoke(&result_object);
    l286_assert_return_invoke(&result_object);
    l287_assert_return_invoke(&result_object);
    l288_assert_return_invoke(&result_object);
    l289_assert_return_invoke(&result_object);
    l290_assert_return_invoke(&result_object);
    l291_assert_return_invoke(&result_object);
    l292_assert_return_invoke(&result_object);
    l293_assert_return_invoke(&result_object);
    l294_assert_return_invoke(&result_object);
    l295_assert_return_invoke(&result_object);
    l296_assert_return_invoke(&result_object);
    l297_assert_return_invoke(&result_object);
    l298_assert_return_invoke(&result_object);
    l299_assert_return_invoke(&result_object);
    l300_assert_return_invoke(&result_object);
    l301_assert_return_invoke(&result_object);
    l302_assert_return_invoke(&result_object);
    l303_assert_return_invoke(&result_object);
    l304_assert_return_invoke(&result_object);
    l305_assert_return_invoke(&result_object);
    l306_assert_return_invoke(&result_object);
    l307_assert_return_invoke(&result_object);
    l308_assert_return_invoke(&result_object);
    l309_assert_return_invoke(&result_object);
    l310_assert_return_invoke(&result_object);
    l311_assert_return_invoke(&result_object);
    l312_assert_return_invoke(&result_object);
    l313_assert_return_invoke(&result_object);
    l314_assert_return_invoke(&result_object);
    l315_assert_return_invoke(&result_object);
    l316_assert_return_invoke(&result_object);
    l317_assert_return_invoke(&result_object);
    l318_assert_return_invoke(&result_object);
    l319_assert_return_invoke(&result_object);
    l320_assert_return_invoke(&result_object);
    l321_assert_return_invoke(&result_object);
    l322_assert_return_invoke(&result_object);
    l323_assert_return_invoke(&result_object);
    l324_assert_return_invoke(&result_object);
    l325_assert_return_invoke(&result_object);
    l326_assert_return_invoke(&result_object);
    l327_assert_return_invoke(&result_object);
    l328_assert_return_invoke(&result_object);
    l329_assert_return_invoke(&result_object);
    l330_assert_return_invoke(&result_object);
    l331_assert_return_invoke(&result_object);
    l332_assert_return_invoke(&result_object);
    l333_assert_return_invoke(&result_object);
    l334_assert_return_invoke(&result_object);
    l335_assert_return_invoke(&result_object);
    l336_assert_return_invoke(&result_object);
    l337_assert_return_invoke(&result_object);
    l338_assert_return_invoke(&result_object);
    l339_assert_return_invoke(&result_object);
    l340_assert_return_invoke(&result_object);
    l341_assert_return_invoke(&result_object);
    l342_assert_return_invoke(&result_object);
    l343_assert_return_invoke(&result_object);
    l344_assert_return_invoke(&result_object);
    l345_assert_return_invoke(&result_object);
    l346_assert_return_invoke(&result_object);
    l347_assert_return_invoke(&result_object);
    l348_assert_return_invoke(&result_object);
    l349_assert_return_invoke(&result_object);
    l350_assert_return_invoke(&result_object);
    l351_assert_return_invoke(&result_object);
    l352_assert_return_invoke(&result_object);
    l353_assert_return_invoke(&result_object);
    l354_assert_return_invoke(&result_object);
    l355_assert_return_invoke(&result_object);
    l356_assert_return_invoke(&result_object);
    l357_assert_return_invoke(&result_object);
    l358_assert_return_invoke(&result_object);
    l359_assert_return_invoke(&result_object);
    l360_assert_return_invoke(&result_object);
    l361_assert_return_invoke(&result_object);
    l362_assert_return_invoke(&result_object);
    l363_assert_return_invoke(&result_object);
    l364_assert_return_invoke(&result_object);
    l365_assert_return_invoke(&result_object);
    l366_assert_return_invoke(&result_object);
    l367_assert_return_invoke(&result_object);
    l368_assert_return_invoke(&result_object);
    l369_assert_return_invoke(&result_object);
}
