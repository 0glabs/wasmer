// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/if_.wast
#![allow(
    warnings,
    dead_code
)]
use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, VmCtx, Export};
use super::_common::spectest_importobject;
use wabt::wat2wasm;


// Line 3
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param i32 i32) (result i32)))
      (type (;1;) (func))
      (type (;2;) (func (param i32)))
      (type (;3;) (func (param i32) (result i32)))
      (type (;4;) (func (result i32)))
      (func (;0;) (type 1))
      (func (;1;) (type 2) (param i32)
        get_local 0
        if  ;; label = @1
        end
        get_local 0
        if  ;; label = @1
        end
        get_local 0
        if  ;; label = @1
        end
        get_local 0
        if  ;; label = @1
        end)
      (func (;2;) (type 3) (param i32) (result i32)
        get_local 0
        if  ;; label = @1
          nop
        end
        get_local 0
        if  ;; label = @1
          nop
        else
          nop
        end
        get_local 0
        if (result i32)  ;; label = @1
          i32.const 7
        else
          i32.const 8
        end)
      (func (;3;) (type 3) (param i32) (result i32)
        get_local 0
        if  ;; label = @1
          call 0
          call 0
          call 0
        end
        get_local 0
        if  ;; label = @1
        else
          call 0
          call 0
          call 0
        end
        get_local 0
        if (result i32)  ;; label = @1
          call 0
          call 0
          i32.const 8
        else
          call 0
          call 0
          i32.const 9
        end)
      (func (;4;) (type 0) (param i32 i32) (result i32)
        get_local 0
        if (result i32)  ;; label = @1
          get_local 1
          if  ;; label = @2
            call 0
            block  ;; label = @3
            end
            nop
          end
          get_local 1
          if  ;; label = @2
          else
            call 0
            block  ;; label = @3
            end
            nop
          end
          get_local 1
          if (result i32)  ;; label = @2
            call 0
            i32.const 9
          else
            call 0
            i32.const 10
          end
        else
          get_local 1
          if  ;; label = @2
            call 0
            block  ;; label = @3
            end
            nop
          end
          get_local 1
          if  ;; label = @2
          else
            call 0
            block  ;; label = @3
            end
            nop
          end
          get_local 1
          if (result i32)  ;; label = @2
            call 0
            i32.const 10
          else
            call 0
            i32.const 11
          end
        end)
      (func (;5;) (type 3) (param i32) (result i32)
        get_local 0
        if (result i32)  ;; label = @1
          call 0
          i32.const 1
        else
          call 0
          i32.const 0
        end
        i32.const 2
        i32.const 3
        select)
      (func (;6;) (type 3) (param i32) (result i32)
        i32.const 2
        get_local 0
        if (result i32)  ;; label = @1
          call 0
          i32.const 1
        else
          call 0
          i32.const 0
        end
        i32.const 3
        select)
      (func (;7;) (type 3) (param i32) (result i32)
        i32.const 2
        i32.const 3
        get_local 0
        if (result i32)  ;; label = @1
          call 0
          i32.const 1
        else
          call 0
          i32.const 0
        end
        select)
      (func (;8;) (type 3) (param i32) (result i32)
        loop (result i32)  ;; label = @1
          get_local 0
          if (result i32)  ;; label = @2
            call 0
            i32.const 1
          else
            call 0
            i32.const 0
          end
          call 0
          call 0
        end)
      (func (;9;) (type 3) (param i32) (result i32)
        loop (result i32)  ;; label = @1
          call 0
          get_local 0
          if (result i32)  ;; label = @2
            call 0
            i32.const 1
          else
            call 0
            i32.const 0
          end
          call 0
        end)
      (func (;10;) (type 3) (param i32) (result i32)
        loop (result i32)  ;; label = @1
          call 0
          call 0
          get_local 0
          if (result i32)  ;; label = @2
            call 0
            i32.const 1
          else
            call 0
            i32.const 0
          end
        end)
      (func (;11;) (type 3) (param i32) (result i32)
        get_local 0
        if (result i32)  ;; label = @1
          i32.const 1
        else
          i32.const 0
        end
        if (result i32)  ;; label = @1
          call 0
          i32.const 2
        else
          call 0
          i32.const 3
        end)
      (func (;12;) (type 3) (param i32) (result i32)
        block (result i32)  ;; label = @1
          get_local 0
          if (result i32)  ;; label = @2
            call 0
            i32.const 1
          else
            call 0
            i32.const 0
          end
          i32.const 2
          br_if 0 (;@1;)
          i32.const 3
          return
        end)
      (func (;13;) (type 3) (param i32) (result i32)
        block (result i32)  ;; label = @1
          i32.const 2
          get_local 0
          if (result i32)  ;; label = @2
            call 0
            i32.const 1
          else
            call 0
            i32.const 0
          end
          br_if 0 (;@1;)
          i32.const 3
          return
        end)
      (func (;14;) (type 3) (param i32) (result i32)
        block (result i32)  ;; label = @1
          get_local 0
          if (result i32)  ;; label = @2
            call 0
            i32.const 1
          else
            call 0
            i32.const 0
          end
          i32.const 2
          br_table 0 (;@1;) 0 (;@1;)
        end)
      (func (;15;) (type 3) (param i32) (result i32)
        block (result i32)  ;; label = @1
          i32.const 2
          get_local 0
          if (result i32)  ;; label = @2
            call 0
            i32.const 1
          else
            call 0
            i32.const 0
          end
          br_table 0 (;@1;) 0 (;@1;)
        end)
      (func (;16;) (type 0) (param i32 i32) (result i32)
        get_local 0)
      (func (;17;) (type 3) (param i32) (result i32)
        block (result i32)  ;; label = @1
          get_local 0
          if (result i32)  ;; label = @2
            call 0
            i32.const 1
          else
            call 0
            i32.const 0
          end
          i32.const 2
          i32.const 0
          call_indirect (type 0)
        end)
      (func (;18;) (type 3) (param i32) (result i32)
        block (result i32)  ;; label = @1
          i32.const 2
          get_local 0
          if (result i32)  ;; label = @2
            call 0
            i32.const 1
          else
            call 0
            i32.const 0
          end
          i32.const 0
          call_indirect (type 0)
        end)
      (func (;19;) (type 3) (param i32) (result i32)
        block (result i32)  ;; label = @1
          i32.const 2
          i32.const 0
          get_local 0
          if (result i32)  ;; label = @2
            call 0
            i32.const 1
          else
            call 0
            i32.const 0
          end
          call_indirect (type 0)
        end)
      (func (;20;) (type 2) (param i32)
        get_local 0
        if (result i32)  ;; label = @1
          call 0
          i32.const 1
        else
          call 0
          i32.const 0
        end
        i32.const 2
        i32.store)
      (func (;21;) (type 2) (param i32)
        i32.const 2
        get_local 0
        if (result i32)  ;; label = @1
          call 0
          i32.const 1
        else
          call 0
          i32.const 0
        end
        i32.store)
      (func (;22;) (type 3) (param i32) (result i32)
        get_local 0
        if (result i32)  ;; label = @1
          i32.const 1
        else
          i32.const 0
        end
        memory.grow)
      (func (;23;) (type 3) (param i32) (result i32)
        get_local 0)
      (func (;24;) (type 3) (param i32) (result i32)
        get_local 0
        if (result i32)  ;; label = @1
          i32.const 1
        else
          i32.const 0
        end
        call 23)
      (func (;25;) (type 3) (param i32) (result i32)
        get_local 0
        if (result i32)  ;; label = @1
          i32.const 1
        else
          i32.const 0
        end
        return)
      (func (;26;) (type 2) (param i32)
        get_local 0
        if (result i32)  ;; label = @1
          i32.const 1
        else
          i32.const 0
        end
        drop)
      (func (;27;) (type 3) (param i32) (result i32)
        block (result i32)  ;; label = @1
          get_local 0
          if (result i32)  ;; label = @2
            i32.const 1
          else
            i32.const 0
          end
          br 0 (;@1;)
        end)
      (func (;28;) (type 3) (param i32) (result i32)
        (local i32)
        get_local 0
        if (result i32)  ;; label = @1
          i32.const 1
        else
          i32.const 0
        end
        set_local 0
        get_local 0)
      (func (;29;) (type 3) (param i32) (result i32)
        get_local 0
        if (result i32)  ;; label = @1
          i32.const 1
        else
          i32.const 0
        end
        tee_local 0)
      (func (;30;) (type 3) (param i32) (result i32)
        get_local 0
        if (result i32)  ;; label = @1
          i32.const 1
        else
          i32.const 0
        end
        set_global 0
        get_global 0)
      (func (;31;) (type 3) (param i32) (result i32)
        get_local 0
        if (result i32)  ;; label = @1
          i32.const 11
        else
          i32.const 10
        end
        i32.load)
      (func (;32;) (type 3) (param i32) (result i32)
        get_local 0
        if (result i32)  ;; label = @1
          call 0
          i32.const 13
        else
          call 0
          i32.const -13
        end
        i32.ctz)
      (func (;33;) (type 0) (param i32 i32) (result i32)
        get_local 0
        if (result i32)  ;; label = @1
          call 0
          i32.const 3
        else
          call 0
          i32.const -3
        end
        get_local 1
        if (result i32)  ;; label = @1
          call 0
          i32.const 4
        else
          call 0
          i32.const -5
        end
        i32.mul)
      (func (;34;) (type 3) (param i32) (result i32)
        get_local 0
        if (result i32)  ;; label = @1
          call 0
          i32.const 13
        else
          call 0
          i32.const 0
        end
        i32.eqz)
      (func (;35;) (type 0) (param i32 i32) (result i32)
        get_local 0
        if (result f32)  ;; label = @1
          call 0
          f32.const 0x1.8p+1 (;=3;)
        else
          call 0
          f32.const -0x1.8p+1 (;=-3;)
        end
        get_local 1
        if (result f32)  ;; label = @1
          call 0
          f32.const 0x1p+2 (;=4;)
        else
          call 0
          f32.const -0x1p+2 (;=-4;)
        end
        f32.gt)
      (func (;36;) (type 4) (result i32)
        i32.const 1
        if  ;; label = @1
          br 0 (;@1;)
          unreachable
        end
        i32.const 1
        if  ;; label = @1
          br 0 (;@1;)
          unreachable
        else
          unreachable
        end
        i32.const 0
        if  ;; label = @1
          unreachable
        else
          br 0 (;@1;)
          unreachable
        end
        i32.const 1
        if  ;; label = @1
          i32.const 1
          br_if 0 (;@1;)
          unreachable
        end
        i32.const 1
        if  ;; label = @1
          i32.const 1
          br_if 0 (;@1;)
          unreachable
        else
          unreachable
        end
        i32.const 0
        if  ;; label = @1
          unreachable
        else
          i32.const 1
          br_if 0 (;@1;)
          unreachable
        end
        i32.const 1
        if  ;; label = @1
          i32.const 0
          br_table 0 (;@1;)
          unreachable
        end
        i32.const 1
        if  ;; label = @1
          i32.const 0
          br_table 0 (;@1;)
          unreachable
        else
          unreachable
        end
        i32.const 0
        if  ;; label = @1
          unreachable
        else
          i32.const 0
          br_table 0 (;@1;)
          unreachable
        end
        i32.const 19)
      (func (;37;) (type 3) (param i32) (result i32)
        get_local 0
        if (result i32)  ;; label = @1
          i32.const 18
          br 0 (;@1;)
          i32.const 19
        else
          i32.const 21
          br 0 (;@1;)
          i32.const 20
        end)
      (func (;38;) (type 3) (param i32) (result i32)
        (local i32)
        block (result i32)  ;; label = @1
          i32.const 1
          set_local 1
          get_local 0
        end
        if  ;; label = @1
          get_local 1
          i32.const 3
          i32.mul
          set_local 1
          get_local 1
          i32.const 5
          i32.sub
          set_local 1
          get_local 1
          i32.const 7
          i32.mul
          set_local 1
          br 0 (;@1;)
          get_local 1
          i32.const 100
          i32.mul
          set_local 1
        else
          get_local 1
          i32.const 5
          i32.mul
          set_local 1
          get_local 1
          i32.const 7
          i32.sub
          set_local 1
          get_local 1
          i32.const 3
          i32.mul
          set_local 1
          br 0 (;@1;)
          get_local 1
          i32.const 1000
          i32.mul
          set_local 1
        end
        get_local 1)
      (table (;0;) 1 1 anyfunc)
      (memory (;0;) 1)
      (global (;0;) (mut i32) (i32.const 10))
      (export \"empty\" (func 1))
      (export \"singular\" (func 2))
      (export \"multi\" (func 3))
      (export \"nested\" (func 4))
      (export \"as-select-first\" (func 5))
      (export \"as-select-mid\" (func 6))
      (export \"as-select-last\" (func 7))
      (export \"as-loop-first\" (func 8))
      (export \"as-loop-mid\" (func 9))
      (export \"as-loop-last\" (func 10))
      (export \"as-if-condition\" (func 11))
      (export \"as-br_if-first\" (func 12))
      (export \"as-br_if-last\" (func 13))
      (export \"as-br_table-first\" (func 14))
      (export \"as-br_table-last\" (func 15))
      (export \"as-call_indirect-first\" (func 17))
      (export \"as-call_indirect-mid\" (func 18))
      (export \"as-call_indirect-last\" (func 19))
      (export \"as-store-first\" (func 20))
      (export \"as-store-last\" (func 21))
      (export \"as-memory.grow-value\" (func 22))
      (export \"as-call-value\" (func 24))
      (export \"as-return-value\" (func 25))
      (export \"as-drop-operand\" (func 26))
      (export \"as-br-value\" (func 27))
      (export \"as-set_local-value\" (func 28))
      (export \"as-tee_local-value\" (func 29))
      (export \"as-set_global-value\" (func 30))
      (export \"as-load-operand\" (func 31))
      (export \"as-unary-operand\" (func 32))
      (export \"as-binary-operand\" (func 33))
      (export \"as-test-operand\" (func 34))
      (export \"as-compare-operand\" (func 35))
      (export \"break-bare\" (func 36))
      (export \"break-value\" (func 37))
      (export \"effects\" (func 38))
      (elem (i32.const 0) 16))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}
fn start_module_1(result_object: &ResultObject, vm_context: &VmCtx) {
    result_object.instance.start(&vm_context);
}

// Line 384
fn c1_l384_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c1_l384_action_invoke");
    let func_index = match result_object.module.info.exports.get("empty") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, ());
}

// Line 385
fn c2_l385_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c2_l385_action_invoke");
    let func_index = match result_object.module.info.exports.get("empty") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, ());
}

// Line 386
fn c3_l386_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c3_l386_action_invoke");
    let func_index = match result_object.module.info.exports.get("empty") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(100 as i32, &vm_context);
    assert_eq!(result, ());
}

// Line 387
fn c4_l387_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c4_l387_action_invoke");
    let func_index = match result_object.module.info.exports.get("empty") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2 as i32, &vm_context);
    assert_eq!(result, ());
}

// Line 389
fn c5_l389_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c5_l389_action_invoke");
    let func_index = match result_object.module.info.exports.get("singular") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 8 as i32);
}

// Line 390
fn c6_l390_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c6_l390_action_invoke");
    let func_index = match result_object.module.info.exports.get("singular") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 7 as i32);
}

// Line 391
fn c7_l391_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c7_l391_action_invoke");
    let func_index = match result_object.module.info.exports.get("singular") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(10 as i32, &vm_context);
    assert_eq!(result, 7 as i32);
}

// Line 392
fn c8_l392_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c8_l392_action_invoke");
    let func_index = match result_object.module.info.exports.get("singular") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-10 as i32, &vm_context);
    assert_eq!(result, 7 as i32);
}

// Line 394
fn c9_l394_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c9_l394_action_invoke");
    let func_index = match result_object.module.info.exports.get("multi") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 9 as i32);
}

// Line 395
fn c10_l395_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c10_l395_action_invoke");
    let func_index = match result_object.module.info.exports.get("multi") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 8 as i32);
}

// Line 396
fn c11_l396_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c11_l396_action_invoke");
    let func_index = match result_object.module.info.exports.get("multi") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(13 as i32, &vm_context);
    assert_eq!(result, 8 as i32);
}

// Line 397
fn c12_l397_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c12_l397_action_invoke");
    let func_index = match result_object.module.info.exports.get("multi") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-5 as i32, &vm_context);
    assert_eq!(result, 8 as i32);
}

// Line 399
fn c13_l399_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c13_l399_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 11 as i32);
}

// Line 400
fn c14_l400_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c14_l400_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 10 as i32);
}

// Line 401
fn c15_l401_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c15_l401_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 10 as i32);
}

// Line 402
fn c16_l402_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c16_l402_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(3 as i32, 2 as i32, &vm_context);
    assert_eq!(result, 9 as i32);
}

// Line 403
fn c17_l403_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c17_l403_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, -100 as i32, &vm_context);
    assert_eq!(result, 10 as i32);
}

// Line 404
fn c18_l404_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c18_l404_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(10 as i32, 10 as i32, &vm_context);
    assert_eq!(result, 9 as i32);
}

// Line 405
fn c19_l405_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c19_l405_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, -1 as i32, &vm_context);
    assert_eq!(result, 10 as i32);
}

// Line 406
fn c20_l406_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c20_l406_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-111 as i32, -2 as i32, &vm_context);
    assert_eq!(result, 9 as i32);
}

// Line 408
fn c21_l408_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c21_l408_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-select-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 409
fn c22_l409_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c22_l409_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-select-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 410
fn c23_l410_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c23_l410_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-select-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 411
fn c24_l411_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c24_l411_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-select-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 412
fn c25_l412_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c25_l412_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-select-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 3 as i32);
}

// Line 413
fn c26_l413_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c26_l413_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-select-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 415
fn c27_l415_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c27_l415_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-loop-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 416
fn c28_l416_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c28_l416_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-loop-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 417
fn c29_l417_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c29_l417_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-loop-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 418
fn c30_l418_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c30_l418_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-loop-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 419
fn c31_l419_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c31_l419_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-loop-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 420
fn c32_l420_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c32_l420_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-loop-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 422
fn c33_l422_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c33_l422_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-if-condition") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 3 as i32);
}

// Line 423
fn c34_l423_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c34_l423_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-if-condition") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 425
fn c35_l425_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c35_l425_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br_if-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 426
fn c36_l426_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c36_l426_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br_if-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 427
fn c37_l427_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c37_l427_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br_if-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 3 as i32);
}

// Line 428
fn c38_l428_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c38_l428_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br_if-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 430
fn c39_l430_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c39_l430_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br_table-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 431
fn c40_l431_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c40_l431_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br_table-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 432
fn c41_l432_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c41_l432_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br_table-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 433
fn c42_l433_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c42_l433_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br_table-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 435
fn c43_l435_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c43_l435_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-call_indirect-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 436
fn c44_l436_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c44_l436_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-call_indirect-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 437
fn c45_l437_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c45_l437_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-call_indirect-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 438
fn c46_l438_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c46_l438_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-call_indirect-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 439
fn c47_l439_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c47_l439_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-call_indirect-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 440

// Line 442
fn c49_l442_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c49_l442_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-store-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, ());
}

// Line 443
fn c50_l443_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c50_l443_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-store-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, ());
}

// Line 444
fn c51_l444_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c51_l444_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-store-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, ());
}

// Line 445
fn c52_l445_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c52_l445_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-store-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, ());
}

// Line 452
fn c53_l452_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c53_l452_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-call-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 453
fn c54_l453_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c54_l453_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-call-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 455
fn c55_l455_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c55_l455_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-return-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 456
fn c56_l456_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c56_l456_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-return-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 458
fn c57_l458_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c57_l458_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-drop-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, ());
}

// Line 459
fn c58_l459_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c58_l459_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-drop-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, ());
}

// Line 461
fn c59_l461_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c59_l461_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 462
fn c60_l462_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c60_l462_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 464
fn c61_l464_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c61_l464_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-set_local-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 465
fn c62_l465_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c62_l465_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-set_local-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 467
fn c63_l467_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c63_l467_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-tee_local-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 468
fn c64_l468_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c64_l468_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-tee_local-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 470
fn c65_l470_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c65_l470_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-set_global-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 471
fn c66_l471_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c66_l471_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-set_global-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 473
fn c67_l473_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c67_l473_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-load-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 474
fn c68_l474_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c68_l474_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-load-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 476
fn c69_l476_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c69_l476_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-unary-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 477
fn c70_l477_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c70_l477_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-unary-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 478
fn c71_l478_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c71_l478_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-unary-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 480
fn c72_l480_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c72_l480_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-binary-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 15 as i32);
}

// Line 481
fn c73_l481_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c73_l481_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-binary-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, -12 as i32);
}

// Line 482
fn c74_l482_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c74_l482_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-binary-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, -15 as i32);
}

// Line 483
fn c75_l483_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c75_l483_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-binary-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 12 as i32);
}

// Line 485
fn c76_l485_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c76_l485_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-test-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 486
fn c77_l486_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c77_l486_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-test-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 488
fn c78_l488_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c78_l488_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-compare-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 489
fn c79_l489_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c79_l489_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-compare-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 490
fn c80_l490_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c80_l490_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-compare-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 491
fn c81_l491_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c81_l491_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-compare-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 493
fn c82_l493_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c82_l493_action_invoke");
    let func_index = match result_object.module.info.exports.get("break-bare") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 19 as i32);
}

// Line 494
fn c83_l494_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c83_l494_action_invoke");
    let func_index = match result_object.module.info.exports.get("break-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 18 as i32);
}

// Line 495
fn c84_l495_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c84_l495_action_invoke");
    let func_index = match result_object.module.info.exports.get("break-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 21 as i32);
}

// Line 497
fn c85_l497_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c85_l497_action_invoke");
    let func_index = match result_object.module.info.exports.get("effects") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, -14 as i32);
}

// Line 498
fn c86_l498_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "c86_l498_action_invoke");
    let func_index = match result_object.module.info.exports.get("effects") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, -6 as i32);
}

// Line 501
#[test]
fn c87_l501_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 4, 64, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 505
#[test]
fn c88_l505_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 126, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 4, 64, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 509
#[test]
fn c89_l509_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 125, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 4, 64, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 513
#[test]
fn c90_l513_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 124, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 4, 64, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 518
#[test]
fn c91_l518_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 4, 64, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 522
#[test]
fn c92_l522_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 126, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 4, 64, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 526
#[test]
fn c93_l526_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 125, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 4, 64, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 530
#[test]
fn c94_l530_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 124, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 4, 64, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 535
#[test]
fn c95_l535_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 11, 1, 9, 0, 65, 1, 4, 64, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 541
#[test]
fn c96_l541_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 11, 1, 9, 0, 65, 1, 4, 64, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 547
#[test]
fn c97_l547_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 12, 1, 10, 0, 65, 1, 4, 64, 5, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 553
#[test]
fn c98_l553_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 14, 1, 12, 0, 65, 1, 4, 64, 65, 1, 5, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 560
#[test]
fn c99_l560_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 12, 1, 10, 0, 65, 1, 4, 127, 5, 65, 0, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 566
#[test]
fn c100_l566_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 11, 1, 9, 0, 65, 1, 4, 127, 65, 0, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 572
#[test]
fn c101_l572_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 1, 4, 127, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 578
#[test]
fn c102_l578_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 11, 1, 9, 0, 65, 1, 4, 127, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 585
#[test]
fn c103_l585_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 13, 1, 11, 0, 65, 1, 4, 127, 1, 5, 65, 0, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 591
#[test]
fn c104_l591_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 13, 1, 11, 0, 65, 1, 4, 127, 65, 0, 5, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 597
#[test]
fn c105_l597_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 12, 1, 10, 0, 65, 1, 4, 127, 1, 5, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 604
#[test]
fn c106_l604_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 14, 1, 12, 0, 65, 1, 4, 127, 66, 1, 5, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 610
#[test]
fn c107_l610_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 14, 1, 12, 0, 65, 1, 4, 127, 65, 1, 5, 66, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 616
#[test]
fn c108_l616_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 14, 1, 12, 0, 65, 1, 4, 127, 66, 1, 5, 66, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 622
#[test]
fn c109_l622_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 21, 1, 19, 0, 65, 1, 4, 127, 66, 1, 5, 68, 0, 0, 0, 0, 0, 0, 240, 63, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 629
#[test]
fn c110_l629_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 16, 1, 14, 0, 65, 0, 4, 126, 0, 0, 0, 27, 5, 66, 0, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 639
#[test]
fn c111_l639_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 16, 1, 14, 0, 65, 1, 4, 126, 66, 0, 5, 0, 0, 0, 27, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 649
#[test]
fn c112_l649_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 18, 1, 16, 0, 65, 1, 4, 126, 0, 0, 0, 27, 5, 0, 0, 0, 27, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 660
#[test]
fn c113_l660_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 14, 1, 12, 0, 65, 1, 4, 127, 12, 0, 5, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 666
#[test]
fn c114_l666_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 14, 1, 12, 0, 65, 1, 4, 127, 65, 1, 5, 12, 0, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 672
#[test]
fn c115_l672_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 16, 1, 14, 0, 65, 1, 4, 127, 12, 0, 65, 1, 5, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 681
#[test]
fn c116_l681_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 16, 1, 14, 0, 65, 1, 4, 127, 65, 1, 5, 12, 0, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 690
#[test]
fn c117_l690_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 17, 1, 15, 0, 65, 1, 4, 127, 1, 12, 0, 65, 1, 5, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 699
#[test]
fn c118_l699_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 17, 1, 15, 0, 65, 1, 4, 127, 65, 1, 5, 1, 12, 0, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 709
#[test]
fn c119_l709_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 18, 1, 16, 0, 65, 1, 4, 127, 66, 1, 12, 0, 65, 1, 5, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 718
#[test]
fn c120_l718_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 18, 1, 16, 0, 65, 1, 4, 127, 65, 1, 5, 66, 1, 12, 0, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 729
#[test]
fn c121_l729_assert_malformed() {
    let wasm_binary = [40, 102, 117, 110, 99, 32, 105, 102, 32, 101, 110, 100, 32, 36, 108, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 733
#[test]
fn c122_l733_assert_malformed() {
    let wasm_binary = [40, 102, 117, 110, 99, 32, 105, 102, 32, 36, 97, 32, 101, 110, 100, 32, 36, 108, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 737
#[test]
fn c123_l737_assert_malformed() {
    let wasm_binary = [40, 102, 117, 110, 99, 32, 105, 102, 32, 101, 108, 115, 101, 32, 36, 108, 32, 101, 110, 100, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 741
#[test]
fn c124_l741_assert_malformed() {
    let wasm_binary = [40, 102, 117, 110, 99, 32, 105, 102, 32, 36, 97, 32, 101, 108, 115, 101, 32, 36, 108, 32, 101, 110, 100, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 745
#[test]
fn c125_l745_assert_malformed() {
    let wasm_binary = [40, 102, 117, 110, 99, 32, 105, 102, 32, 101, 108, 115, 101, 32, 101, 110, 100, 32, 36, 108, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 749
#[test]
fn c126_l749_assert_malformed() {
    let wasm_binary = [40, 102, 117, 110, 99, 32, 105, 102, 32, 101, 108, 115, 101, 32, 36, 108, 32, 101, 110, 100, 32, 36, 108, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 753
#[test]
fn c127_l753_assert_malformed() {
    let wasm_binary = [40, 102, 117, 110, 99, 32, 105, 102, 32, 101, 108, 115, 101, 32, 36, 108, 49, 32, 101, 110, 100, 32, 36, 108, 50, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 757
#[test]
fn c128_l757_assert_malformed() {
    let wasm_binary = [40, 102, 117, 110, 99, 32, 105, 102, 32, 36, 97, 32, 101, 108, 115, 101, 32, 101, 110, 100, 32, 36, 108, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 761
#[test]
fn c129_l761_assert_malformed() {
    let wasm_binary = [40, 102, 117, 110, 99, 32, 105, 102, 32, 36, 97, 32, 101, 108, 115, 101, 32, 36, 97, 32, 101, 110, 100, 32, 36, 108, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 765
#[test]
fn c130_l765_assert_malformed() {
    let wasm_binary = [40, 102, 117, 110, 99, 32, 105, 102, 32, 36, 97, 32, 101, 108, 115, 101, 32, 36, 108, 32, 101, 110, 100, 32, 36, 108, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

#[test]
fn test_module_1() {
    let result_object = create_module_1();
    let vm_context = result_object.instance.generate_context();
    // We group the calls together
    start_module_1(&result_object, &vm_context);
    c1_l384_action_invoke(&result_object, &vm_context);
    c2_l385_action_invoke(&result_object, &vm_context);
    c3_l386_action_invoke(&result_object, &vm_context);
    c4_l387_action_invoke(&result_object, &vm_context);
    c5_l389_action_invoke(&result_object, &vm_context);
    c6_l390_action_invoke(&result_object, &vm_context);
    c7_l391_action_invoke(&result_object, &vm_context);
    c8_l392_action_invoke(&result_object, &vm_context);
    c9_l394_action_invoke(&result_object, &vm_context);
    c10_l395_action_invoke(&result_object, &vm_context);
    c11_l396_action_invoke(&result_object, &vm_context);
    c12_l397_action_invoke(&result_object, &vm_context);
    c13_l399_action_invoke(&result_object, &vm_context);
    c14_l400_action_invoke(&result_object, &vm_context);
    c15_l401_action_invoke(&result_object, &vm_context);
    c16_l402_action_invoke(&result_object, &vm_context);
    c17_l403_action_invoke(&result_object, &vm_context);
    c18_l404_action_invoke(&result_object, &vm_context);
    c19_l405_action_invoke(&result_object, &vm_context);
    c20_l406_action_invoke(&result_object, &vm_context);
    c21_l408_action_invoke(&result_object, &vm_context);
    c22_l409_action_invoke(&result_object, &vm_context);
    c23_l410_action_invoke(&result_object, &vm_context);
    c24_l411_action_invoke(&result_object, &vm_context);
    c25_l412_action_invoke(&result_object, &vm_context);
    c26_l413_action_invoke(&result_object, &vm_context);
    c27_l415_action_invoke(&result_object, &vm_context);
    c28_l416_action_invoke(&result_object, &vm_context);
    c29_l417_action_invoke(&result_object, &vm_context);
    c30_l418_action_invoke(&result_object, &vm_context);
    c31_l419_action_invoke(&result_object, &vm_context);
    c32_l420_action_invoke(&result_object, &vm_context);
    c33_l422_action_invoke(&result_object, &vm_context);
    c34_l423_action_invoke(&result_object, &vm_context);
    c35_l425_action_invoke(&result_object, &vm_context);
    c36_l426_action_invoke(&result_object, &vm_context);
    c37_l427_action_invoke(&result_object, &vm_context);
    c38_l428_action_invoke(&result_object, &vm_context);
    c39_l430_action_invoke(&result_object, &vm_context);
    c40_l431_action_invoke(&result_object, &vm_context);
    c41_l432_action_invoke(&result_object, &vm_context);
    c42_l433_action_invoke(&result_object, &vm_context);
    c43_l435_action_invoke(&result_object, &vm_context);
    c44_l436_action_invoke(&result_object, &vm_context);
    c45_l437_action_invoke(&result_object, &vm_context);
    c46_l438_action_invoke(&result_object, &vm_context);
    c47_l439_action_invoke(&result_object, &vm_context);
    c49_l442_action_invoke(&result_object, &vm_context);
    c50_l443_action_invoke(&result_object, &vm_context);
    c51_l444_action_invoke(&result_object, &vm_context);
    c52_l445_action_invoke(&result_object, &vm_context);
    c53_l452_action_invoke(&result_object, &vm_context);
    c54_l453_action_invoke(&result_object, &vm_context);
    c55_l455_action_invoke(&result_object, &vm_context);
    c56_l456_action_invoke(&result_object, &vm_context);
    c57_l458_action_invoke(&result_object, &vm_context);
    c58_l459_action_invoke(&result_object, &vm_context);
    c59_l461_action_invoke(&result_object, &vm_context);
    c60_l462_action_invoke(&result_object, &vm_context);
    c61_l464_action_invoke(&result_object, &vm_context);
    c62_l465_action_invoke(&result_object, &vm_context);
    c63_l467_action_invoke(&result_object, &vm_context);
    c64_l468_action_invoke(&result_object, &vm_context);
    c65_l470_action_invoke(&result_object, &vm_context);
    c66_l471_action_invoke(&result_object, &vm_context);
    c67_l473_action_invoke(&result_object, &vm_context);
    c68_l474_action_invoke(&result_object, &vm_context);
    c69_l476_action_invoke(&result_object, &vm_context);
    c70_l477_action_invoke(&result_object, &vm_context);
    c71_l478_action_invoke(&result_object, &vm_context);
    c72_l480_action_invoke(&result_object, &vm_context);
    c73_l481_action_invoke(&result_object, &vm_context);
    c74_l482_action_invoke(&result_object, &vm_context);
    c75_l483_action_invoke(&result_object, &vm_context);
    c76_l485_action_invoke(&result_object, &vm_context);
    c77_l486_action_invoke(&result_object, &vm_context);
    c78_l488_action_invoke(&result_object, &vm_context);
    c79_l489_action_invoke(&result_object, &vm_context);
    c80_l490_action_invoke(&result_object, &vm_context);
    c81_l491_action_invoke(&result_object, &vm_context);
    c82_l493_action_invoke(&result_object, &vm_context);
    c83_l494_action_invoke(&result_object, &vm_context);
    c84_l495_action_invoke(&result_object, &vm_context);
    c85_l497_action_invoke(&result_object, &vm_context);
    c86_l498_action_invoke(&result_object, &vm_context);
}
