// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/address.wast
#![allow(
    warnings,
    dead_code
)]
use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, VmCtx, Export};
use super::_common::spectest_importobject;
use wabt::wat2wasm;


// Line 3
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param i32) (result i32)))
      (type (;1;) (func (param i32)))
      (func (;0;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load8_u)
      (func (;1;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load8_u)
      (func (;2;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load8_u offset=1)
      (func (;3;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load8_u offset=2)
      (func (;4;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load8_u offset=25)
      (func (;5;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load8_s)
      (func (;6;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load8_s)
      (func (;7;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load8_s offset=1)
      (func (;8;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load8_s offset=2)
      (func (;9;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load8_s offset=25)
      (func (;10;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load16_u)
      (func (;11;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load16_u align=1)
      (func (;12;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load16_u offset=1 align=1)
      (func (;13;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load16_u offset=2)
      (func (;14;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load16_u offset=25)
      (func (;15;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load16_s)
      (func (;16;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load16_s align=1)
      (func (;17;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load16_s offset=1 align=1)
      (func (;18;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load16_s offset=2)
      (func (;19;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load16_s offset=25)
      (func (;20;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load)
      (func (;21;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load align=1)
      (func (;22;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load offset=1 align=1)
      (func (;23;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load offset=2 align=2)
      (func (;24;) (type 0) (param i32) (result i32)
        get_local 0
        i32.load offset=25)
      (func (;25;) (type 1) (param i32)
        get_local 0
        i32.load8_u offset=4294967295
        drop)
      (func (;26;) (type 1) (param i32)
        get_local 0
        i32.load8_s offset=4294967295
        drop)
      (func (;27;) (type 1) (param i32)
        get_local 0
        i32.load16_u offset=4294967295
        drop)
      (func (;28;) (type 1) (param i32)
        get_local 0
        i32.load16_s offset=4294967295
        drop)
      (func (;29;) (type 1) (param i32)
        get_local 0
        i32.load offset=4294967295
        drop)
      (memory (;0;) 1)
      (export \"8u_good1\" (func 0))
      (export \"8u_good2\" (func 1))
      (export \"8u_good3\" (func 2))
      (export \"8u_good4\" (func 3))
      (export \"8u_good5\" (func 4))
      (export \"8s_good1\" (func 5))
      (export \"8s_good2\" (func 6))
      (export \"8s_good3\" (func 7))
      (export \"8s_good4\" (func 8))
      (export \"8s_good5\" (func 9))
      (export \"16u_good1\" (func 10))
      (export \"16u_good2\" (func 11))
      (export \"16u_good3\" (func 12))
      (export \"16u_good4\" (func 13))
      (export \"16u_good5\" (func 14))
      (export \"16s_good1\" (func 15))
      (export \"16s_good2\" (func 16))
      (export \"16s_good3\" (func 17))
      (export \"16s_good4\" (func 18))
      (export \"16s_good5\" (func 19))
      (export \"32_good1\" (func 20))
      (export \"32_good2\" (func 21))
      (export \"32_good3\" (func 22))
      (export \"32_good4\" (func 23))
      (export \"32_good5\" (func 24))
      (export \"8u_bad\" (func 25))
      (export \"8s_bad\" (func 26))
      (export \"16u_bad\" (func 27))
      (export \"16s_bad\" (func 28))
      (export \"32_bad\" (func 29))
      (data (i32.const 0) \"abcdefghijklmnopqrstuvwxyz\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 104
fn l104_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l104_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 97 as i32);
}

// Line 105
fn l105_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l105_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 97 as i32);
}

// Line 106
fn l106_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l106_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 98 as i32);
}

// Line 107
fn l107_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l107_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 99 as i32);
}

// Line 108
fn l108_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l108_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 122 as i32);
}

// Line 110
fn l110_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l110_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 97 as i32);
}

// Line 111
fn l111_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l111_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 97 as i32);
}

// Line 112
fn l112_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l112_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 98 as i32);
}

// Line 113
fn l113_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l113_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 99 as i32);
}

// Line 114
fn l114_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l114_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 122 as i32);
}

// Line 116
fn l116_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l116_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 25185 as i32);
}

// Line 117
fn l117_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l117_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 25185 as i32);
}

// Line 118
fn l118_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l118_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 25442 as i32);
}

// Line 119
fn l119_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l119_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 25699 as i32);
}

// Line 120
fn l120_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l120_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 122 as i32);
}

// Line 122
fn l122_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l122_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 25185 as i32);
}

// Line 123
fn l123_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l123_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 25185 as i32);
}

// Line 124
fn l124_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l124_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 25442 as i32);
}

// Line 125
fn l125_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l125_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 25699 as i32);
}

// Line 126
fn l126_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l126_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 122 as i32);
}

// Line 128
fn l128_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l128_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 1684234849 as i32);
}

// Line 129
fn l129_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l129_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 1684234849 as i32);
}

// Line 130
fn l130_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l130_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 1701077858 as i32);
}

// Line 131
fn l131_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l131_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 1717920867 as i32);
}

// Line 132
fn l132_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l132_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 122 as i32);
}

// Line 134
fn l134_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l134_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 135
fn l135_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l135_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 136
fn l136_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l136_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 137
fn l137_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l137_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 138
fn l138_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l138_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 140
fn l140_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l140_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 141
fn l141_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l141_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 142
fn l142_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l142_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 143
fn l143_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l143_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 144
fn l144_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l144_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 146
fn l146_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l146_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 147
fn l147_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l147_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 148
fn l148_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l148_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 149
fn l149_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l149_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 150
fn l150_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l150_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 152
fn l152_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l152_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 153
fn l153_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l153_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 154
fn l154_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l154_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 155
fn l155_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l155_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 156
fn l156_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l156_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 158
fn l158_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l158_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 159
fn l159_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l159_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 160
fn l160_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l160_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 161
fn l161_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l161_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 162
fn l162_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l162_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65507 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 164
fn l164_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l164_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 165
fn l165_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l165_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 166
fn l166_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l166_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 167
fn l167_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l167_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 168
fn l168_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l168_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 170
fn l170_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l170_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 171
fn l171_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l171_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 172
fn l172_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l172_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 173
fn l173_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l173_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 174
fn l174_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l174_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 176
fn l176_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l176_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 177
fn l177_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l177_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 178
fn l178_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l178_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 179
fn l179_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l179_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 180
fn l180_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l180_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 182
fn l182_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l182_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 183
fn l183_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l183_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 184
fn l184_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l184_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 185
fn l185_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l185_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 186
fn l186_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l186_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 188
fn l188_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l188_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 189
fn l189_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l189_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 190
fn l190_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l190_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 191
fn l191_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l191_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65508 as i32, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 192

// Line 194

// Line 195

// Line 196

// Line 197

// Line 198

// Line 200

// Line 201

// Line 202

// Line 203

// Line 204

// Line 207
#[test]
fn l207_assert_malformed() {
    let wasm_binary = [40, 109, 101, 109, 111, 114, 121, 32, 49, 41, 40, 102, 117, 110, 99, 32, 40, 100, 114, 111, 112, 32, 40, 105, 51, 50, 46, 108, 111, 97, 100, 32, 111, 102, 102, 115, 101, 116, 61, 52, 50, 57, 52, 57, 54, 55, 50, 57, 54, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 216

#[test]
fn test_module_1() {
    let result_object = create_module_1();
    let vm_context = result_object.instance.generate_context();
    // We group the calls together
    l104_assert_return_invoke(&result_object, &vm_context);
    l105_assert_return_invoke(&result_object, &vm_context);
    l106_assert_return_invoke(&result_object, &vm_context);
    l107_assert_return_invoke(&result_object, &vm_context);
    l108_assert_return_invoke(&result_object, &vm_context);
    l110_assert_return_invoke(&result_object, &vm_context);
    l111_assert_return_invoke(&result_object, &vm_context);
    l112_assert_return_invoke(&result_object, &vm_context);
    l113_assert_return_invoke(&result_object, &vm_context);
    l114_assert_return_invoke(&result_object, &vm_context);
    l116_assert_return_invoke(&result_object, &vm_context);
    l117_assert_return_invoke(&result_object, &vm_context);
    l118_assert_return_invoke(&result_object, &vm_context);
    l119_assert_return_invoke(&result_object, &vm_context);
    l120_assert_return_invoke(&result_object, &vm_context);
    l122_assert_return_invoke(&result_object, &vm_context);
    l123_assert_return_invoke(&result_object, &vm_context);
    l124_assert_return_invoke(&result_object, &vm_context);
    l125_assert_return_invoke(&result_object, &vm_context);
    l126_assert_return_invoke(&result_object, &vm_context);
    l128_assert_return_invoke(&result_object, &vm_context);
    l129_assert_return_invoke(&result_object, &vm_context);
    l130_assert_return_invoke(&result_object, &vm_context);
    l131_assert_return_invoke(&result_object, &vm_context);
    l132_assert_return_invoke(&result_object, &vm_context);
    l134_assert_return_invoke(&result_object, &vm_context);
    l135_assert_return_invoke(&result_object, &vm_context);
    l136_assert_return_invoke(&result_object, &vm_context);
    l137_assert_return_invoke(&result_object, &vm_context);
    l138_assert_return_invoke(&result_object, &vm_context);
    l140_assert_return_invoke(&result_object, &vm_context);
    l141_assert_return_invoke(&result_object, &vm_context);
    l142_assert_return_invoke(&result_object, &vm_context);
    l143_assert_return_invoke(&result_object, &vm_context);
    l144_assert_return_invoke(&result_object, &vm_context);
    l146_assert_return_invoke(&result_object, &vm_context);
    l147_assert_return_invoke(&result_object, &vm_context);
    l148_assert_return_invoke(&result_object, &vm_context);
    l149_assert_return_invoke(&result_object, &vm_context);
    l150_assert_return_invoke(&result_object, &vm_context);
    l152_assert_return_invoke(&result_object, &vm_context);
    l153_assert_return_invoke(&result_object, &vm_context);
    l154_assert_return_invoke(&result_object, &vm_context);
    l155_assert_return_invoke(&result_object, &vm_context);
    l156_assert_return_invoke(&result_object, &vm_context);
    l158_assert_return_invoke(&result_object, &vm_context);
    l159_assert_return_invoke(&result_object, &vm_context);
    l160_assert_return_invoke(&result_object, &vm_context);
    l161_assert_return_invoke(&result_object, &vm_context);
    l162_assert_return_invoke(&result_object, &vm_context);
    l164_assert_return_invoke(&result_object, &vm_context);
    l165_assert_return_invoke(&result_object, &vm_context);
    l166_assert_return_invoke(&result_object, &vm_context);
    l167_assert_return_invoke(&result_object, &vm_context);
    l168_assert_return_invoke(&result_object, &vm_context);
    l170_assert_return_invoke(&result_object, &vm_context);
    l171_assert_return_invoke(&result_object, &vm_context);
    l172_assert_return_invoke(&result_object, &vm_context);
    l173_assert_return_invoke(&result_object, &vm_context);
    l174_assert_return_invoke(&result_object, &vm_context);
    l176_assert_return_invoke(&result_object, &vm_context);
    l177_assert_return_invoke(&result_object, &vm_context);
    l178_assert_return_invoke(&result_object, &vm_context);
    l179_assert_return_invoke(&result_object, &vm_context);
    l180_assert_return_invoke(&result_object, &vm_context);
    l182_assert_return_invoke(&result_object, &vm_context);
    l183_assert_return_invoke(&result_object, &vm_context);
    l184_assert_return_invoke(&result_object, &vm_context);
    l185_assert_return_invoke(&result_object, &vm_context);
    l186_assert_return_invoke(&result_object, &vm_context);
    l188_assert_return_invoke(&result_object, &vm_context);
    l189_assert_return_invoke(&result_object, &vm_context);
    l190_assert_return_invoke(&result_object, &vm_context);
    l191_assert_return_invoke(&result_object, &vm_context);
}
fn create_module_2() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param i32) (result i64)))
      (type (;1;) (func (param i32)))
      (func (;0;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load8_u)
      (func (;1;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load8_u)
      (func (;2;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load8_u offset=1)
      (func (;3;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load8_u offset=2)
      (func (;4;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load8_u offset=25)
      (func (;5;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load8_s)
      (func (;6;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load8_s)
      (func (;7;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load8_s offset=1)
      (func (;8;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load8_s offset=2)
      (func (;9;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load8_s offset=25)
      (func (;10;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load16_u)
      (func (;11;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load16_u align=1)
      (func (;12;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load16_u offset=1 align=1)
      (func (;13;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load16_u offset=2)
      (func (;14;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load16_u offset=25)
      (func (;15;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load16_s)
      (func (;16;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load16_s align=1)
      (func (;17;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load16_s offset=1 align=1)
      (func (;18;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load16_s offset=2)
      (func (;19;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load16_s offset=25)
      (func (;20;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load32_u)
      (func (;21;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load32_u align=1)
      (func (;22;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load32_u offset=1 align=1)
      (func (;23;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load32_u offset=2 align=2)
      (func (;24;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load32_u offset=25)
      (func (;25;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load32_s)
      (func (;26;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load32_s align=1)
      (func (;27;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load32_s offset=1 align=1)
      (func (;28;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load32_s offset=2 align=2)
      (func (;29;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load32_s offset=25)
      (func (;30;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load)
      (func (;31;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load align=1)
      (func (;32;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load offset=1 align=1)
      (func (;33;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load offset=2 align=2)
      (func (;34;) (type 0) (param i32) (result i64)
        get_local 0
        i64.load offset=25)
      (func (;35;) (type 1) (param i32)
        get_local 0
        i64.load8_u offset=4294967295
        drop)
      (func (;36;) (type 1) (param i32)
        get_local 0
        i64.load8_s offset=4294967295
        drop)
      (func (;37;) (type 1) (param i32)
        get_local 0
        i64.load16_u offset=4294967295
        drop)
      (func (;38;) (type 1) (param i32)
        get_local 0
        i64.load16_s offset=4294967295
        drop)
      (func (;39;) (type 1) (param i32)
        get_local 0
        i64.load32_u offset=4294967295
        drop)
      (func (;40;) (type 1) (param i32)
        get_local 0
        i64.load32_s offset=4294967295
        drop)
      (func (;41;) (type 1) (param i32)
        get_local 0
        i64.load offset=4294967295
        drop)
      (memory (;0;) 1)
      (export \"8u_good1\" (func 0))
      (export \"8u_good2\" (func 1))
      (export \"8u_good3\" (func 2))
      (export \"8u_good4\" (func 3))
      (export \"8u_good5\" (func 4))
      (export \"8s_good1\" (func 5))
      (export \"8s_good2\" (func 6))
      (export \"8s_good3\" (func 7))
      (export \"8s_good4\" (func 8))
      (export \"8s_good5\" (func 9))
      (export \"16u_good1\" (func 10))
      (export \"16u_good2\" (func 11))
      (export \"16u_good3\" (func 12))
      (export \"16u_good4\" (func 13))
      (export \"16u_good5\" (func 14))
      (export \"16s_good1\" (func 15))
      (export \"16s_good2\" (func 16))
      (export \"16s_good3\" (func 17))
      (export \"16s_good4\" (func 18))
      (export \"16s_good5\" (func 19))
      (export \"32u_good1\" (func 20))
      (export \"32u_good2\" (func 21))
      (export \"32u_good3\" (func 22))
      (export \"32u_good4\" (func 23))
      (export \"32u_good5\" (func 24))
      (export \"32s_good1\" (func 25))
      (export \"32s_good2\" (func 26))
      (export \"32s_good3\" (func 27))
      (export \"32s_good4\" (func 28))
      (export \"32s_good5\" (func 29))
      (export \"64_good1\" (func 30))
      (export \"64_good2\" (func 31))
      (export \"64_good3\" (func 32))
      (export \"64_good4\" (func 33))
      (export \"64_good5\" (func 34))
      (export \"8u_bad\" (func 35))
      (export \"8s_bad\" (func 36))
      (export \"16u_bad\" (func 37))
      (export \"16s_bad\" (func 38))
      (export \"32u_bad\" (func 39))
      (export \"32s_bad\" (func 40))
      (export \"64_bad\" (func 41))
      (data (i32.const 0) \"abcdefghijklmnopqrstuvwxyz\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 355
fn l355_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l355_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 97 as i64);
}

// Line 356
fn l356_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l356_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 97 as i64);
}

// Line 357
fn l357_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l357_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 98 as i64);
}

// Line 358
fn l358_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l358_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 99 as i64);
}

// Line 359
fn l359_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l359_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 122 as i64);
}

// Line 361
fn l361_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l361_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 97 as i64);
}

// Line 362
fn l362_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l362_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 97 as i64);
}

// Line 363
fn l363_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l363_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 98 as i64);
}

// Line 364
fn l364_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l364_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 99 as i64);
}

// Line 365
fn l365_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l365_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 122 as i64);
}

// Line 367
fn l367_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l367_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 25185 as i64);
}

// Line 368
fn l368_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l368_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 25185 as i64);
}

// Line 369
fn l369_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l369_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 25442 as i64);
}

// Line 370
fn l370_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l370_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 25699 as i64);
}

// Line 371
fn l371_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l371_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 122 as i64);
}

// Line 373
fn l373_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l373_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 25185 as i64);
}

// Line 374
fn l374_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l374_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 25185 as i64);
}

// Line 375
fn l375_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l375_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 25442 as i64);
}

// Line 376
fn l376_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l376_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 25699 as i64);
}

// Line 377
fn l377_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l377_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 122 as i64);
}

// Line 379
fn l379_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l379_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32u_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 1684234849 as i64);
}

// Line 380
fn l380_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l380_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32u_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 1684234849 as i64);
}

// Line 381
fn l381_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l381_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32u_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 1701077858 as i64);
}

// Line 382
fn l382_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l382_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32u_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 1717920867 as i64);
}

// Line 383
fn l383_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l383_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32u_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 122 as i64);
}

// Line 385
fn l385_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l385_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32s_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 1684234849 as i64);
}

// Line 386
fn l386_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l386_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32s_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 1684234849 as i64);
}

// Line 387
fn l387_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l387_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32s_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 1701077858 as i64);
}

// Line 388
fn l388_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l388_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32s_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 1717920867 as i64);
}

// Line 389
fn l389_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l389_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32s_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 122 as i64);
}

// Line 391
fn l391_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l391_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 7523094288207667809 as i64);
}

// Line 392
fn l392_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l392_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 7523094288207667809 as i64);
}

// Line 393
fn l393_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l393_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 7595434461045744482 as i64);
}

// Line 394
fn l394_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l394_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 7667774633883821155 as i64);
}

// Line 395
fn l395_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l395_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 122 as i64);
}

// Line 397
fn l397_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l397_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 398
fn l398_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l398_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 399
fn l399_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l399_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 400
fn l400_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l400_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 401
fn l401_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l401_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 403
fn l403_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l403_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 404
fn l404_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l404_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 405
fn l405_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l405_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 406
fn l406_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l406_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 407
fn l407_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l407_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 409
fn l409_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l409_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 410
fn l410_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l410_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 411
fn l411_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l411_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 412
fn l412_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l412_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 413
fn l413_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l413_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 415
fn l415_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l415_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 416
fn l416_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l416_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 417
fn l417_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l417_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 418
fn l418_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l418_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 419
fn l419_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l419_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 421
fn l421_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l421_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32u_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 422
fn l422_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l422_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32u_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 423
fn l423_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l423_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32u_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 424
fn l424_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l424_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32u_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 425
fn l425_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l425_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32u_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 427
fn l427_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l427_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32s_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 428
fn l428_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l428_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32s_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 429
fn l429_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l429_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32s_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 430
fn l430_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l430_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32s_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 431
fn l431_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l431_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32s_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 433
fn l433_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l433_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 434
fn l434_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l434_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 435
fn l435_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l435_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 436
fn l436_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l436_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 437
fn l437_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l437_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65503 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 439
fn l439_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l439_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 440
fn l440_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l440_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 441
fn l441_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l441_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 442
fn l442_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l442_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 443
fn l443_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l443_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8u_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 445
fn l445_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l445_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 446
fn l446_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l446_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 447
fn l447_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l447_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 448
fn l448_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l448_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 449
fn l449_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l449_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("8s_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 451
fn l451_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l451_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 452
fn l452_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l452_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 453
fn l453_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l453_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 454
fn l454_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l454_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 455
fn l455_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l455_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16u_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 457
fn l457_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l457_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 458
fn l458_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l458_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 459
fn l459_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l459_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 460
fn l460_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l460_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 461
fn l461_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l461_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("16s_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 463
fn l463_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l463_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32u_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 464
fn l464_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l464_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32u_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 465
fn l465_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l465_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32u_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 466
fn l466_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l466_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32u_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 467
fn l467_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l467_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32u_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 469
fn l469_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l469_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32s_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 470
fn l470_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l470_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32s_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 471
fn l471_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l471_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32s_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 472
fn l472_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l472_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32s_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 473
fn l473_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l473_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32s_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 475
fn l475_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l475_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 476
fn l476_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l476_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 477
fn l477_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l477_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 478
fn l478_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l478_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65504 as i32, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 479

// Line 481

// Line 482

// Line 483

// Line 484

// Line 485

// Line 486

// Line 487

// Line 489

// Line 490

// Line 491

// Line 492

// Line 493

// Line 494

// Line 495

// Line 499

#[test]
fn test_module_2() {
    let result_object = create_module_2();
    let vm_context = result_object.instance.generate_context();
    // We group the calls together
    l355_assert_return_invoke(&result_object, &vm_context);
    l356_assert_return_invoke(&result_object, &vm_context);
    l357_assert_return_invoke(&result_object, &vm_context);
    l358_assert_return_invoke(&result_object, &vm_context);
    l359_assert_return_invoke(&result_object, &vm_context);
    l361_assert_return_invoke(&result_object, &vm_context);
    l362_assert_return_invoke(&result_object, &vm_context);
    l363_assert_return_invoke(&result_object, &vm_context);
    l364_assert_return_invoke(&result_object, &vm_context);
    l365_assert_return_invoke(&result_object, &vm_context);
    l367_assert_return_invoke(&result_object, &vm_context);
    l368_assert_return_invoke(&result_object, &vm_context);
    l369_assert_return_invoke(&result_object, &vm_context);
    l370_assert_return_invoke(&result_object, &vm_context);
    l371_assert_return_invoke(&result_object, &vm_context);
    l373_assert_return_invoke(&result_object, &vm_context);
    l374_assert_return_invoke(&result_object, &vm_context);
    l375_assert_return_invoke(&result_object, &vm_context);
    l376_assert_return_invoke(&result_object, &vm_context);
    l377_assert_return_invoke(&result_object, &vm_context);
    l379_assert_return_invoke(&result_object, &vm_context);
    l380_assert_return_invoke(&result_object, &vm_context);
    l381_assert_return_invoke(&result_object, &vm_context);
    l382_assert_return_invoke(&result_object, &vm_context);
    l383_assert_return_invoke(&result_object, &vm_context);
    l385_assert_return_invoke(&result_object, &vm_context);
    l386_assert_return_invoke(&result_object, &vm_context);
    l387_assert_return_invoke(&result_object, &vm_context);
    l388_assert_return_invoke(&result_object, &vm_context);
    l389_assert_return_invoke(&result_object, &vm_context);
    l391_assert_return_invoke(&result_object, &vm_context);
    l392_assert_return_invoke(&result_object, &vm_context);
    l393_assert_return_invoke(&result_object, &vm_context);
    l394_assert_return_invoke(&result_object, &vm_context);
    l395_assert_return_invoke(&result_object, &vm_context);
    l397_assert_return_invoke(&result_object, &vm_context);
    l398_assert_return_invoke(&result_object, &vm_context);
    l399_assert_return_invoke(&result_object, &vm_context);
    l400_assert_return_invoke(&result_object, &vm_context);
    l401_assert_return_invoke(&result_object, &vm_context);
    l403_assert_return_invoke(&result_object, &vm_context);
    l404_assert_return_invoke(&result_object, &vm_context);
    l405_assert_return_invoke(&result_object, &vm_context);
    l406_assert_return_invoke(&result_object, &vm_context);
    l407_assert_return_invoke(&result_object, &vm_context);
    l409_assert_return_invoke(&result_object, &vm_context);
    l410_assert_return_invoke(&result_object, &vm_context);
    l411_assert_return_invoke(&result_object, &vm_context);
    l412_assert_return_invoke(&result_object, &vm_context);
    l413_assert_return_invoke(&result_object, &vm_context);
    l415_assert_return_invoke(&result_object, &vm_context);
    l416_assert_return_invoke(&result_object, &vm_context);
    l417_assert_return_invoke(&result_object, &vm_context);
    l418_assert_return_invoke(&result_object, &vm_context);
    l419_assert_return_invoke(&result_object, &vm_context);
    l421_assert_return_invoke(&result_object, &vm_context);
    l422_assert_return_invoke(&result_object, &vm_context);
    l423_assert_return_invoke(&result_object, &vm_context);
    l424_assert_return_invoke(&result_object, &vm_context);
    l425_assert_return_invoke(&result_object, &vm_context);
    l427_assert_return_invoke(&result_object, &vm_context);
    l428_assert_return_invoke(&result_object, &vm_context);
    l429_assert_return_invoke(&result_object, &vm_context);
    l430_assert_return_invoke(&result_object, &vm_context);
    l431_assert_return_invoke(&result_object, &vm_context);
    l433_assert_return_invoke(&result_object, &vm_context);
    l434_assert_return_invoke(&result_object, &vm_context);
    l435_assert_return_invoke(&result_object, &vm_context);
    l436_assert_return_invoke(&result_object, &vm_context);
    l437_assert_return_invoke(&result_object, &vm_context);
    l439_assert_return_invoke(&result_object, &vm_context);
    l440_assert_return_invoke(&result_object, &vm_context);
    l441_assert_return_invoke(&result_object, &vm_context);
    l442_assert_return_invoke(&result_object, &vm_context);
    l443_assert_return_invoke(&result_object, &vm_context);
    l445_assert_return_invoke(&result_object, &vm_context);
    l446_assert_return_invoke(&result_object, &vm_context);
    l447_assert_return_invoke(&result_object, &vm_context);
    l448_assert_return_invoke(&result_object, &vm_context);
    l449_assert_return_invoke(&result_object, &vm_context);
    l451_assert_return_invoke(&result_object, &vm_context);
    l452_assert_return_invoke(&result_object, &vm_context);
    l453_assert_return_invoke(&result_object, &vm_context);
    l454_assert_return_invoke(&result_object, &vm_context);
    l455_assert_return_invoke(&result_object, &vm_context);
    l457_assert_return_invoke(&result_object, &vm_context);
    l458_assert_return_invoke(&result_object, &vm_context);
    l459_assert_return_invoke(&result_object, &vm_context);
    l460_assert_return_invoke(&result_object, &vm_context);
    l461_assert_return_invoke(&result_object, &vm_context);
    l463_assert_return_invoke(&result_object, &vm_context);
    l464_assert_return_invoke(&result_object, &vm_context);
    l465_assert_return_invoke(&result_object, &vm_context);
    l466_assert_return_invoke(&result_object, &vm_context);
    l467_assert_return_invoke(&result_object, &vm_context);
    l469_assert_return_invoke(&result_object, &vm_context);
    l470_assert_return_invoke(&result_object, &vm_context);
    l471_assert_return_invoke(&result_object, &vm_context);
    l472_assert_return_invoke(&result_object, &vm_context);
    l473_assert_return_invoke(&result_object, &vm_context);
    l475_assert_return_invoke(&result_object, &vm_context);
    l476_assert_return_invoke(&result_object, &vm_context);
    l477_assert_return_invoke(&result_object, &vm_context);
    l478_assert_return_invoke(&result_object, &vm_context);
}
fn create_module_3() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param i32) (result f32)))
      (type (;1;) (func (param i32)))
      (func (;0;) (type 0) (param i32) (result f32)
        get_local 0
        f32.load)
      (func (;1;) (type 0) (param i32) (result f32)
        get_local 0
        f32.load align=1)
      (func (;2;) (type 0) (param i32) (result f32)
        get_local 0
        f32.load offset=1 align=1)
      (func (;3;) (type 0) (param i32) (result f32)
        get_local 0
        f32.load offset=2 align=2)
      (func (;4;) (type 0) (param i32) (result f32)
        get_local 0
        f32.load offset=8)
      (func (;5;) (type 1) (param i32)
        get_local 0
        f32.load offset=4294967295
        drop)
      (memory (;0;) 1)
      (export \"32_good1\" (func 0))
      (export \"32_good2\" (func 1))
      (export \"32_good3\" (func 2))
      (export \"32_good4\" (func 3))
      (export \"32_good5\" (func 4))
      (export \"32_bad\" (func 5))
      (data (i32.const 0) \"\\00\\00\\00\\00\\00\\00\\a0\\7f\\01\\00\\d0\\7f\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 523
fn l523_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l523_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 524
fn l524_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l524_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 525
fn l525_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l525_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 526
fn l526_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l526_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 527
fn l527_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l527_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f32::NAN).is_sign_positive());
}

// Line 529
fn l529_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l529_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65524 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 530
fn l530_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l530_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65524 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 531
fn l531_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l531_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65524 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 532
fn l532_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l532_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65524 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 533
fn l533_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l533_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65524 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 535
fn l535_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l535_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65525 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 536
fn l536_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l536_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65525 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 537
fn l537_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l537_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65525 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 538
fn l538_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l538_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("32_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65525 as i32, &vm_context);
    assert_eq!(result, 0.0 as f32);
}

// Line 539

// Line 541

// Line 542

// Line 546

#[test]
fn test_module_3() {
    let result_object = create_module_3();
    let vm_context = result_object.instance.generate_context();
    // We group the calls together
    l523_assert_return_invoke(&result_object, &vm_context);
    l524_assert_return_invoke(&result_object, &vm_context);
    l525_assert_return_invoke(&result_object, &vm_context);
    l526_assert_return_invoke(&result_object, &vm_context);
    l527_assert_return_invoke(&result_object, &vm_context);
    l529_assert_return_invoke(&result_object, &vm_context);
    l530_assert_return_invoke(&result_object, &vm_context);
    l531_assert_return_invoke(&result_object, &vm_context);
    l532_assert_return_invoke(&result_object, &vm_context);
    l533_assert_return_invoke(&result_object, &vm_context);
    l535_assert_return_invoke(&result_object, &vm_context);
    l536_assert_return_invoke(&result_object, &vm_context);
    l537_assert_return_invoke(&result_object, &vm_context);
    l538_assert_return_invoke(&result_object, &vm_context);
}
fn create_module_4() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param i32) (result f64)))
      (type (;1;) (func (param i32)))
      (func (;0;) (type 0) (param i32) (result f64)
        get_local 0
        f64.load)
      (func (;1;) (type 0) (param i32) (result f64)
        get_local 0
        f64.load align=1)
      (func (;2;) (type 0) (param i32) (result f64)
        get_local 0
        f64.load offset=1 align=1)
      (func (;3;) (type 0) (param i32) (result f64)
        get_local 0
        f64.load offset=2 align=2)
      (func (;4;) (type 0) (param i32) (result f64)
        get_local 0
        f64.load offset=18)
      (func (;5;) (type 1) (param i32)
        get_local 0
        f64.load offset=4294967295
        drop)
      (memory (;0;) 1)
      (export \"64_good1\" (func 0))
      (export \"64_good2\" (func 1))
      (export \"64_good3\" (func 2))
      (export \"64_good4\" (func 3))
      (export \"64_good5\" (func 4))
      (export \"64_bad\" (func 5))
      (data (i32.const 0) \"\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\f4\\7f\\01\\00\\00\\00\\00\\00\\fc\\7f\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 570
fn l570_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l570_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 571
fn l571_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l571_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 572
fn l572_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l572_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 573
fn l573_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l573_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 574
fn l574_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l574_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert!(result.is_nan());
    assert_eq!(result.is_sign_positive(), (std::f64::NAN).is_sign_positive());
}

// Line 576
fn l576_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l576_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65510 as i32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 577
fn l577_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l577_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65510 as i32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 578
fn l578_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l578_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65510 as i32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 579
fn l579_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l579_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65510 as i32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 580
fn l580_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l580_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good5") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65510 as i32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 582
fn l582_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l582_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good1") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65511 as i32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 583
fn l583_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l583_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good2") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65511 as i32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 584
fn l584_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l584_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good3") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65511 as i32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 585
fn l585_assert_return_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l585_assert_return_invoke");
    let func_index = match result_object.module.info.exports.get("64_good4") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65511 as i32, &vm_context);
    assert_eq!(result, 0.0 as f64);
}

// Line 586

// Line 588

// Line 589

#[test]
fn test_module_4() {
    let result_object = create_module_4();
    let vm_context = result_object.instance.generate_context();
    // We group the calls together
    l570_assert_return_invoke(&result_object, &vm_context);
    l571_assert_return_invoke(&result_object, &vm_context);
    l572_assert_return_invoke(&result_object, &vm_context);
    l573_assert_return_invoke(&result_object, &vm_context);
    l574_assert_return_invoke(&result_object, &vm_context);
    l576_assert_return_invoke(&result_object, &vm_context);
    l577_assert_return_invoke(&result_object, &vm_context);
    l578_assert_return_invoke(&result_object, &vm_context);
    l579_assert_return_invoke(&result_object, &vm_context);
    l580_assert_return_invoke(&result_object, &vm_context);
    l582_assert_return_invoke(&result_object, &vm_context);
    l583_assert_return_invoke(&result_object, &vm_context);
    l584_assert_return_invoke(&result_object, &vm_context);
    l585_assert_return_invoke(&result_object, &vm_context);
}
