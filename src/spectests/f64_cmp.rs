// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/f64_cmp.wast
#![allow(
    warnings,
    dead_code
)]
use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, VmCtx, Export};
use super::_common::spectest_importobject;
use wabt::wat2wasm;


// Line 4
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param f64 f64) (result i32)))
      (func (;0;) (type 0) (param f64 f64) (result i32)
        get_local 0
        get_local 1
        f64.eq)
      (func (;1;) (type 0) (param f64 f64) (result i32)
        get_local 0
        get_local 1
        f64.ne)
      (func (;2;) (type 0) (param f64 f64) (result i32)
        get_local 0
        get_local 1
        f64.lt)
      (func (;3;) (type 0) (param f64 f64) (result i32)
        get_local 0
        get_local 1
        f64.le)
      (func (;4;) (type 0) (param f64 f64) (result i32)
        get_local 0
        get_local 1
        f64.gt)
      (func (;5;) (type 0) (param f64 f64) (result i32)
        get_local 0
        get_local 1
        f64.ge)
      (export \"eq\" (func 0))
      (export \"ne\" (func 1))
      (export \"lt\" (func 2))
      (export \"le\" (func 3))
      (export \"gt\" (func 4))
      (export \"ge\" (func 5)))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 13
fn l13_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 14
fn l14_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 15
fn l15_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 16
fn l16_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 17
fn l17_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 18
fn l18_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 19
fn l19_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 20
fn l20_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 21
fn l21_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 22
fn l22_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 23
fn l23_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 24
fn l24_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 25
fn l25_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 26
fn l26_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 27
fn l27_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 28
fn l28_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 29
fn l29_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 30
fn l30_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 31
fn l31_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 32
fn l32_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 33
fn l33_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 34
fn l34_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 35
fn l35_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 36
fn l36_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 37
fn l37_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 38
fn l38_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 39
fn l39_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 40
fn l40_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 41
fn l41_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 42
fn l42_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 43
fn l43_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 44
fn l44_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 45
fn l45_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 46
fn l46_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 47
fn l47_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 48
fn l48_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 49
fn l49_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 50
fn l50_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 51
fn l51_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 52
fn l52_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 53
fn l53_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 54
fn l54_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 55
fn l55_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 56
fn l56_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 57
fn l57_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 58
fn l58_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 59
fn l59_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 60
fn l60_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 61
fn l61_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 62
fn l62_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 63
fn l63_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 64
fn l64_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 65
fn l65_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 66
fn l66_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 67
fn l67_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 68
fn l68_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 69
fn l69_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 70
fn l70_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 71
fn l71_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 72
fn l72_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 73
fn l73_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 74
fn l74_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 75
fn l75_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 76
fn l76_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 77
fn l77_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 78
fn l78_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 79
fn l79_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 80
fn l80_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 81
fn l81_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 82
fn l82_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 83
fn l83_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 84
fn l84_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 85
fn l85_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 86
fn l86_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 87
fn l87_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 88
fn l88_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 89
fn l89_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 90
fn l90_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 91
fn l91_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 92
fn l92_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 93
fn l93_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 94
fn l94_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 95
fn l95_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 96
fn l96_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 97
fn l97_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 98
fn l98_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 99
fn l99_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 100
fn l100_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 101
fn l101_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 102
fn l102_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 103
fn l103_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 104
fn l104_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 105
fn l105_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 106
fn l106_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 107
fn l107_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 108
fn l108_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 109
fn l109_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 110
fn l110_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 111
fn l111_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 112
fn l112_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 113
fn l113_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 114
fn l114_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 115
fn l115_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 116
fn l116_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 117
fn l117_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 118
fn l118_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 119
fn l119_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 120
fn l120_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 121
fn l121_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 122
fn l122_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 123
fn l123_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 124
fn l124_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 125
fn l125_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 126
fn l126_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 127
fn l127_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 128
fn l128_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 129
fn l129_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 130
fn l130_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 131
fn l131_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 132
fn l132_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 133
fn l133_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 134
fn l134_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 135
fn l135_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 136
fn l136_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 137
fn l137_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 138
fn l138_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 139
fn l139_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 140
fn l140_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 141
fn l141_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 142
fn l142_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 143
fn l143_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 144
fn l144_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 145
fn l145_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 146
fn l146_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 147
fn l147_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 148
fn l148_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 149
fn l149_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 150
fn l150_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 151
fn l151_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 152
fn l152_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 153
fn l153_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 154
fn l154_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 155
fn l155_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 156
fn l156_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 157
fn l157_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 158
fn l158_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 159
fn l159_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 160
fn l160_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 161
fn l161_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 162
fn l162_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 163
fn l163_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 164
fn l164_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 165
fn l165_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 166
fn l166_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 167
fn l167_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 168
fn l168_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 169
fn l169_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 170
fn l170_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 171
fn l171_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 172
fn l172_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 173
fn l173_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 174
fn l174_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 175
fn l175_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 176
fn l176_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 177
fn l177_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 178
fn l178_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 179
fn l179_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 180
fn l180_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 181
fn l181_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 182
fn l182_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 183
fn l183_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 184
fn l184_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 185
fn l185_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 186
fn l186_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 187
fn l187_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 188
fn l188_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 189
fn l189_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 190
fn l190_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 191
fn l191_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 192
fn l192_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 193
fn l193_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 194
fn l194_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 195
fn l195_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 196
fn l196_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 197
fn l197_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 198
fn l198_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 199
fn l199_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 200
fn l200_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 201
fn l201_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 202
fn l202_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 203
fn l203_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 204
fn l204_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 205
fn l205_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 206
fn l206_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 207
fn l207_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 208
fn l208_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 209
fn l209_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 210
fn l210_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 211
fn l211_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 212
fn l212_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 213
fn l213_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 214
fn l214_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 215
fn l215_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 216
fn l216_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 217
fn l217_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 218
fn l218_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 219
fn l219_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 220
fn l220_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 221
fn l221_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 222
fn l222_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 223
fn l223_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 224
fn l224_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 225
fn l225_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 226
fn l226_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 227
fn l227_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 228
fn l228_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 229
fn l229_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 230
fn l230_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 231
fn l231_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 232
fn l232_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 233
fn l233_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 234
fn l234_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 235
fn l235_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 236
fn l236_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 237
fn l237_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 238
fn l238_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 239
fn l239_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 240
fn l240_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 241
fn l241_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 242
fn l242_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 243
fn l243_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 244
fn l244_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 245
fn l245_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 246
fn l246_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 247
fn l247_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 248
fn l248_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 249
fn l249_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 250
fn l250_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 251
fn l251_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 252
fn l252_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 253
fn l253_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 254
fn l254_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 255
fn l255_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 256
fn l256_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 257
fn l257_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 258
fn l258_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 259
fn l259_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 260
fn l260_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 261
fn l261_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 262
fn l262_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 263
fn l263_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 264
fn l264_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 265
fn l265_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 266
fn l266_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 267
fn l267_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 268
fn l268_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 269
fn l269_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 270
fn l270_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 271
fn l271_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 272
fn l272_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 273
fn l273_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 274
fn l274_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 275
fn l275_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 276
fn l276_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 277
fn l277_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 278
fn l278_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 279
fn l279_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 280
fn l280_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 281
fn l281_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 282
fn l282_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 283
fn l283_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 284
fn l284_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 285
fn l285_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 286
fn l286_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 287
fn l287_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 288
fn l288_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 289
fn l289_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 290
fn l290_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 291
fn l291_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 292
fn l292_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 293
fn l293_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 294
fn l294_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 295
fn l295_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 296
fn l296_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 297
fn l297_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 298
fn l298_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 299
fn l299_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 300
fn l300_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 301
fn l301_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 302
fn l302_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 303
fn l303_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 304
fn l304_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 305
fn l305_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 306
fn l306_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 307
fn l307_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 308
fn l308_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 309
fn l309_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 310
fn l310_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 311
fn l311_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 312
fn l312_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 313
fn l313_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 314
fn l314_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 315
fn l315_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 316
fn l316_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 317
fn l317_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 318
fn l318_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 319
fn l319_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 320
fn l320_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 321
fn l321_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 322
fn l322_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 323
fn l323_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 324
fn l324_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 325
fn l325_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 326
fn l326_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 327
fn l327_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 328
fn l328_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 329
fn l329_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 330
fn l330_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 331
fn l331_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 332
fn l332_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 333
fn l333_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 334
fn l334_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 335
fn l335_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 336
fn l336_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 337
fn l337_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 338
fn l338_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 339
fn l339_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 340
fn l340_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 341
fn l341_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 342
fn l342_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 343
fn l343_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 344
fn l344_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 345
fn l345_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 346
fn l346_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 347
fn l347_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 348
fn l348_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 349
fn l349_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 350
fn l350_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 351
fn l351_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 352
fn l352_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 353
fn l353_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 354
fn l354_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 355
fn l355_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 356
fn l356_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 357
fn l357_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 358
fn l358_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 359
fn l359_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 360
fn l360_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 361
fn l361_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 362
fn l362_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 363
fn l363_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 364
fn l364_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 365
fn l365_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 366
fn l366_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 367
fn l367_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 368
fn l368_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 369
fn l369_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 370
fn l370_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 371
fn l371_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 372
fn l372_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 373
fn l373_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 374
fn l374_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 375
fn l375_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 376
fn l376_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 377
fn l377_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 378
fn l378_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 379
fn l379_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 380
fn l380_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 381
fn l381_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 382
fn l382_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 383
fn l383_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 384
fn l384_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 385
fn l385_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 386
fn l386_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 387
fn l387_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 388
fn l388_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 389
fn l389_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 390
fn l390_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 391
fn l391_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 392
fn l392_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 393
fn l393_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 394
fn l394_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 395
fn l395_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 396
fn l396_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 397
fn l397_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 398
fn l398_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 399
fn l399_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 400
fn l400_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 401
fn l401_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 402
fn l402_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 403
fn l403_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 404
fn l404_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 405
fn l405_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 406
fn l406_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 407
fn l407_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 408
fn l408_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 409
fn l409_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 410
fn l410_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 411
fn l411_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 412
fn l412_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 413
fn l413_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 414
fn l414_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 415
fn l415_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 416
fn l416_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 417
fn l417_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 418
fn l418_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 419
fn l419_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 420
fn l420_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 421
fn l421_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 422
fn l422_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 423
fn l423_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 424
fn l424_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 425
fn l425_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 426
fn l426_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 427
fn l427_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 428
fn l428_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 429
fn l429_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 430
fn l430_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 431
fn l431_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 432
fn l432_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 433
fn l433_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 434
fn l434_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 435
fn l435_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 436
fn l436_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 437
fn l437_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 438
fn l438_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 439
fn l439_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 440
fn l440_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 441
fn l441_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 442
fn l442_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 443
fn l443_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 444
fn l444_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 445
fn l445_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 446
fn l446_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 447
fn l447_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 448
fn l448_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 449
fn l449_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 450
fn l450_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 451
fn l451_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 452
fn l452_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 453
fn l453_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 454
fn l454_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 455
fn l455_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 456
fn l456_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 457
fn l457_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 458
fn l458_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 459
fn l459_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 460
fn l460_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 461
fn l461_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 462
fn l462_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 463
fn l463_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 464
fn l464_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 465
fn l465_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 466
fn l466_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 467
fn l467_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 468
fn l468_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 469
fn l469_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 470
fn l470_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 471
fn l471_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 472
fn l472_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 473
fn l473_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 474
fn l474_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 475
fn l475_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 476
fn l476_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 477
fn l477_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 478
fn l478_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 479
fn l479_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 480
fn l480_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 481
fn l481_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 482
fn l482_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 483
fn l483_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 484
fn l484_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 485
fn l485_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 486
fn l486_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 487
fn l487_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 488
fn l488_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 489
fn l489_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 490
fn l490_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 491
fn l491_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 492
fn l492_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 493
fn l493_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 494
fn l494_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 495
fn l495_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 496
fn l496_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 497
fn l497_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 498
fn l498_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 499
fn l499_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 500
fn l500_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 501
fn l501_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 502
fn l502_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 503
fn l503_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 504
fn l504_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 505
fn l505_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 506
fn l506_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 507
fn l507_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 508
fn l508_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 509
fn l509_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 510
fn l510_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 511
fn l511_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 512
fn l512_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 513
fn l513_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 514
fn l514_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 515
fn l515_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 516
fn l516_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 517
fn l517_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 518
fn l518_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 519
fn l519_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 520
fn l520_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 521
fn l521_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 522
fn l522_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 523
fn l523_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 524
fn l524_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 525
fn l525_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 526
fn l526_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 527
fn l527_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 528
fn l528_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 529
fn l529_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 530
fn l530_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 531
fn l531_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 532
fn l532_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 533
fn l533_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 534
fn l534_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 535
fn l535_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 536
fn l536_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 537
fn l537_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 538
fn l538_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 539
fn l539_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 540
fn l540_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 541
fn l541_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 542
fn l542_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 543
fn l543_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 544
fn l544_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 545
fn l545_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 546
fn l546_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 547
fn l547_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 548
fn l548_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 549
fn l549_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 550
fn l550_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 551
fn l551_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 552
fn l552_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 553
fn l553_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 554
fn l554_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 555
fn l555_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 556
fn l556_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 557
fn l557_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 558
fn l558_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 559
fn l559_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 560
fn l560_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 561
fn l561_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 562
fn l562_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 563
fn l563_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 564
fn l564_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 565
fn l565_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 566
fn l566_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 567
fn l567_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 568
fn l568_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 569
fn l569_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 570
fn l570_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 571
fn l571_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 572
fn l572_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 573
fn l573_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 574
fn l574_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 575
fn l575_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 576
fn l576_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 577
fn l577_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 578
fn l578_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 579
fn l579_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 580
fn l580_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 581
fn l581_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 582
fn l582_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 583
fn l583_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 584
fn l584_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 585
fn l585_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 586
fn l586_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 587
fn l587_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 588
fn l588_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 589
fn l589_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 590
fn l590_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 591
fn l591_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 592
fn l592_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 593
fn l593_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 594
fn l594_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 595
fn l595_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 596
fn l596_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 597
fn l597_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 598
fn l598_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 599
fn l599_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 600
fn l600_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 601
fn l601_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 602
fn l602_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 603
fn l603_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 604
fn l604_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 605
fn l605_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 606
fn l606_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 607
fn l607_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 608
fn l608_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 609
fn l609_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 610
fn l610_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 611
fn l611_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 612
fn l612_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 613
fn l613_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 614
fn l614_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 615
fn l615_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 616
fn l616_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 617
fn l617_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 618
fn l618_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 619
fn l619_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 620
fn l620_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 621
fn l621_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 622
fn l622_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 623
fn l623_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 624
fn l624_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 625
fn l625_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 626
fn l626_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 627
fn l627_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 628
fn l628_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 629
fn l629_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 630
fn l630_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 631
fn l631_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 632
fn l632_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 633
fn l633_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 634
fn l634_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 635
fn l635_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 636
fn l636_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 637
fn l637_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 638
fn l638_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 639
fn l639_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 640
fn l640_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 641
fn l641_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 642
fn l642_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 643
fn l643_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 644
fn l644_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 645
fn l645_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 646
fn l646_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 647
fn l647_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 648
fn l648_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 649
fn l649_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 650
fn l650_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 651
fn l651_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 652
fn l652_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 653
fn l653_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 654
fn l654_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 655
fn l655_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 656
fn l656_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 657
fn l657_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 658
fn l658_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 659
fn l659_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 660
fn l660_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 661
fn l661_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 662
fn l662_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 663
fn l663_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 664
fn l664_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 665
fn l665_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 666
fn l666_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 667
fn l667_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 668
fn l668_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 669
fn l669_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 670
fn l670_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 671
fn l671_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 672
fn l672_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 673
fn l673_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 674
fn l674_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 675
fn l675_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 676
fn l676_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 677
fn l677_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 678
fn l678_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 679
fn l679_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 680
fn l680_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 681
fn l681_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 682
fn l682_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 683
fn l683_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 684
fn l684_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 685
fn l685_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 686
fn l686_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 687
fn l687_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 688
fn l688_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 689
fn l689_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 690
fn l690_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 691
fn l691_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 692
fn l692_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 693
fn l693_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 694
fn l694_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 695
fn l695_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 696
fn l696_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 697
fn l697_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 698
fn l698_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 699
fn l699_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 700
fn l700_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 701
fn l701_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 702
fn l702_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 703
fn l703_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 704
fn l704_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 705
fn l705_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 706
fn l706_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 707
fn l707_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 708
fn l708_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 709
fn l709_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 710
fn l710_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 711
fn l711_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 712
fn l712_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 713
fn l713_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 714
fn l714_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 715
fn l715_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 716
fn l716_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 717
fn l717_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 718
fn l718_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 719
fn l719_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 720
fn l720_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 721
fn l721_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 722
fn l722_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 723
fn l723_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 724
fn l724_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 725
fn l725_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 726
fn l726_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 727
fn l727_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 728
fn l728_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 729
fn l729_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 730
fn l730_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 731
fn l731_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 732
fn l732_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 733
fn l733_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 734
fn l734_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 735
fn l735_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 736
fn l736_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 737
fn l737_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 738
fn l738_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 739
fn l739_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 740
fn l740_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 741
fn l741_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 742
fn l742_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 743
fn l743_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 744
fn l744_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 745
fn l745_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 746
fn l746_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 747
fn l747_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 748
fn l748_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 749
fn l749_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 750
fn l750_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 751
fn l751_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 752
fn l752_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 753
fn l753_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 754
fn l754_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 755
fn l755_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 756
fn l756_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 757
fn l757_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 758
fn l758_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 759
fn l759_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 760
fn l760_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 761
fn l761_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 762
fn l762_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 763
fn l763_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 764
fn l764_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 765
fn l765_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 766
fn l766_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 767
fn l767_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 768
fn l768_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 769
fn l769_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 770
fn l770_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 771
fn l771_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 772
fn l772_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 773
fn l773_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 774
fn l774_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 775
fn l775_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 776
fn l776_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 777
fn l777_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 778
fn l778_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 779
fn l779_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 780
fn l780_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 781
fn l781_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 782
fn l782_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 783
fn l783_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 784
fn l784_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 785
fn l785_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 786
fn l786_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 787
fn l787_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 788
fn l788_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 789
fn l789_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 790
fn l790_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 791
fn l791_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 792
fn l792_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 793
fn l793_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 794
fn l794_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 795
fn l795_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 796
fn l796_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 797
fn l797_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 798
fn l798_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 799
fn l799_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 800
fn l800_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 801
fn l801_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 802
fn l802_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 803
fn l803_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 804
fn l804_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 805
fn l805_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 806
fn l806_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 807
fn l807_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 808
fn l808_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 809
fn l809_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 810
fn l810_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 811
fn l811_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 812
fn l812_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 813
fn l813_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 814
fn l814_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 815
fn l815_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 816
fn l816_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 817
fn l817_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 818
fn l818_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 819
fn l819_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 820
fn l820_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 821
fn l821_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 822
fn l822_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 823
fn l823_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 824
fn l824_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 825
fn l825_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 826
fn l826_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 827
fn l827_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 828
fn l828_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 829
fn l829_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 830
fn l830_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 831
fn l831_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 832
fn l832_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 833
fn l833_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 834
fn l834_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 835
fn l835_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 836
fn l836_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 837
fn l837_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 838
fn l838_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 839
fn l839_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 840
fn l840_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 841
fn l841_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 842
fn l842_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 843
fn l843_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 844
fn l844_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 845
fn l845_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 846
fn l846_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 847
fn l847_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 848
fn l848_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 849
fn l849_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 850
fn l850_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 851
fn l851_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 852
fn l852_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 853
fn l853_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 854
fn l854_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 855
fn l855_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 856
fn l856_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 857
fn l857_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 858
fn l858_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 859
fn l859_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 860
fn l860_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 861
fn l861_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 862
fn l862_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 863
fn l863_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 864
fn l864_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 865
fn l865_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 866
fn l866_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 867
fn l867_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 868
fn l868_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 869
fn l869_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 870
fn l870_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 871
fn l871_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 872
fn l872_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 873
fn l873_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 874
fn l874_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 875
fn l875_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 876
fn l876_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 877
fn l877_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 878
fn l878_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 879
fn l879_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 880
fn l880_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 881
fn l881_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 882
fn l882_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 883
fn l883_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 884
fn l884_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 885
fn l885_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 886
fn l886_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 887
fn l887_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 888
fn l888_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 889
fn l889_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 890
fn l890_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 891
fn l891_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 892
fn l892_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 893
fn l893_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 894
fn l894_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 895
fn l895_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 896
fn l896_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 897
fn l897_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 898
fn l898_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 899
fn l899_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 900
fn l900_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 901
fn l901_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 902
fn l902_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 903
fn l903_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 904
fn l904_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 905
fn l905_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 906
fn l906_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 907
fn l907_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 908
fn l908_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 909
fn l909_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 910
fn l910_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 911
fn l911_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 912
fn l912_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 913
fn l913_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 914
fn l914_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 915
fn l915_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 916
fn l916_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 917
fn l917_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 918
fn l918_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 919
fn l919_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 920
fn l920_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 921
fn l921_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 922
fn l922_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 923
fn l923_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 924
fn l924_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 925
fn l925_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 926
fn l926_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 927
fn l927_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 928
fn l928_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 929
fn l929_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 930
fn l930_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 931
fn l931_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 932
fn l932_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 933
fn l933_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 934
fn l934_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 935
fn l935_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 936
fn l936_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 937
fn l937_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 938
fn l938_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 939
fn l939_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 940
fn l940_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 941
fn l941_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 942
fn l942_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 943
fn l943_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 944
fn l944_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 945
fn l945_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 946
fn l946_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 947
fn l947_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 948
fn l948_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 949
fn l949_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 950
fn l950_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 951
fn l951_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 952
fn l952_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 953
fn l953_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 954
fn l954_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 955
fn l955_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 956
fn l956_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 957
fn l957_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 958
fn l958_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 959
fn l959_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 960
fn l960_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 961
fn l961_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 962
fn l962_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 963
fn l963_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 964
fn l964_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 965
fn l965_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 966
fn l966_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 967
fn l967_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 968
fn l968_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 969
fn l969_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 970
fn l970_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 971
fn l971_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 972
fn l972_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 973
fn l973_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 974
fn l974_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 975
fn l975_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 976
fn l976_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 977
fn l977_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 978
fn l978_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 979
fn l979_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 980
fn l980_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 981
fn l981_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 982
fn l982_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 983
fn l983_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 984
fn l984_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 985
fn l985_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 986
fn l986_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 987
fn l987_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 988
fn l988_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 989
fn l989_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 990
fn l990_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 991
fn l991_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 992
fn l992_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 993
fn l993_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 994
fn l994_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 995
fn l995_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 996
fn l996_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 997
fn l997_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 998
fn l998_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 999
fn l999_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1000
fn l1000_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1001
fn l1001_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1002
fn l1002_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1003
fn l1003_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1004
fn l1004_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1005
fn l1005_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1006
fn l1006_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1007
fn l1007_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1008
fn l1008_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1009
fn l1009_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1010
fn l1010_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1011
fn l1011_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1012
fn l1012_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1013
fn l1013_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1014
fn l1014_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1015
fn l1015_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1016
fn l1016_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1017
fn l1017_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1018
fn l1018_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1019
fn l1019_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1020
fn l1020_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1021
fn l1021_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1022
fn l1022_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1023
fn l1023_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1024
fn l1024_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1025
fn l1025_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1026
fn l1026_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1027
fn l1027_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1028
fn l1028_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1029
fn l1029_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1030
fn l1030_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1031
fn l1031_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1032
fn l1032_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1033
fn l1033_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1034
fn l1034_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1035
fn l1035_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1036
fn l1036_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1037
fn l1037_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1038
fn l1038_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1039
fn l1039_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1040
fn l1040_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1041
fn l1041_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1042
fn l1042_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1043
fn l1043_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1044
fn l1044_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1045
fn l1045_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1046
fn l1046_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1047
fn l1047_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1048
fn l1048_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1049
fn l1049_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1050
fn l1050_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1051
fn l1051_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1052
fn l1052_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1053
fn l1053_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1054
fn l1054_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1055
fn l1055_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1056
fn l1056_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1057
fn l1057_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1058
fn l1058_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1059
fn l1059_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1060
fn l1060_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1061
fn l1061_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1062
fn l1062_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1063
fn l1063_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1064
fn l1064_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1065
fn l1065_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1066
fn l1066_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1067
fn l1067_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1068
fn l1068_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1069
fn l1069_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1070
fn l1070_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1071
fn l1071_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1072
fn l1072_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1073
fn l1073_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1074
fn l1074_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1075
fn l1075_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1076
fn l1076_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1077
fn l1077_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1078
fn l1078_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1079
fn l1079_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1080
fn l1080_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1081
fn l1081_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1082
fn l1082_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1083
fn l1083_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1084
fn l1084_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1085
fn l1085_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1086
fn l1086_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1087
fn l1087_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1088
fn l1088_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1089
fn l1089_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1090
fn l1090_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1091
fn l1091_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1092
fn l1092_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1093
fn l1093_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1094
fn l1094_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1095
fn l1095_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1096
fn l1096_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1097
fn l1097_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1098
fn l1098_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1099
fn l1099_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1100
fn l1100_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1101
fn l1101_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1102
fn l1102_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1103
fn l1103_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1104
fn l1104_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1105
fn l1105_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1106
fn l1106_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1107
fn l1107_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1108
fn l1108_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1109
fn l1109_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1110
fn l1110_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1111
fn l1111_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1112
fn l1112_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1113
fn l1113_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1114
fn l1114_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1115
fn l1115_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1116
fn l1116_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1117
fn l1117_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1118
fn l1118_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1119
fn l1119_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1120
fn l1120_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1121
fn l1121_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1122
fn l1122_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1123
fn l1123_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1124
fn l1124_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1125
fn l1125_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1126
fn l1126_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1127
fn l1127_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1128
fn l1128_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1129
fn l1129_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1130
fn l1130_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1131
fn l1131_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1132
fn l1132_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1133
fn l1133_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1134
fn l1134_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1135
fn l1135_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1136
fn l1136_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1137
fn l1137_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1138
fn l1138_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1139
fn l1139_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1140
fn l1140_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1141
fn l1141_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1142
fn l1142_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1143
fn l1143_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1144
fn l1144_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1145
fn l1145_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1146
fn l1146_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1147
fn l1147_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1148
fn l1148_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1149
fn l1149_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1150
fn l1150_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1151
fn l1151_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1152
fn l1152_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1153
fn l1153_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1154
fn l1154_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1155
fn l1155_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1156
fn l1156_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1157
fn l1157_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1158
fn l1158_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1159
fn l1159_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1160
fn l1160_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1161
fn l1161_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1162
fn l1162_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1163
fn l1163_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1164
fn l1164_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1165
fn l1165_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1166
fn l1166_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1167
fn l1167_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1168
fn l1168_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1169
fn l1169_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1170
fn l1170_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1171
fn l1171_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1172
fn l1172_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1173
fn l1173_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1174
fn l1174_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1175
fn l1175_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1176
fn l1176_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1177
fn l1177_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1178
fn l1178_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1179
fn l1179_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1180
fn l1180_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1181
fn l1181_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1182
fn l1182_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1183
fn l1183_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1184
fn l1184_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1185
fn l1185_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1186
fn l1186_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1187
fn l1187_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1188
fn l1188_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1189
fn l1189_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1190
fn l1190_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1191
fn l1191_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1192
fn l1192_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1193
fn l1193_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1194
fn l1194_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1195
fn l1195_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1196
fn l1196_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1197
fn l1197_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1198
fn l1198_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1199
fn l1199_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1200
fn l1200_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1201
fn l1201_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1202
fn l1202_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1203
fn l1203_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1204
fn l1204_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1205
fn l1205_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1206
fn l1206_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1207
fn l1207_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1208
fn l1208_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1209
fn l1209_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1210
fn l1210_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1211
fn l1211_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1212
fn l1212_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1213
fn l1213_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1214
fn l1214_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1215
fn l1215_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1216
fn l1216_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1217
fn l1217_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1218
fn l1218_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1219
fn l1219_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1220
fn l1220_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1221
fn l1221_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1222
fn l1222_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1223
fn l1223_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1224
fn l1224_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1225
fn l1225_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1226
fn l1226_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1227
fn l1227_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1228
fn l1228_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1229
fn l1229_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1230
fn l1230_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1231
fn l1231_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1232
fn l1232_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1233
fn l1233_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1234
fn l1234_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1235
fn l1235_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1236
fn l1236_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1237
fn l1237_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1238
fn l1238_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1239
fn l1239_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1240
fn l1240_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1241
fn l1241_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1242
fn l1242_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1243
fn l1243_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1244
fn l1244_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1245
fn l1245_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1246
fn l1246_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1247
fn l1247_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1248
fn l1248_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1249
fn l1249_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1250
fn l1250_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1251
fn l1251_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1252
fn l1252_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1253
fn l1253_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1254
fn l1254_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1255
fn l1255_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1256
fn l1256_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1257
fn l1257_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1258
fn l1258_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1259
fn l1259_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1260
fn l1260_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1261
fn l1261_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1262
fn l1262_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1263
fn l1263_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1264
fn l1264_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1265
fn l1265_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1266
fn l1266_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1267
fn l1267_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1268
fn l1268_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1269
fn l1269_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1270
fn l1270_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1271
fn l1271_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1272
fn l1272_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1273
fn l1273_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1274
fn l1274_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1275
fn l1275_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1276
fn l1276_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1277
fn l1277_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1278
fn l1278_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1279
fn l1279_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1280
fn l1280_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1281
fn l1281_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1282
fn l1282_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1283
fn l1283_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1284
fn l1284_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1285
fn l1285_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1286
fn l1286_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1287
fn l1287_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1288
fn l1288_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1289
fn l1289_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1290
fn l1290_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1291
fn l1291_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1292
fn l1292_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1293
fn l1293_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1294
fn l1294_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1295
fn l1295_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1296
fn l1296_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1297
fn l1297_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1298
fn l1298_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1299
fn l1299_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1300
fn l1300_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1301
fn l1301_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1302
fn l1302_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1303
fn l1303_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1304
fn l1304_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1305
fn l1305_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1306
fn l1306_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1307
fn l1307_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1308
fn l1308_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1309
fn l1309_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1310
fn l1310_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1311
fn l1311_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1312
fn l1312_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1313
fn l1313_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1314
fn l1314_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1315
fn l1315_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1316
fn l1316_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1317
fn l1317_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1318
fn l1318_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1319
fn l1319_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1320
fn l1320_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1321
fn l1321_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1322
fn l1322_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1323
fn l1323_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1324
fn l1324_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1325
fn l1325_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1326
fn l1326_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1327
fn l1327_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1328
fn l1328_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1329
fn l1329_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1330
fn l1330_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1331
fn l1331_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1332
fn l1332_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1333
fn l1333_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1334
fn l1334_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1335
fn l1335_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1336
fn l1336_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1337
fn l1337_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1338
fn l1338_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1339
fn l1339_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1340
fn l1340_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1341
fn l1341_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1342
fn l1342_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1343
fn l1343_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1344
fn l1344_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1345
fn l1345_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1346
fn l1346_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1347
fn l1347_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1348
fn l1348_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1349
fn l1349_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1350
fn l1350_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1351
fn l1351_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1352
fn l1352_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1353
fn l1353_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1354
fn l1354_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1355
fn l1355_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1356
fn l1356_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1357
fn l1357_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1358
fn l1358_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1359
fn l1359_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1360
fn l1360_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1361
fn l1361_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1362
fn l1362_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1363
fn l1363_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1364
fn l1364_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1365
fn l1365_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1366
fn l1366_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1367
fn l1367_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1368
fn l1368_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1369
fn l1369_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1370
fn l1370_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1371
fn l1371_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1372
fn l1372_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1373
fn l1373_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1374
fn l1374_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1375
fn l1375_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1376
fn l1376_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1377
fn l1377_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1378
fn l1378_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1379
fn l1379_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1380
fn l1380_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1381
fn l1381_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1382
fn l1382_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1383
fn l1383_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1384
fn l1384_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1385
fn l1385_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1386
fn l1386_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1387
fn l1387_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1388
fn l1388_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1389
fn l1389_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1390
fn l1390_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1391
fn l1391_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1392
fn l1392_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1393
fn l1393_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1394
fn l1394_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1395
fn l1395_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1396
fn l1396_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1397
fn l1397_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1398
fn l1398_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1399
fn l1399_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1400
fn l1400_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1401
fn l1401_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1402
fn l1402_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1403
fn l1403_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1404
fn l1404_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1405
fn l1405_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1406
fn l1406_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1407
fn l1407_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1408
fn l1408_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1409
fn l1409_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1410
fn l1410_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1411
fn l1411_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1412
fn l1412_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1413
fn l1413_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1414
fn l1414_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1415
fn l1415_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1416
fn l1416_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1417
fn l1417_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1418
fn l1418_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1419
fn l1419_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1420
fn l1420_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1421
fn l1421_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1422
fn l1422_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1423
fn l1423_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1424
fn l1424_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1425
fn l1425_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1426
fn l1426_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1427
fn l1427_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1428
fn l1428_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1429
fn l1429_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1430
fn l1430_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1431
fn l1431_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1432
fn l1432_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1433
fn l1433_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1434
fn l1434_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1435
fn l1435_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1436
fn l1436_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1437
fn l1437_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1438
fn l1438_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1439
fn l1439_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1440
fn l1440_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1441
fn l1441_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1442
fn l1442_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1443
fn l1443_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1444
fn l1444_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1445
fn l1445_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1446
fn l1446_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1447
fn l1447_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1448
fn l1448_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1449
fn l1449_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1450
fn l1450_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1451
fn l1451_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1452
fn l1452_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1453
fn l1453_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1454
fn l1454_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1455
fn l1455_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1456
fn l1456_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1457
fn l1457_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1458
fn l1458_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1459
fn l1459_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1460
fn l1460_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1461
fn l1461_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1462
fn l1462_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1463
fn l1463_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1464
fn l1464_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1465
fn l1465_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1466
fn l1466_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1467
fn l1467_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1468
fn l1468_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1469
fn l1469_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1470
fn l1470_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1471
fn l1471_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1472
fn l1472_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1473
fn l1473_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1474
fn l1474_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1475
fn l1475_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1476
fn l1476_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1477
fn l1477_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1478
fn l1478_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1479
fn l1479_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1480
fn l1480_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1481
fn l1481_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1482
fn l1482_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1483
fn l1483_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1484
fn l1484_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1485
fn l1485_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1486
fn l1486_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1487
fn l1487_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1488
fn l1488_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1489
fn l1489_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1490
fn l1490_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1491
fn l1491_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1492
fn l1492_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1493
fn l1493_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1494
fn l1494_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1495
fn l1495_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1496
fn l1496_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1497
fn l1497_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1498
fn l1498_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1499
fn l1499_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1500
fn l1500_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1501
fn l1501_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1502
fn l1502_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1503
fn l1503_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1504
fn l1504_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1505
fn l1505_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1506
fn l1506_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1507
fn l1507_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1508
fn l1508_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1509
fn l1509_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1510
fn l1510_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1511
fn l1511_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1512
fn l1512_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1513
fn l1513_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1514
fn l1514_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1515
fn l1515_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1516
fn l1516_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1517
fn l1517_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1518
fn l1518_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1519
fn l1519_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1520
fn l1520_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1521
fn l1521_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1522
fn l1522_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1523
fn l1523_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1524
fn l1524_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1525
fn l1525_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1526
fn l1526_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1527
fn l1527_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1528
fn l1528_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1529
fn l1529_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1530
fn l1530_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1531
fn l1531_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1532
fn l1532_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1533
fn l1533_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1534
fn l1534_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1535
fn l1535_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1536
fn l1536_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1537
fn l1537_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1538
fn l1538_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1539
fn l1539_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1540
fn l1540_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1541
fn l1541_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1542
fn l1542_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1543
fn l1543_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1544
fn l1544_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1545
fn l1545_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1546
fn l1546_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1547
fn l1547_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1548
fn l1548_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1549
fn l1549_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1550
fn l1550_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1551
fn l1551_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1552
fn l1552_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1553
fn l1553_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1554
fn l1554_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1555
fn l1555_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1556
fn l1556_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1557
fn l1557_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1558
fn l1558_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1559
fn l1559_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1560
fn l1560_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1561
fn l1561_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1562
fn l1562_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1563
fn l1563_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1564
fn l1564_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1565
fn l1565_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1566
fn l1566_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1567
fn l1567_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1568
fn l1568_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1569
fn l1569_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1570
fn l1570_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1571
fn l1571_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1572
fn l1572_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1573
fn l1573_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1574
fn l1574_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1575
fn l1575_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1576
fn l1576_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1577
fn l1577_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1578
fn l1578_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1579
fn l1579_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1580
fn l1580_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1581
fn l1581_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1582
fn l1582_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1583
fn l1583_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1584
fn l1584_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1585
fn l1585_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1586
fn l1586_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1587
fn l1587_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1588
fn l1588_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1589
fn l1589_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1590
fn l1590_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1591
fn l1591_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1592
fn l1592_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1593
fn l1593_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1594
fn l1594_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1595
fn l1595_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1596
fn l1596_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1597
fn l1597_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1598
fn l1598_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1599
fn l1599_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1600
fn l1600_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1601
fn l1601_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1602
fn l1602_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1603
fn l1603_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1604
fn l1604_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1605
fn l1605_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1606
fn l1606_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1607
fn l1607_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1608
fn l1608_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1609
fn l1609_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1610
fn l1610_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1611
fn l1611_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1612
fn l1612_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1613
fn l1613_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1614
fn l1614_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1615
fn l1615_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1616
fn l1616_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1617
fn l1617_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1618
fn l1618_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1619
fn l1619_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1620
fn l1620_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1621
fn l1621_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1622
fn l1622_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1623
fn l1623_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1624
fn l1624_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1625
fn l1625_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1626
fn l1626_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1627
fn l1627_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1628
fn l1628_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1629
fn l1629_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1630
fn l1630_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1631
fn l1631_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1632
fn l1632_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1633
fn l1633_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1634
fn l1634_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1635
fn l1635_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1636
fn l1636_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1637
fn l1637_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1638
fn l1638_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1639
fn l1639_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1640
fn l1640_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1641
fn l1641_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1642
fn l1642_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1643
fn l1643_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1644
fn l1644_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1645
fn l1645_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1646
fn l1646_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1647
fn l1647_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1648
fn l1648_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1649
fn l1649_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1650
fn l1650_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1651
fn l1651_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1652
fn l1652_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1653
fn l1653_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1654
fn l1654_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1655
fn l1655_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1656
fn l1656_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1657
fn l1657_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1658
fn l1658_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1659
fn l1659_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1660
fn l1660_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1661
fn l1661_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1662
fn l1662_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1663
fn l1663_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1664
fn l1664_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1665
fn l1665_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1666
fn l1666_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1667
fn l1667_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1668
fn l1668_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1669
fn l1669_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1670
fn l1670_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1671
fn l1671_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1672
fn l1672_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1673
fn l1673_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1674
fn l1674_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1675
fn l1675_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1676
fn l1676_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1677
fn l1677_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1678
fn l1678_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1679
fn l1679_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1680
fn l1680_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1681
fn l1681_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1682
fn l1682_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1683
fn l1683_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1684
fn l1684_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1685
fn l1685_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1686
fn l1686_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1687
fn l1687_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1688
fn l1688_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1689
fn l1689_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1690
fn l1690_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1691
fn l1691_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1692
fn l1692_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1693
fn l1693_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1694
fn l1694_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1695
fn l1695_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1696
fn l1696_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1697
fn l1697_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1698
fn l1698_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1699
fn l1699_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1700
fn l1700_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1701
fn l1701_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1702
fn l1702_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1703
fn l1703_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1704
fn l1704_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1705
fn l1705_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1706
fn l1706_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1707
fn l1707_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1708
fn l1708_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1709
fn l1709_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1710
fn l1710_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1711
fn l1711_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1712
fn l1712_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1713
fn l1713_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1714
fn l1714_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1715
fn l1715_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1716
fn l1716_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1717
fn l1717_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1718
fn l1718_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1719
fn l1719_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1720
fn l1720_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1721
fn l1721_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1722
fn l1722_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1723
fn l1723_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1724
fn l1724_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1725
fn l1725_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1726
fn l1726_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1727
fn l1727_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1728
fn l1728_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1729
fn l1729_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1730
fn l1730_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1731
fn l1731_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1732
fn l1732_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1733
fn l1733_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1734
fn l1734_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1735
fn l1735_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1736
fn l1736_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1737
fn l1737_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1738
fn l1738_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1739
fn l1739_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1740
fn l1740_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1741
fn l1741_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1742
fn l1742_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1743
fn l1743_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1744
fn l1744_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1745
fn l1745_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1746
fn l1746_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1747
fn l1747_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1748
fn l1748_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1749
fn l1749_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1750
fn l1750_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1751
fn l1751_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1752
fn l1752_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1753
fn l1753_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1754
fn l1754_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1755
fn l1755_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1756
fn l1756_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1757
fn l1757_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1758
fn l1758_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1759
fn l1759_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1760
fn l1760_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1761
fn l1761_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1762
fn l1762_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1763
fn l1763_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1764
fn l1764_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1765
fn l1765_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1766
fn l1766_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1767
fn l1767_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1768
fn l1768_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1769
fn l1769_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1770
fn l1770_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1771
fn l1771_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1772
fn l1772_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1773
fn l1773_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1774
fn l1774_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1775
fn l1775_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1776
fn l1776_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1777
fn l1777_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1778
fn l1778_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1779
fn l1779_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1780
fn l1780_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1781
fn l1781_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1782
fn l1782_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1783
fn l1783_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1784
fn l1784_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1785
fn l1785_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1786
fn l1786_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1787
fn l1787_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1788
fn l1788_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1789
fn l1789_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1790
fn l1790_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1791
fn l1791_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1792
fn l1792_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1793
fn l1793_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1794
fn l1794_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1795
fn l1795_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1796
fn l1796_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1797
fn l1797_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1798
fn l1798_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1799
fn l1799_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1800
fn l1800_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1801
fn l1801_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1802
fn l1802_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1803
fn l1803_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1804
fn l1804_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1805
fn l1805_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1806
fn l1806_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1807
fn l1807_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1808
fn l1808_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1809
fn l1809_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1810
fn l1810_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1811
fn l1811_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1812
fn l1812_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1813
fn l1813_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1814
fn l1814_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1815
fn l1815_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1816
fn l1816_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1817
fn l1817_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1818
fn l1818_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1819
fn l1819_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1820
fn l1820_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1821
fn l1821_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1822
fn l1822_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1823
fn l1823_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1824
fn l1824_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1825
fn l1825_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1826
fn l1826_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1827
fn l1827_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1828
fn l1828_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1829
fn l1829_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1830
fn l1830_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1831
fn l1831_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1832
fn l1832_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1833
fn l1833_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1834
fn l1834_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1835
fn l1835_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1836
fn l1836_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1837
fn l1837_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1838
fn l1838_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1839
fn l1839_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1840
fn l1840_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1841
fn l1841_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1842
fn l1842_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1843
fn l1843_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1844
fn l1844_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1845
fn l1845_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1846
fn l1846_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1847
fn l1847_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1848
fn l1848_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1849
fn l1849_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1850
fn l1850_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1851
fn l1851_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1852
fn l1852_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1853
fn l1853_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1854
fn l1854_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1855
fn l1855_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1856
fn l1856_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1857
fn l1857_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1858
fn l1858_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1859
fn l1859_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1860
fn l1860_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1861
fn l1861_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1862
fn l1862_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1863
fn l1863_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1864
fn l1864_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1865
fn l1865_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1866
fn l1866_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1867
fn l1867_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1868
fn l1868_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1869
fn l1869_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1870
fn l1870_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1871
fn l1871_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1872
fn l1872_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1873
fn l1873_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1874
fn l1874_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1875
fn l1875_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1876
fn l1876_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1877
fn l1877_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1878
fn l1878_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1879
fn l1879_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1880
fn l1880_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1881
fn l1881_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1882
fn l1882_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1883
fn l1883_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1884
fn l1884_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1885
fn l1885_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1886
fn l1886_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1887
fn l1887_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1888
fn l1888_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1889
fn l1889_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1890
fn l1890_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1891
fn l1891_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1892
fn l1892_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1893
fn l1893_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1894
fn l1894_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1895
fn l1895_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1896
fn l1896_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1897
fn l1897_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1898
fn l1898_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1899
fn l1899_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1900
fn l1900_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1901
fn l1901_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1902
fn l1902_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1903
fn l1903_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1904
fn l1904_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1905
fn l1905_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1906
fn l1906_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1907
fn l1907_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1908
fn l1908_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1909
fn l1909_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1910
fn l1910_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1911
fn l1911_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1912
fn l1912_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1913
fn l1913_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1914
fn l1914_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1915
fn l1915_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1916
fn l1916_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1917
fn l1917_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1918
fn l1918_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1919
fn l1919_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1920
fn l1920_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1921
fn l1921_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1922
fn l1922_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1923
fn l1923_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 1924
fn l1924_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1925
fn l1925_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1926
fn l1926_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1927
fn l1927_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1928
fn l1928_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1929
fn l1929_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1930
fn l1930_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1931
fn l1931_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1932
fn l1932_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1933
fn l1933_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1934
fn l1934_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1935
fn l1935_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1936
fn l1936_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1937
fn l1937_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1938
fn l1938_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1939
fn l1939_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1940
fn l1940_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1941
fn l1941_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1942
fn l1942_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1943
fn l1943_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1944
fn l1944_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1945
fn l1945_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1946
fn l1946_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1947
fn l1947_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1948
fn l1948_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1949
fn l1949_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1950
fn l1950_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1951
fn l1951_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1952
fn l1952_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1953
fn l1953_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1954
fn l1954_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1955
fn l1955_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1956
fn l1956_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1957
fn l1957_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1958
fn l1958_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1959
fn l1959_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1960
fn l1960_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1961
fn l1961_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1962
fn l1962_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1963
fn l1963_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1964
fn l1964_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1965
fn l1965_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1966
fn l1966_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1967
fn l1967_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1968
fn l1968_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1969
fn l1969_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1970
fn l1970_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1971
fn l1971_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1972
fn l1972_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1973
fn l1973_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1974
fn l1974_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1975
fn l1975_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1976
fn l1976_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1977
fn l1977_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1978
fn l1978_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1979
fn l1979_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1980
fn l1980_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1981
fn l1981_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1982
fn l1982_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1983
fn l1983_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1984
fn l1984_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1985
fn l1985_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1986
fn l1986_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1987
fn l1987_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1988
fn l1988_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1989
fn l1989_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1990
fn l1990_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1991
fn l1991_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1992
fn l1992_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1993
fn l1993_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1994
fn l1994_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1995
fn l1995_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1996
fn l1996_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1997
fn l1997_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1998
fn l1998_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 1999
fn l1999_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2000
fn l2000_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2001
fn l2001_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2002
fn l2002_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2003
fn l2003_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2004
fn l2004_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2005
fn l2005_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2006
fn l2006_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2007
fn l2007_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2008
fn l2008_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2009
fn l2009_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2010
fn l2010_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2011
fn l2011_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2012
fn l2012_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2013
fn l2013_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2014
fn l2014_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2015
fn l2015_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2016
fn l2016_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2017
fn l2017_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2018
fn l2018_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2019
fn l2019_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2020
fn l2020_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2021
fn l2021_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2022
fn l2022_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2023
fn l2023_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2024
fn l2024_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2025
fn l2025_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2026
fn l2026_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2027
fn l2027_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2028
fn l2028_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2029
fn l2029_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2030
fn l2030_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2031
fn l2031_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2032
fn l2032_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2033
fn l2033_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2034
fn l2034_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2035
fn l2035_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2036
fn l2036_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2037
fn l2037_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2038
fn l2038_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2039
fn l2039_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2040
fn l2040_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2041
fn l2041_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2042
fn l2042_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2043
fn l2043_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2044
fn l2044_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2045
fn l2045_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2046
fn l2046_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2047
fn l2047_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2048
fn l2048_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2049
fn l2049_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2050
fn l2050_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2051
fn l2051_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2052
fn l2052_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2053
fn l2053_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2054
fn l2054_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2055
fn l2055_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2056
fn l2056_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2057
fn l2057_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2058
fn l2058_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2059
fn l2059_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2060
fn l2060_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2061
fn l2061_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2062
fn l2062_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2063
fn l2063_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2064
fn l2064_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2065
fn l2065_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2066
fn l2066_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2067
fn l2067_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2068
fn l2068_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2069
fn l2069_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2070
fn l2070_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2071
fn l2071_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2072
fn l2072_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2073
fn l2073_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2074
fn l2074_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2075
fn l2075_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2076
fn l2076_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2077
fn l2077_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2078
fn l2078_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2079
fn l2079_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2080
fn l2080_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2081
fn l2081_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2082
fn l2082_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2083
fn l2083_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2084
fn l2084_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2085
fn l2085_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2086
fn l2086_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2087
fn l2087_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2088
fn l2088_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2089
fn l2089_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2090
fn l2090_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2091
fn l2091_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2092
fn l2092_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2093
fn l2093_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2094
fn l2094_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2095
fn l2095_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2096
fn l2096_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2097
fn l2097_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2098
fn l2098_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2099
fn l2099_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2100
fn l2100_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2101
fn l2101_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2102
fn l2102_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2103
fn l2103_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2104
fn l2104_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2105
fn l2105_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2106
fn l2106_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2107
fn l2107_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2108
fn l2108_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2109
fn l2109_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2110
fn l2110_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2111
fn l2111_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2112
fn l2112_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2113
fn l2113_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2114
fn l2114_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2115
fn l2115_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2116
fn l2116_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2117
fn l2117_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2118
fn l2118_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2119
fn l2119_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2120
fn l2120_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2121
fn l2121_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2122
fn l2122_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2123
fn l2123_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2124
fn l2124_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2125
fn l2125_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2126
fn l2126_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2127
fn l2127_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2128
fn l2128_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2129
fn l2129_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2130
fn l2130_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2131
fn l2131_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2132
fn l2132_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2133
fn l2133_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2134
fn l2134_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2135
fn l2135_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2136
fn l2136_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2137
fn l2137_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2138
fn l2138_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2139
fn l2139_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2140
fn l2140_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2141
fn l2141_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2142
fn l2142_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2143
fn l2143_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2144
fn l2144_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2145
fn l2145_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2146
fn l2146_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2147
fn l2147_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2148
fn l2148_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2149
fn l2149_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2150
fn l2150_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2151
fn l2151_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2152
fn l2152_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2153
fn l2153_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2154
fn l2154_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2155
fn l2155_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2156
fn l2156_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2157
fn l2157_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2158
fn l2158_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2159
fn l2159_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2160
fn l2160_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2161
fn l2161_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2162
fn l2162_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2163
fn l2163_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2164
fn l2164_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2165
fn l2165_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2166
fn l2166_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2167
fn l2167_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2168
fn l2168_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2169
fn l2169_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2170
fn l2170_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2171
fn l2171_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2172
fn l2172_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(0.5 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2173
fn l2173_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2174
fn l2174_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2175
fn l2175_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2176
fn l2176_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2177
fn l2177_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2178
fn l2178_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2179
fn l2179_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2180
fn l2180_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2181
fn l2181_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2182
fn l2182_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2183
fn l2183_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2184
fn l2184_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2185
fn l2185_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2186
fn l2186_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2187
fn l2187_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2188
fn l2188_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2189
fn l2189_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2190
fn l2190_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2191
fn l2191_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2192
fn l2192_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2193
fn l2193_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2194
fn l2194_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2195
fn l2195_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2196
fn l2196_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2197
fn l2197_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2198
fn l2198_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2199
fn l2199_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2200
fn l2200_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2201
fn l2201_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2202
fn l2202_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2203
fn l2203_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2204
fn l2204_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2205
fn l2205_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2206
fn l2206_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2207
fn l2207_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2208
fn l2208_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2209
fn l2209_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2210
fn l2210_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2211
fn l2211_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2212
fn l2212_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(1.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2213
fn l2213_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2214
fn l2214_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2215
fn l2215_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2216
fn l2216_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2217
fn l2217_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2218
fn l2218_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2219
fn l2219_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2220
fn l2220_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2221
fn l2221_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2222
fn l2222_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2223
fn l2223_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2224
fn l2224_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2225
fn l2225_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2226
fn l2226_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2227
fn l2227_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2228
fn l2228_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2229
fn l2229_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2230
fn l2230_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2231
fn l2231_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2232
fn l2232_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2233
fn l2233_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2234
fn l2234_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2235
fn l2235_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2236
fn l2236_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2237
fn l2237_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2238
fn l2238_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2239
fn l2239_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2240
fn l2240_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2241
fn l2241_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2242
fn l2242_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2243
fn l2243_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2244
fn l2244_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2245
fn l2245_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2246
fn l2246_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2247
fn l2247_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2248
fn l2248_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2249
fn l2249_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2250
fn l2250_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2251
fn l2251_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2252
fn l2252_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(6.283185307179586 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2253
fn l2253_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2254
fn l2254_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2255
fn l2255_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2256
fn l2256_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2257
fn l2257_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2258
fn l2258_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2259
fn l2259_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2260
fn l2260_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2261
fn l2261_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2262
fn l2262_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2263
fn l2263_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2264
fn l2264_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2265
fn l2265_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2266
fn l2266_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2267
fn l2267_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2268
fn l2268_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2269
fn l2269_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2270
fn l2270_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2271
fn l2271_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2272
fn l2272_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2273
fn l2273_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2274
fn l2274_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2275
fn l2275_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2276
fn l2276_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2277
fn l2277_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2278
fn l2278_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2279
fn l2279_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2280
fn l2280_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2281
fn l2281_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2282
fn l2282_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2283
fn l2283_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2284
fn l2284_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2285
fn l2285_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2286
fn l2286_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2287
fn l2287_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2288
fn l2288_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2289
fn l2289_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2290
fn l2290_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2291
fn l2291_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2292
fn l2292_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2293
fn l2293_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2294
fn l2294_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2295
fn l2295_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2296
fn l2296_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2297
fn l2297_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2298
fn l2298_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2299
fn l2299_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2300
fn l2300_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2301
fn l2301_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2302
fn l2302_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2303
fn l2303_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2304
fn l2304_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2305
fn l2305_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2306
fn l2306_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2307
fn l2307_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2308
fn l2308_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 0.5 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2309
fn l2309_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2310
fn l2310_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2311
fn l2311_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2312
fn l2312_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 1.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2313
fn l2313_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2314
fn l2314_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2315
fn l2315_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2316
fn l2316_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2317
fn l2317_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2318
fn l2318_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2319
fn l2319_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2320
fn l2320_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2321
fn l2321_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2322
fn l2322_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2323
fn l2323_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2324
fn l2324_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 2325
fn l2325_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2326
fn l2326_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2327
fn l2327_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2328
fn l2328_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NEG_INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2329
fn l2329_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2330
fn l2330_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2331
fn l2331_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2332
fn l2332_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::INFINITY, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2333
fn l2333_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2334
fn l2334_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2335
fn l2335_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2336
fn l2336_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2337
fn l2337_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2338
fn l2338_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2339
fn l2339_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2340
fn l2340_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2341
fn l2341_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2342
fn l2342_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2343
fn l2343_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2344
fn l2344_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2345
fn l2345_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2346
fn l2346_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2347
fn l2347_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2348
fn l2348_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2349
fn l2349_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2350
fn l2350_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2351
fn l2351_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2352
fn l2352_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2353
fn l2353_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2354
fn l2354_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2355
fn l2355_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2356
fn l2356_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2357
fn l2357_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2358
fn l2358_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2359
fn l2359_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2360
fn l2360_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2361
fn l2361_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2362
fn l2362_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2363
fn l2363_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2364
fn l2364_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 0.5 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2365
fn l2365_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2366
fn l2366_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2367
fn l2367_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2368
fn l2368_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2369
fn l2369_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2370
fn l2370_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2371
fn l2371_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2372
fn l2372_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 1.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2373
fn l2373_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2374
fn l2374_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2375
fn l2375_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2376
fn l2376_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2377
fn l2377_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2378
fn l2378_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2379
fn l2379_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2380
fn l2380_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 6.283185307179586 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2381
fn l2381_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2382
fn l2382_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2383
fn l2383_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2384
fn l2384_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2385
fn l2385_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2386
fn l2386_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2387
fn l2387_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2388
fn l2388_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 as f64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2389
fn l2389_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2390
fn l2390_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2391
fn l2391_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2392
fn l2392_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2393
fn l2393_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2394
fn l2394_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NEG_INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2395
fn l2395_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2396
fn l2396_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::INFINITY, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2397
fn l2397_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2398
fn l2398_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2399
fn l2399_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2400
fn l2400_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2401
fn l2401_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2402
fn l2402_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2403
fn l2403_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2404
fn l2404_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(-std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2405
fn l2405_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2406
fn l2406_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2407
fn l2407_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2408
fn l2408_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, -std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2409
fn l2409_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2410
fn l2410_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2411
fn l2411_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 2412
fn l2412_assert_return_invoke(result_object: &ResultObject) {
    let func_index = match result_object.module.info.exports.get("ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, f64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let vm_context = result_object.instance.generate_context();
    let result = invoke_fn(std::f64::NAN, std::f64::NAN, &vm_context);
    assert_eq!(result, 0 as i32);
}

#[test]
fn test_module_1() {
    let result_object = create_module_1();
    // We group the calls together
    l13_assert_return_invoke(&result_object);
    l14_assert_return_invoke(&result_object);
    l15_assert_return_invoke(&result_object);
    l16_assert_return_invoke(&result_object);
    l17_assert_return_invoke(&result_object);
    l18_assert_return_invoke(&result_object);
    l19_assert_return_invoke(&result_object);
    l20_assert_return_invoke(&result_object);
    l21_assert_return_invoke(&result_object);
    l22_assert_return_invoke(&result_object);
    l23_assert_return_invoke(&result_object);
    l24_assert_return_invoke(&result_object);
    l25_assert_return_invoke(&result_object);
    l26_assert_return_invoke(&result_object);
    l27_assert_return_invoke(&result_object);
    l28_assert_return_invoke(&result_object);
    l29_assert_return_invoke(&result_object);
    l30_assert_return_invoke(&result_object);
    l31_assert_return_invoke(&result_object);
    l32_assert_return_invoke(&result_object);
    l33_assert_return_invoke(&result_object);
    l34_assert_return_invoke(&result_object);
    l35_assert_return_invoke(&result_object);
    l36_assert_return_invoke(&result_object);
    l37_assert_return_invoke(&result_object);
    l38_assert_return_invoke(&result_object);
    l39_assert_return_invoke(&result_object);
    l40_assert_return_invoke(&result_object);
    l41_assert_return_invoke(&result_object);
    l42_assert_return_invoke(&result_object);
    l43_assert_return_invoke(&result_object);
    l44_assert_return_invoke(&result_object);
    l45_assert_return_invoke(&result_object);
    l46_assert_return_invoke(&result_object);
    l47_assert_return_invoke(&result_object);
    l48_assert_return_invoke(&result_object);
    l49_assert_return_invoke(&result_object);
    l50_assert_return_invoke(&result_object);
    l51_assert_return_invoke(&result_object);
    l52_assert_return_invoke(&result_object);
    l53_assert_return_invoke(&result_object);
    l54_assert_return_invoke(&result_object);
    l55_assert_return_invoke(&result_object);
    l56_assert_return_invoke(&result_object);
    l57_assert_return_invoke(&result_object);
    l58_assert_return_invoke(&result_object);
    l59_assert_return_invoke(&result_object);
    l60_assert_return_invoke(&result_object);
    l61_assert_return_invoke(&result_object);
    l62_assert_return_invoke(&result_object);
    l63_assert_return_invoke(&result_object);
    l64_assert_return_invoke(&result_object);
    l65_assert_return_invoke(&result_object);
    l66_assert_return_invoke(&result_object);
    l67_assert_return_invoke(&result_object);
    l68_assert_return_invoke(&result_object);
    l69_assert_return_invoke(&result_object);
    l70_assert_return_invoke(&result_object);
    l71_assert_return_invoke(&result_object);
    l72_assert_return_invoke(&result_object);
    l73_assert_return_invoke(&result_object);
    l74_assert_return_invoke(&result_object);
    l75_assert_return_invoke(&result_object);
    l76_assert_return_invoke(&result_object);
    l77_assert_return_invoke(&result_object);
    l78_assert_return_invoke(&result_object);
    l79_assert_return_invoke(&result_object);
    l80_assert_return_invoke(&result_object);
    l81_assert_return_invoke(&result_object);
    l82_assert_return_invoke(&result_object);
    l83_assert_return_invoke(&result_object);
    l84_assert_return_invoke(&result_object);
    l85_assert_return_invoke(&result_object);
    l86_assert_return_invoke(&result_object);
    l87_assert_return_invoke(&result_object);
    l88_assert_return_invoke(&result_object);
    l89_assert_return_invoke(&result_object);
    l90_assert_return_invoke(&result_object);
    l91_assert_return_invoke(&result_object);
    l92_assert_return_invoke(&result_object);
    l93_assert_return_invoke(&result_object);
    l94_assert_return_invoke(&result_object);
    l95_assert_return_invoke(&result_object);
    l96_assert_return_invoke(&result_object);
    l97_assert_return_invoke(&result_object);
    l98_assert_return_invoke(&result_object);
    l99_assert_return_invoke(&result_object);
    l100_assert_return_invoke(&result_object);
    l101_assert_return_invoke(&result_object);
    l102_assert_return_invoke(&result_object);
    l103_assert_return_invoke(&result_object);
    l104_assert_return_invoke(&result_object);
    l105_assert_return_invoke(&result_object);
    l106_assert_return_invoke(&result_object);
    l107_assert_return_invoke(&result_object);
    l108_assert_return_invoke(&result_object);
    l109_assert_return_invoke(&result_object);
    l110_assert_return_invoke(&result_object);
    l111_assert_return_invoke(&result_object);
    l112_assert_return_invoke(&result_object);
    l113_assert_return_invoke(&result_object);
    l114_assert_return_invoke(&result_object);
    l115_assert_return_invoke(&result_object);
    l116_assert_return_invoke(&result_object);
    l117_assert_return_invoke(&result_object);
    l118_assert_return_invoke(&result_object);
    l119_assert_return_invoke(&result_object);
    l120_assert_return_invoke(&result_object);
    l121_assert_return_invoke(&result_object);
    l122_assert_return_invoke(&result_object);
    l123_assert_return_invoke(&result_object);
    l124_assert_return_invoke(&result_object);
    l125_assert_return_invoke(&result_object);
    l126_assert_return_invoke(&result_object);
    l127_assert_return_invoke(&result_object);
    l128_assert_return_invoke(&result_object);
    l129_assert_return_invoke(&result_object);
    l130_assert_return_invoke(&result_object);
    l131_assert_return_invoke(&result_object);
    l132_assert_return_invoke(&result_object);
    l133_assert_return_invoke(&result_object);
    l134_assert_return_invoke(&result_object);
    l135_assert_return_invoke(&result_object);
    l136_assert_return_invoke(&result_object);
    l137_assert_return_invoke(&result_object);
    l138_assert_return_invoke(&result_object);
    l139_assert_return_invoke(&result_object);
    l140_assert_return_invoke(&result_object);
    l141_assert_return_invoke(&result_object);
    l142_assert_return_invoke(&result_object);
    l143_assert_return_invoke(&result_object);
    l144_assert_return_invoke(&result_object);
    l145_assert_return_invoke(&result_object);
    l146_assert_return_invoke(&result_object);
    l147_assert_return_invoke(&result_object);
    l148_assert_return_invoke(&result_object);
    l149_assert_return_invoke(&result_object);
    l150_assert_return_invoke(&result_object);
    l151_assert_return_invoke(&result_object);
    l152_assert_return_invoke(&result_object);
    l153_assert_return_invoke(&result_object);
    l154_assert_return_invoke(&result_object);
    l155_assert_return_invoke(&result_object);
    l156_assert_return_invoke(&result_object);
    l157_assert_return_invoke(&result_object);
    l158_assert_return_invoke(&result_object);
    l159_assert_return_invoke(&result_object);
    l160_assert_return_invoke(&result_object);
    l161_assert_return_invoke(&result_object);
    l162_assert_return_invoke(&result_object);
    l163_assert_return_invoke(&result_object);
    l164_assert_return_invoke(&result_object);
    l165_assert_return_invoke(&result_object);
    l166_assert_return_invoke(&result_object);
    l167_assert_return_invoke(&result_object);
    l168_assert_return_invoke(&result_object);
    l169_assert_return_invoke(&result_object);
    l170_assert_return_invoke(&result_object);
    l171_assert_return_invoke(&result_object);
    l172_assert_return_invoke(&result_object);
    l173_assert_return_invoke(&result_object);
    l174_assert_return_invoke(&result_object);
    l175_assert_return_invoke(&result_object);
    l176_assert_return_invoke(&result_object);
    l177_assert_return_invoke(&result_object);
    l178_assert_return_invoke(&result_object);
    l179_assert_return_invoke(&result_object);
    l180_assert_return_invoke(&result_object);
    l181_assert_return_invoke(&result_object);
    l182_assert_return_invoke(&result_object);
    l183_assert_return_invoke(&result_object);
    l184_assert_return_invoke(&result_object);
    l185_assert_return_invoke(&result_object);
    l186_assert_return_invoke(&result_object);
    l187_assert_return_invoke(&result_object);
    l188_assert_return_invoke(&result_object);
    l189_assert_return_invoke(&result_object);
    l190_assert_return_invoke(&result_object);
    l191_assert_return_invoke(&result_object);
    l192_assert_return_invoke(&result_object);
    l193_assert_return_invoke(&result_object);
    l194_assert_return_invoke(&result_object);
    l195_assert_return_invoke(&result_object);
    l196_assert_return_invoke(&result_object);
    l197_assert_return_invoke(&result_object);
    l198_assert_return_invoke(&result_object);
    l199_assert_return_invoke(&result_object);
    l200_assert_return_invoke(&result_object);
    l201_assert_return_invoke(&result_object);
    l202_assert_return_invoke(&result_object);
    l203_assert_return_invoke(&result_object);
    l204_assert_return_invoke(&result_object);
    l205_assert_return_invoke(&result_object);
    l206_assert_return_invoke(&result_object);
    l207_assert_return_invoke(&result_object);
    l208_assert_return_invoke(&result_object);
    l209_assert_return_invoke(&result_object);
    l210_assert_return_invoke(&result_object);
    l211_assert_return_invoke(&result_object);
    l212_assert_return_invoke(&result_object);
    l213_assert_return_invoke(&result_object);
    l214_assert_return_invoke(&result_object);
    l215_assert_return_invoke(&result_object);
    l216_assert_return_invoke(&result_object);
    l217_assert_return_invoke(&result_object);
    l218_assert_return_invoke(&result_object);
    l219_assert_return_invoke(&result_object);
    l220_assert_return_invoke(&result_object);
    l221_assert_return_invoke(&result_object);
    l222_assert_return_invoke(&result_object);
    l223_assert_return_invoke(&result_object);
    l224_assert_return_invoke(&result_object);
    l225_assert_return_invoke(&result_object);
    l226_assert_return_invoke(&result_object);
    l227_assert_return_invoke(&result_object);
    l228_assert_return_invoke(&result_object);
    l229_assert_return_invoke(&result_object);
    l230_assert_return_invoke(&result_object);
    l231_assert_return_invoke(&result_object);
    l232_assert_return_invoke(&result_object);
    l233_assert_return_invoke(&result_object);
    l234_assert_return_invoke(&result_object);
    l235_assert_return_invoke(&result_object);
    l236_assert_return_invoke(&result_object);
    l237_assert_return_invoke(&result_object);
    l238_assert_return_invoke(&result_object);
    l239_assert_return_invoke(&result_object);
    l240_assert_return_invoke(&result_object);
    l241_assert_return_invoke(&result_object);
    l242_assert_return_invoke(&result_object);
    l243_assert_return_invoke(&result_object);
    l244_assert_return_invoke(&result_object);
    l245_assert_return_invoke(&result_object);
    l246_assert_return_invoke(&result_object);
    l247_assert_return_invoke(&result_object);
    l248_assert_return_invoke(&result_object);
    l249_assert_return_invoke(&result_object);
    l250_assert_return_invoke(&result_object);
    l251_assert_return_invoke(&result_object);
    l252_assert_return_invoke(&result_object);
    l253_assert_return_invoke(&result_object);
    l254_assert_return_invoke(&result_object);
    l255_assert_return_invoke(&result_object);
    l256_assert_return_invoke(&result_object);
    l257_assert_return_invoke(&result_object);
    l258_assert_return_invoke(&result_object);
    l259_assert_return_invoke(&result_object);
    l260_assert_return_invoke(&result_object);
    l261_assert_return_invoke(&result_object);
    l262_assert_return_invoke(&result_object);
    l263_assert_return_invoke(&result_object);
    l264_assert_return_invoke(&result_object);
    l265_assert_return_invoke(&result_object);
    l266_assert_return_invoke(&result_object);
    l267_assert_return_invoke(&result_object);
    l268_assert_return_invoke(&result_object);
    l269_assert_return_invoke(&result_object);
    l270_assert_return_invoke(&result_object);
    l271_assert_return_invoke(&result_object);
    l272_assert_return_invoke(&result_object);
    l273_assert_return_invoke(&result_object);
    l274_assert_return_invoke(&result_object);
    l275_assert_return_invoke(&result_object);
    l276_assert_return_invoke(&result_object);
    l277_assert_return_invoke(&result_object);
    l278_assert_return_invoke(&result_object);
    l279_assert_return_invoke(&result_object);
    l280_assert_return_invoke(&result_object);
    l281_assert_return_invoke(&result_object);
    l282_assert_return_invoke(&result_object);
    l283_assert_return_invoke(&result_object);
    l284_assert_return_invoke(&result_object);
    l285_assert_return_invoke(&result_object);
    l286_assert_return_invoke(&result_object);
    l287_assert_return_invoke(&result_object);
    l288_assert_return_invoke(&result_object);
    l289_assert_return_invoke(&result_object);
    l290_assert_return_invoke(&result_object);
    l291_assert_return_invoke(&result_object);
    l292_assert_return_invoke(&result_object);
    l293_assert_return_invoke(&result_object);
    l294_assert_return_invoke(&result_object);
    l295_assert_return_invoke(&result_object);
    l296_assert_return_invoke(&result_object);
    l297_assert_return_invoke(&result_object);
    l298_assert_return_invoke(&result_object);
    l299_assert_return_invoke(&result_object);
    l300_assert_return_invoke(&result_object);
    l301_assert_return_invoke(&result_object);
    l302_assert_return_invoke(&result_object);
    l303_assert_return_invoke(&result_object);
    l304_assert_return_invoke(&result_object);
    l305_assert_return_invoke(&result_object);
    l306_assert_return_invoke(&result_object);
    l307_assert_return_invoke(&result_object);
    l308_assert_return_invoke(&result_object);
    l309_assert_return_invoke(&result_object);
    l310_assert_return_invoke(&result_object);
    l311_assert_return_invoke(&result_object);
    l312_assert_return_invoke(&result_object);
    l313_assert_return_invoke(&result_object);
    l314_assert_return_invoke(&result_object);
    l315_assert_return_invoke(&result_object);
    l316_assert_return_invoke(&result_object);
    l317_assert_return_invoke(&result_object);
    l318_assert_return_invoke(&result_object);
    l319_assert_return_invoke(&result_object);
    l320_assert_return_invoke(&result_object);
    l321_assert_return_invoke(&result_object);
    l322_assert_return_invoke(&result_object);
    l323_assert_return_invoke(&result_object);
    l324_assert_return_invoke(&result_object);
    l325_assert_return_invoke(&result_object);
    l326_assert_return_invoke(&result_object);
    l327_assert_return_invoke(&result_object);
    l328_assert_return_invoke(&result_object);
    l329_assert_return_invoke(&result_object);
    l330_assert_return_invoke(&result_object);
    l331_assert_return_invoke(&result_object);
    l332_assert_return_invoke(&result_object);
    l333_assert_return_invoke(&result_object);
    l334_assert_return_invoke(&result_object);
    l335_assert_return_invoke(&result_object);
    l336_assert_return_invoke(&result_object);
    l337_assert_return_invoke(&result_object);
    l338_assert_return_invoke(&result_object);
    l339_assert_return_invoke(&result_object);
    l340_assert_return_invoke(&result_object);
    l341_assert_return_invoke(&result_object);
    l342_assert_return_invoke(&result_object);
    l343_assert_return_invoke(&result_object);
    l344_assert_return_invoke(&result_object);
    l345_assert_return_invoke(&result_object);
    l346_assert_return_invoke(&result_object);
    l347_assert_return_invoke(&result_object);
    l348_assert_return_invoke(&result_object);
    l349_assert_return_invoke(&result_object);
    l350_assert_return_invoke(&result_object);
    l351_assert_return_invoke(&result_object);
    l352_assert_return_invoke(&result_object);
    l353_assert_return_invoke(&result_object);
    l354_assert_return_invoke(&result_object);
    l355_assert_return_invoke(&result_object);
    l356_assert_return_invoke(&result_object);
    l357_assert_return_invoke(&result_object);
    l358_assert_return_invoke(&result_object);
    l359_assert_return_invoke(&result_object);
    l360_assert_return_invoke(&result_object);
    l361_assert_return_invoke(&result_object);
    l362_assert_return_invoke(&result_object);
    l363_assert_return_invoke(&result_object);
    l364_assert_return_invoke(&result_object);
    l365_assert_return_invoke(&result_object);
    l366_assert_return_invoke(&result_object);
    l367_assert_return_invoke(&result_object);
    l368_assert_return_invoke(&result_object);
    l369_assert_return_invoke(&result_object);
    l370_assert_return_invoke(&result_object);
    l371_assert_return_invoke(&result_object);
    l372_assert_return_invoke(&result_object);
    l373_assert_return_invoke(&result_object);
    l374_assert_return_invoke(&result_object);
    l375_assert_return_invoke(&result_object);
    l376_assert_return_invoke(&result_object);
    l377_assert_return_invoke(&result_object);
    l378_assert_return_invoke(&result_object);
    l379_assert_return_invoke(&result_object);
    l380_assert_return_invoke(&result_object);
    l381_assert_return_invoke(&result_object);
    l382_assert_return_invoke(&result_object);
    l383_assert_return_invoke(&result_object);
    l384_assert_return_invoke(&result_object);
    l385_assert_return_invoke(&result_object);
    l386_assert_return_invoke(&result_object);
    l387_assert_return_invoke(&result_object);
    l388_assert_return_invoke(&result_object);
    l389_assert_return_invoke(&result_object);
    l390_assert_return_invoke(&result_object);
    l391_assert_return_invoke(&result_object);
    l392_assert_return_invoke(&result_object);
    l393_assert_return_invoke(&result_object);
    l394_assert_return_invoke(&result_object);
    l395_assert_return_invoke(&result_object);
    l396_assert_return_invoke(&result_object);
    l397_assert_return_invoke(&result_object);
    l398_assert_return_invoke(&result_object);
    l399_assert_return_invoke(&result_object);
    l400_assert_return_invoke(&result_object);
    l401_assert_return_invoke(&result_object);
    l402_assert_return_invoke(&result_object);
    l403_assert_return_invoke(&result_object);
    l404_assert_return_invoke(&result_object);
    l405_assert_return_invoke(&result_object);
    l406_assert_return_invoke(&result_object);
    l407_assert_return_invoke(&result_object);
    l408_assert_return_invoke(&result_object);
    l409_assert_return_invoke(&result_object);
    l410_assert_return_invoke(&result_object);
    l411_assert_return_invoke(&result_object);
    l412_assert_return_invoke(&result_object);
    l413_assert_return_invoke(&result_object);
    l414_assert_return_invoke(&result_object);
    l415_assert_return_invoke(&result_object);
    l416_assert_return_invoke(&result_object);
    l417_assert_return_invoke(&result_object);
    l418_assert_return_invoke(&result_object);
    l419_assert_return_invoke(&result_object);
    l420_assert_return_invoke(&result_object);
    l421_assert_return_invoke(&result_object);
    l422_assert_return_invoke(&result_object);
    l423_assert_return_invoke(&result_object);
    l424_assert_return_invoke(&result_object);
    l425_assert_return_invoke(&result_object);
    l426_assert_return_invoke(&result_object);
    l427_assert_return_invoke(&result_object);
    l428_assert_return_invoke(&result_object);
    l429_assert_return_invoke(&result_object);
    l430_assert_return_invoke(&result_object);
    l431_assert_return_invoke(&result_object);
    l432_assert_return_invoke(&result_object);
    l433_assert_return_invoke(&result_object);
    l434_assert_return_invoke(&result_object);
    l435_assert_return_invoke(&result_object);
    l436_assert_return_invoke(&result_object);
    l437_assert_return_invoke(&result_object);
    l438_assert_return_invoke(&result_object);
    l439_assert_return_invoke(&result_object);
    l440_assert_return_invoke(&result_object);
    l441_assert_return_invoke(&result_object);
    l442_assert_return_invoke(&result_object);
    l443_assert_return_invoke(&result_object);
    l444_assert_return_invoke(&result_object);
    l445_assert_return_invoke(&result_object);
    l446_assert_return_invoke(&result_object);
    l447_assert_return_invoke(&result_object);
    l448_assert_return_invoke(&result_object);
    l449_assert_return_invoke(&result_object);
    l450_assert_return_invoke(&result_object);
    l451_assert_return_invoke(&result_object);
    l452_assert_return_invoke(&result_object);
    l453_assert_return_invoke(&result_object);
    l454_assert_return_invoke(&result_object);
    l455_assert_return_invoke(&result_object);
    l456_assert_return_invoke(&result_object);
    l457_assert_return_invoke(&result_object);
    l458_assert_return_invoke(&result_object);
    l459_assert_return_invoke(&result_object);
    l460_assert_return_invoke(&result_object);
    l461_assert_return_invoke(&result_object);
    l462_assert_return_invoke(&result_object);
    l463_assert_return_invoke(&result_object);
    l464_assert_return_invoke(&result_object);
    l465_assert_return_invoke(&result_object);
    l466_assert_return_invoke(&result_object);
    l467_assert_return_invoke(&result_object);
    l468_assert_return_invoke(&result_object);
    l469_assert_return_invoke(&result_object);
    l470_assert_return_invoke(&result_object);
    l471_assert_return_invoke(&result_object);
    l472_assert_return_invoke(&result_object);
    l473_assert_return_invoke(&result_object);
    l474_assert_return_invoke(&result_object);
    l475_assert_return_invoke(&result_object);
    l476_assert_return_invoke(&result_object);
    l477_assert_return_invoke(&result_object);
    l478_assert_return_invoke(&result_object);
    l479_assert_return_invoke(&result_object);
    l480_assert_return_invoke(&result_object);
    l481_assert_return_invoke(&result_object);
    l482_assert_return_invoke(&result_object);
    l483_assert_return_invoke(&result_object);
    l484_assert_return_invoke(&result_object);
    l485_assert_return_invoke(&result_object);
    l486_assert_return_invoke(&result_object);
    l487_assert_return_invoke(&result_object);
    l488_assert_return_invoke(&result_object);
    l489_assert_return_invoke(&result_object);
    l490_assert_return_invoke(&result_object);
    l491_assert_return_invoke(&result_object);
    l492_assert_return_invoke(&result_object);
    l493_assert_return_invoke(&result_object);
    l494_assert_return_invoke(&result_object);
    l495_assert_return_invoke(&result_object);
    l496_assert_return_invoke(&result_object);
    l497_assert_return_invoke(&result_object);
    l498_assert_return_invoke(&result_object);
    l499_assert_return_invoke(&result_object);
    l500_assert_return_invoke(&result_object);
    l501_assert_return_invoke(&result_object);
    l502_assert_return_invoke(&result_object);
    l503_assert_return_invoke(&result_object);
    l504_assert_return_invoke(&result_object);
    l505_assert_return_invoke(&result_object);
    l506_assert_return_invoke(&result_object);
    l507_assert_return_invoke(&result_object);
    l508_assert_return_invoke(&result_object);
    l509_assert_return_invoke(&result_object);
    l510_assert_return_invoke(&result_object);
    l511_assert_return_invoke(&result_object);
    l512_assert_return_invoke(&result_object);
    l513_assert_return_invoke(&result_object);
    l514_assert_return_invoke(&result_object);
    l515_assert_return_invoke(&result_object);
    l516_assert_return_invoke(&result_object);
    l517_assert_return_invoke(&result_object);
    l518_assert_return_invoke(&result_object);
    l519_assert_return_invoke(&result_object);
    l520_assert_return_invoke(&result_object);
    l521_assert_return_invoke(&result_object);
    l522_assert_return_invoke(&result_object);
    l523_assert_return_invoke(&result_object);
    l524_assert_return_invoke(&result_object);
    l525_assert_return_invoke(&result_object);
    l526_assert_return_invoke(&result_object);
    l527_assert_return_invoke(&result_object);
    l528_assert_return_invoke(&result_object);
    l529_assert_return_invoke(&result_object);
    l530_assert_return_invoke(&result_object);
    l531_assert_return_invoke(&result_object);
    l532_assert_return_invoke(&result_object);
    l533_assert_return_invoke(&result_object);
    l534_assert_return_invoke(&result_object);
    l535_assert_return_invoke(&result_object);
    l536_assert_return_invoke(&result_object);
    l537_assert_return_invoke(&result_object);
    l538_assert_return_invoke(&result_object);
    l539_assert_return_invoke(&result_object);
    l540_assert_return_invoke(&result_object);
    l541_assert_return_invoke(&result_object);
    l542_assert_return_invoke(&result_object);
    l543_assert_return_invoke(&result_object);
    l544_assert_return_invoke(&result_object);
    l545_assert_return_invoke(&result_object);
    l546_assert_return_invoke(&result_object);
    l547_assert_return_invoke(&result_object);
    l548_assert_return_invoke(&result_object);
    l549_assert_return_invoke(&result_object);
    l550_assert_return_invoke(&result_object);
    l551_assert_return_invoke(&result_object);
    l552_assert_return_invoke(&result_object);
    l553_assert_return_invoke(&result_object);
    l554_assert_return_invoke(&result_object);
    l555_assert_return_invoke(&result_object);
    l556_assert_return_invoke(&result_object);
    l557_assert_return_invoke(&result_object);
    l558_assert_return_invoke(&result_object);
    l559_assert_return_invoke(&result_object);
    l560_assert_return_invoke(&result_object);
    l561_assert_return_invoke(&result_object);
    l562_assert_return_invoke(&result_object);
    l563_assert_return_invoke(&result_object);
    l564_assert_return_invoke(&result_object);
    l565_assert_return_invoke(&result_object);
    l566_assert_return_invoke(&result_object);
    l567_assert_return_invoke(&result_object);
    l568_assert_return_invoke(&result_object);
    l569_assert_return_invoke(&result_object);
    l570_assert_return_invoke(&result_object);
    l571_assert_return_invoke(&result_object);
    l572_assert_return_invoke(&result_object);
    l573_assert_return_invoke(&result_object);
    l574_assert_return_invoke(&result_object);
    l575_assert_return_invoke(&result_object);
    l576_assert_return_invoke(&result_object);
    l577_assert_return_invoke(&result_object);
    l578_assert_return_invoke(&result_object);
    l579_assert_return_invoke(&result_object);
    l580_assert_return_invoke(&result_object);
    l581_assert_return_invoke(&result_object);
    l582_assert_return_invoke(&result_object);
    l583_assert_return_invoke(&result_object);
    l584_assert_return_invoke(&result_object);
    l585_assert_return_invoke(&result_object);
    l586_assert_return_invoke(&result_object);
    l587_assert_return_invoke(&result_object);
    l588_assert_return_invoke(&result_object);
    l589_assert_return_invoke(&result_object);
    l590_assert_return_invoke(&result_object);
    l591_assert_return_invoke(&result_object);
    l592_assert_return_invoke(&result_object);
    l593_assert_return_invoke(&result_object);
    l594_assert_return_invoke(&result_object);
    l595_assert_return_invoke(&result_object);
    l596_assert_return_invoke(&result_object);
    l597_assert_return_invoke(&result_object);
    l598_assert_return_invoke(&result_object);
    l599_assert_return_invoke(&result_object);
    l600_assert_return_invoke(&result_object);
    l601_assert_return_invoke(&result_object);
    l602_assert_return_invoke(&result_object);
    l603_assert_return_invoke(&result_object);
    l604_assert_return_invoke(&result_object);
    l605_assert_return_invoke(&result_object);
    l606_assert_return_invoke(&result_object);
    l607_assert_return_invoke(&result_object);
    l608_assert_return_invoke(&result_object);
    l609_assert_return_invoke(&result_object);
    l610_assert_return_invoke(&result_object);
    l611_assert_return_invoke(&result_object);
    l612_assert_return_invoke(&result_object);
    l613_assert_return_invoke(&result_object);
    l614_assert_return_invoke(&result_object);
    l615_assert_return_invoke(&result_object);
    l616_assert_return_invoke(&result_object);
    l617_assert_return_invoke(&result_object);
    l618_assert_return_invoke(&result_object);
    l619_assert_return_invoke(&result_object);
    l620_assert_return_invoke(&result_object);
    l621_assert_return_invoke(&result_object);
    l622_assert_return_invoke(&result_object);
    l623_assert_return_invoke(&result_object);
    l624_assert_return_invoke(&result_object);
    l625_assert_return_invoke(&result_object);
    l626_assert_return_invoke(&result_object);
    l627_assert_return_invoke(&result_object);
    l628_assert_return_invoke(&result_object);
    l629_assert_return_invoke(&result_object);
    l630_assert_return_invoke(&result_object);
    l631_assert_return_invoke(&result_object);
    l632_assert_return_invoke(&result_object);
    l633_assert_return_invoke(&result_object);
    l634_assert_return_invoke(&result_object);
    l635_assert_return_invoke(&result_object);
    l636_assert_return_invoke(&result_object);
    l637_assert_return_invoke(&result_object);
    l638_assert_return_invoke(&result_object);
    l639_assert_return_invoke(&result_object);
    l640_assert_return_invoke(&result_object);
    l641_assert_return_invoke(&result_object);
    l642_assert_return_invoke(&result_object);
    l643_assert_return_invoke(&result_object);
    l644_assert_return_invoke(&result_object);
    l645_assert_return_invoke(&result_object);
    l646_assert_return_invoke(&result_object);
    l647_assert_return_invoke(&result_object);
    l648_assert_return_invoke(&result_object);
    l649_assert_return_invoke(&result_object);
    l650_assert_return_invoke(&result_object);
    l651_assert_return_invoke(&result_object);
    l652_assert_return_invoke(&result_object);
    l653_assert_return_invoke(&result_object);
    l654_assert_return_invoke(&result_object);
    l655_assert_return_invoke(&result_object);
    l656_assert_return_invoke(&result_object);
    l657_assert_return_invoke(&result_object);
    l658_assert_return_invoke(&result_object);
    l659_assert_return_invoke(&result_object);
    l660_assert_return_invoke(&result_object);
    l661_assert_return_invoke(&result_object);
    l662_assert_return_invoke(&result_object);
    l663_assert_return_invoke(&result_object);
    l664_assert_return_invoke(&result_object);
    l665_assert_return_invoke(&result_object);
    l666_assert_return_invoke(&result_object);
    l667_assert_return_invoke(&result_object);
    l668_assert_return_invoke(&result_object);
    l669_assert_return_invoke(&result_object);
    l670_assert_return_invoke(&result_object);
    l671_assert_return_invoke(&result_object);
    l672_assert_return_invoke(&result_object);
    l673_assert_return_invoke(&result_object);
    l674_assert_return_invoke(&result_object);
    l675_assert_return_invoke(&result_object);
    l676_assert_return_invoke(&result_object);
    l677_assert_return_invoke(&result_object);
    l678_assert_return_invoke(&result_object);
    l679_assert_return_invoke(&result_object);
    l680_assert_return_invoke(&result_object);
    l681_assert_return_invoke(&result_object);
    l682_assert_return_invoke(&result_object);
    l683_assert_return_invoke(&result_object);
    l684_assert_return_invoke(&result_object);
    l685_assert_return_invoke(&result_object);
    l686_assert_return_invoke(&result_object);
    l687_assert_return_invoke(&result_object);
    l688_assert_return_invoke(&result_object);
    l689_assert_return_invoke(&result_object);
    l690_assert_return_invoke(&result_object);
    l691_assert_return_invoke(&result_object);
    l692_assert_return_invoke(&result_object);
    l693_assert_return_invoke(&result_object);
    l694_assert_return_invoke(&result_object);
    l695_assert_return_invoke(&result_object);
    l696_assert_return_invoke(&result_object);
    l697_assert_return_invoke(&result_object);
    l698_assert_return_invoke(&result_object);
    l699_assert_return_invoke(&result_object);
    l700_assert_return_invoke(&result_object);
    l701_assert_return_invoke(&result_object);
    l702_assert_return_invoke(&result_object);
    l703_assert_return_invoke(&result_object);
    l704_assert_return_invoke(&result_object);
    l705_assert_return_invoke(&result_object);
    l706_assert_return_invoke(&result_object);
    l707_assert_return_invoke(&result_object);
    l708_assert_return_invoke(&result_object);
    l709_assert_return_invoke(&result_object);
    l710_assert_return_invoke(&result_object);
    l711_assert_return_invoke(&result_object);
    l712_assert_return_invoke(&result_object);
    l713_assert_return_invoke(&result_object);
    l714_assert_return_invoke(&result_object);
    l715_assert_return_invoke(&result_object);
    l716_assert_return_invoke(&result_object);
    l717_assert_return_invoke(&result_object);
    l718_assert_return_invoke(&result_object);
    l719_assert_return_invoke(&result_object);
    l720_assert_return_invoke(&result_object);
    l721_assert_return_invoke(&result_object);
    l722_assert_return_invoke(&result_object);
    l723_assert_return_invoke(&result_object);
    l724_assert_return_invoke(&result_object);
    l725_assert_return_invoke(&result_object);
    l726_assert_return_invoke(&result_object);
    l727_assert_return_invoke(&result_object);
    l728_assert_return_invoke(&result_object);
    l729_assert_return_invoke(&result_object);
    l730_assert_return_invoke(&result_object);
    l731_assert_return_invoke(&result_object);
    l732_assert_return_invoke(&result_object);
    l733_assert_return_invoke(&result_object);
    l734_assert_return_invoke(&result_object);
    l735_assert_return_invoke(&result_object);
    l736_assert_return_invoke(&result_object);
    l737_assert_return_invoke(&result_object);
    l738_assert_return_invoke(&result_object);
    l739_assert_return_invoke(&result_object);
    l740_assert_return_invoke(&result_object);
    l741_assert_return_invoke(&result_object);
    l742_assert_return_invoke(&result_object);
    l743_assert_return_invoke(&result_object);
    l744_assert_return_invoke(&result_object);
    l745_assert_return_invoke(&result_object);
    l746_assert_return_invoke(&result_object);
    l747_assert_return_invoke(&result_object);
    l748_assert_return_invoke(&result_object);
    l749_assert_return_invoke(&result_object);
    l750_assert_return_invoke(&result_object);
    l751_assert_return_invoke(&result_object);
    l752_assert_return_invoke(&result_object);
    l753_assert_return_invoke(&result_object);
    l754_assert_return_invoke(&result_object);
    l755_assert_return_invoke(&result_object);
    l756_assert_return_invoke(&result_object);
    l757_assert_return_invoke(&result_object);
    l758_assert_return_invoke(&result_object);
    l759_assert_return_invoke(&result_object);
    l760_assert_return_invoke(&result_object);
    l761_assert_return_invoke(&result_object);
    l762_assert_return_invoke(&result_object);
    l763_assert_return_invoke(&result_object);
    l764_assert_return_invoke(&result_object);
    l765_assert_return_invoke(&result_object);
    l766_assert_return_invoke(&result_object);
    l767_assert_return_invoke(&result_object);
    l768_assert_return_invoke(&result_object);
    l769_assert_return_invoke(&result_object);
    l770_assert_return_invoke(&result_object);
    l771_assert_return_invoke(&result_object);
    l772_assert_return_invoke(&result_object);
    l773_assert_return_invoke(&result_object);
    l774_assert_return_invoke(&result_object);
    l775_assert_return_invoke(&result_object);
    l776_assert_return_invoke(&result_object);
    l777_assert_return_invoke(&result_object);
    l778_assert_return_invoke(&result_object);
    l779_assert_return_invoke(&result_object);
    l780_assert_return_invoke(&result_object);
    l781_assert_return_invoke(&result_object);
    l782_assert_return_invoke(&result_object);
    l783_assert_return_invoke(&result_object);
    l784_assert_return_invoke(&result_object);
    l785_assert_return_invoke(&result_object);
    l786_assert_return_invoke(&result_object);
    l787_assert_return_invoke(&result_object);
    l788_assert_return_invoke(&result_object);
    l789_assert_return_invoke(&result_object);
    l790_assert_return_invoke(&result_object);
    l791_assert_return_invoke(&result_object);
    l792_assert_return_invoke(&result_object);
    l793_assert_return_invoke(&result_object);
    l794_assert_return_invoke(&result_object);
    l795_assert_return_invoke(&result_object);
    l796_assert_return_invoke(&result_object);
    l797_assert_return_invoke(&result_object);
    l798_assert_return_invoke(&result_object);
    l799_assert_return_invoke(&result_object);
    l800_assert_return_invoke(&result_object);
    l801_assert_return_invoke(&result_object);
    l802_assert_return_invoke(&result_object);
    l803_assert_return_invoke(&result_object);
    l804_assert_return_invoke(&result_object);
    l805_assert_return_invoke(&result_object);
    l806_assert_return_invoke(&result_object);
    l807_assert_return_invoke(&result_object);
    l808_assert_return_invoke(&result_object);
    l809_assert_return_invoke(&result_object);
    l810_assert_return_invoke(&result_object);
    l811_assert_return_invoke(&result_object);
    l812_assert_return_invoke(&result_object);
    l813_assert_return_invoke(&result_object);
    l814_assert_return_invoke(&result_object);
    l815_assert_return_invoke(&result_object);
    l816_assert_return_invoke(&result_object);
    l817_assert_return_invoke(&result_object);
    l818_assert_return_invoke(&result_object);
    l819_assert_return_invoke(&result_object);
    l820_assert_return_invoke(&result_object);
    l821_assert_return_invoke(&result_object);
    l822_assert_return_invoke(&result_object);
    l823_assert_return_invoke(&result_object);
    l824_assert_return_invoke(&result_object);
    l825_assert_return_invoke(&result_object);
    l826_assert_return_invoke(&result_object);
    l827_assert_return_invoke(&result_object);
    l828_assert_return_invoke(&result_object);
    l829_assert_return_invoke(&result_object);
    l830_assert_return_invoke(&result_object);
    l831_assert_return_invoke(&result_object);
    l832_assert_return_invoke(&result_object);
    l833_assert_return_invoke(&result_object);
    l834_assert_return_invoke(&result_object);
    l835_assert_return_invoke(&result_object);
    l836_assert_return_invoke(&result_object);
    l837_assert_return_invoke(&result_object);
    l838_assert_return_invoke(&result_object);
    l839_assert_return_invoke(&result_object);
    l840_assert_return_invoke(&result_object);
    l841_assert_return_invoke(&result_object);
    l842_assert_return_invoke(&result_object);
    l843_assert_return_invoke(&result_object);
    l844_assert_return_invoke(&result_object);
    l845_assert_return_invoke(&result_object);
    l846_assert_return_invoke(&result_object);
    l847_assert_return_invoke(&result_object);
    l848_assert_return_invoke(&result_object);
    l849_assert_return_invoke(&result_object);
    l850_assert_return_invoke(&result_object);
    l851_assert_return_invoke(&result_object);
    l852_assert_return_invoke(&result_object);
    l853_assert_return_invoke(&result_object);
    l854_assert_return_invoke(&result_object);
    l855_assert_return_invoke(&result_object);
    l856_assert_return_invoke(&result_object);
    l857_assert_return_invoke(&result_object);
    l858_assert_return_invoke(&result_object);
    l859_assert_return_invoke(&result_object);
    l860_assert_return_invoke(&result_object);
    l861_assert_return_invoke(&result_object);
    l862_assert_return_invoke(&result_object);
    l863_assert_return_invoke(&result_object);
    l864_assert_return_invoke(&result_object);
    l865_assert_return_invoke(&result_object);
    l866_assert_return_invoke(&result_object);
    l867_assert_return_invoke(&result_object);
    l868_assert_return_invoke(&result_object);
    l869_assert_return_invoke(&result_object);
    l870_assert_return_invoke(&result_object);
    l871_assert_return_invoke(&result_object);
    l872_assert_return_invoke(&result_object);
    l873_assert_return_invoke(&result_object);
    l874_assert_return_invoke(&result_object);
    l875_assert_return_invoke(&result_object);
    l876_assert_return_invoke(&result_object);
    l877_assert_return_invoke(&result_object);
    l878_assert_return_invoke(&result_object);
    l879_assert_return_invoke(&result_object);
    l880_assert_return_invoke(&result_object);
    l881_assert_return_invoke(&result_object);
    l882_assert_return_invoke(&result_object);
    l883_assert_return_invoke(&result_object);
    l884_assert_return_invoke(&result_object);
    l885_assert_return_invoke(&result_object);
    l886_assert_return_invoke(&result_object);
    l887_assert_return_invoke(&result_object);
    l888_assert_return_invoke(&result_object);
    l889_assert_return_invoke(&result_object);
    l890_assert_return_invoke(&result_object);
    l891_assert_return_invoke(&result_object);
    l892_assert_return_invoke(&result_object);
    l893_assert_return_invoke(&result_object);
    l894_assert_return_invoke(&result_object);
    l895_assert_return_invoke(&result_object);
    l896_assert_return_invoke(&result_object);
    l897_assert_return_invoke(&result_object);
    l898_assert_return_invoke(&result_object);
    l899_assert_return_invoke(&result_object);
    l900_assert_return_invoke(&result_object);
    l901_assert_return_invoke(&result_object);
    l902_assert_return_invoke(&result_object);
    l903_assert_return_invoke(&result_object);
    l904_assert_return_invoke(&result_object);
    l905_assert_return_invoke(&result_object);
    l906_assert_return_invoke(&result_object);
    l907_assert_return_invoke(&result_object);
    l908_assert_return_invoke(&result_object);
    l909_assert_return_invoke(&result_object);
    l910_assert_return_invoke(&result_object);
    l911_assert_return_invoke(&result_object);
    l912_assert_return_invoke(&result_object);
    l913_assert_return_invoke(&result_object);
    l914_assert_return_invoke(&result_object);
    l915_assert_return_invoke(&result_object);
    l916_assert_return_invoke(&result_object);
    l917_assert_return_invoke(&result_object);
    l918_assert_return_invoke(&result_object);
    l919_assert_return_invoke(&result_object);
    l920_assert_return_invoke(&result_object);
    l921_assert_return_invoke(&result_object);
    l922_assert_return_invoke(&result_object);
    l923_assert_return_invoke(&result_object);
    l924_assert_return_invoke(&result_object);
    l925_assert_return_invoke(&result_object);
    l926_assert_return_invoke(&result_object);
    l927_assert_return_invoke(&result_object);
    l928_assert_return_invoke(&result_object);
    l929_assert_return_invoke(&result_object);
    l930_assert_return_invoke(&result_object);
    l931_assert_return_invoke(&result_object);
    l932_assert_return_invoke(&result_object);
    l933_assert_return_invoke(&result_object);
    l934_assert_return_invoke(&result_object);
    l935_assert_return_invoke(&result_object);
    l936_assert_return_invoke(&result_object);
    l937_assert_return_invoke(&result_object);
    l938_assert_return_invoke(&result_object);
    l939_assert_return_invoke(&result_object);
    l940_assert_return_invoke(&result_object);
    l941_assert_return_invoke(&result_object);
    l942_assert_return_invoke(&result_object);
    l943_assert_return_invoke(&result_object);
    l944_assert_return_invoke(&result_object);
    l945_assert_return_invoke(&result_object);
    l946_assert_return_invoke(&result_object);
    l947_assert_return_invoke(&result_object);
    l948_assert_return_invoke(&result_object);
    l949_assert_return_invoke(&result_object);
    l950_assert_return_invoke(&result_object);
    l951_assert_return_invoke(&result_object);
    l952_assert_return_invoke(&result_object);
    l953_assert_return_invoke(&result_object);
    l954_assert_return_invoke(&result_object);
    l955_assert_return_invoke(&result_object);
    l956_assert_return_invoke(&result_object);
    l957_assert_return_invoke(&result_object);
    l958_assert_return_invoke(&result_object);
    l959_assert_return_invoke(&result_object);
    l960_assert_return_invoke(&result_object);
    l961_assert_return_invoke(&result_object);
    l962_assert_return_invoke(&result_object);
    l963_assert_return_invoke(&result_object);
    l964_assert_return_invoke(&result_object);
    l965_assert_return_invoke(&result_object);
    l966_assert_return_invoke(&result_object);
    l967_assert_return_invoke(&result_object);
    l968_assert_return_invoke(&result_object);
    l969_assert_return_invoke(&result_object);
    l970_assert_return_invoke(&result_object);
    l971_assert_return_invoke(&result_object);
    l972_assert_return_invoke(&result_object);
    l973_assert_return_invoke(&result_object);
    l974_assert_return_invoke(&result_object);
    l975_assert_return_invoke(&result_object);
    l976_assert_return_invoke(&result_object);
    l977_assert_return_invoke(&result_object);
    l978_assert_return_invoke(&result_object);
    l979_assert_return_invoke(&result_object);
    l980_assert_return_invoke(&result_object);
    l981_assert_return_invoke(&result_object);
    l982_assert_return_invoke(&result_object);
    l983_assert_return_invoke(&result_object);
    l984_assert_return_invoke(&result_object);
    l985_assert_return_invoke(&result_object);
    l986_assert_return_invoke(&result_object);
    l987_assert_return_invoke(&result_object);
    l988_assert_return_invoke(&result_object);
    l989_assert_return_invoke(&result_object);
    l990_assert_return_invoke(&result_object);
    l991_assert_return_invoke(&result_object);
    l992_assert_return_invoke(&result_object);
    l993_assert_return_invoke(&result_object);
    l994_assert_return_invoke(&result_object);
    l995_assert_return_invoke(&result_object);
    l996_assert_return_invoke(&result_object);
    l997_assert_return_invoke(&result_object);
    l998_assert_return_invoke(&result_object);
    l999_assert_return_invoke(&result_object);
    l1000_assert_return_invoke(&result_object);
    l1001_assert_return_invoke(&result_object);
    l1002_assert_return_invoke(&result_object);
    l1003_assert_return_invoke(&result_object);
    l1004_assert_return_invoke(&result_object);
    l1005_assert_return_invoke(&result_object);
    l1006_assert_return_invoke(&result_object);
    l1007_assert_return_invoke(&result_object);
    l1008_assert_return_invoke(&result_object);
    l1009_assert_return_invoke(&result_object);
    l1010_assert_return_invoke(&result_object);
    l1011_assert_return_invoke(&result_object);
    l1012_assert_return_invoke(&result_object);
    l1013_assert_return_invoke(&result_object);
    l1014_assert_return_invoke(&result_object);
    l1015_assert_return_invoke(&result_object);
    l1016_assert_return_invoke(&result_object);
    l1017_assert_return_invoke(&result_object);
    l1018_assert_return_invoke(&result_object);
    l1019_assert_return_invoke(&result_object);
    l1020_assert_return_invoke(&result_object);
    l1021_assert_return_invoke(&result_object);
    l1022_assert_return_invoke(&result_object);
    l1023_assert_return_invoke(&result_object);
    l1024_assert_return_invoke(&result_object);
    l1025_assert_return_invoke(&result_object);
    l1026_assert_return_invoke(&result_object);
    l1027_assert_return_invoke(&result_object);
    l1028_assert_return_invoke(&result_object);
    l1029_assert_return_invoke(&result_object);
    l1030_assert_return_invoke(&result_object);
    l1031_assert_return_invoke(&result_object);
    l1032_assert_return_invoke(&result_object);
    l1033_assert_return_invoke(&result_object);
    l1034_assert_return_invoke(&result_object);
    l1035_assert_return_invoke(&result_object);
    l1036_assert_return_invoke(&result_object);
    l1037_assert_return_invoke(&result_object);
    l1038_assert_return_invoke(&result_object);
    l1039_assert_return_invoke(&result_object);
    l1040_assert_return_invoke(&result_object);
    l1041_assert_return_invoke(&result_object);
    l1042_assert_return_invoke(&result_object);
    l1043_assert_return_invoke(&result_object);
    l1044_assert_return_invoke(&result_object);
    l1045_assert_return_invoke(&result_object);
    l1046_assert_return_invoke(&result_object);
    l1047_assert_return_invoke(&result_object);
    l1048_assert_return_invoke(&result_object);
    l1049_assert_return_invoke(&result_object);
    l1050_assert_return_invoke(&result_object);
    l1051_assert_return_invoke(&result_object);
    l1052_assert_return_invoke(&result_object);
    l1053_assert_return_invoke(&result_object);
    l1054_assert_return_invoke(&result_object);
    l1055_assert_return_invoke(&result_object);
    l1056_assert_return_invoke(&result_object);
    l1057_assert_return_invoke(&result_object);
    l1058_assert_return_invoke(&result_object);
    l1059_assert_return_invoke(&result_object);
    l1060_assert_return_invoke(&result_object);
    l1061_assert_return_invoke(&result_object);
    l1062_assert_return_invoke(&result_object);
    l1063_assert_return_invoke(&result_object);
    l1064_assert_return_invoke(&result_object);
    l1065_assert_return_invoke(&result_object);
    l1066_assert_return_invoke(&result_object);
    l1067_assert_return_invoke(&result_object);
    l1068_assert_return_invoke(&result_object);
    l1069_assert_return_invoke(&result_object);
    l1070_assert_return_invoke(&result_object);
    l1071_assert_return_invoke(&result_object);
    l1072_assert_return_invoke(&result_object);
    l1073_assert_return_invoke(&result_object);
    l1074_assert_return_invoke(&result_object);
    l1075_assert_return_invoke(&result_object);
    l1076_assert_return_invoke(&result_object);
    l1077_assert_return_invoke(&result_object);
    l1078_assert_return_invoke(&result_object);
    l1079_assert_return_invoke(&result_object);
    l1080_assert_return_invoke(&result_object);
    l1081_assert_return_invoke(&result_object);
    l1082_assert_return_invoke(&result_object);
    l1083_assert_return_invoke(&result_object);
    l1084_assert_return_invoke(&result_object);
    l1085_assert_return_invoke(&result_object);
    l1086_assert_return_invoke(&result_object);
    l1087_assert_return_invoke(&result_object);
    l1088_assert_return_invoke(&result_object);
    l1089_assert_return_invoke(&result_object);
    l1090_assert_return_invoke(&result_object);
    l1091_assert_return_invoke(&result_object);
    l1092_assert_return_invoke(&result_object);
    l1093_assert_return_invoke(&result_object);
    l1094_assert_return_invoke(&result_object);
    l1095_assert_return_invoke(&result_object);
    l1096_assert_return_invoke(&result_object);
    l1097_assert_return_invoke(&result_object);
    l1098_assert_return_invoke(&result_object);
    l1099_assert_return_invoke(&result_object);
    l1100_assert_return_invoke(&result_object);
    l1101_assert_return_invoke(&result_object);
    l1102_assert_return_invoke(&result_object);
    l1103_assert_return_invoke(&result_object);
    l1104_assert_return_invoke(&result_object);
    l1105_assert_return_invoke(&result_object);
    l1106_assert_return_invoke(&result_object);
    l1107_assert_return_invoke(&result_object);
    l1108_assert_return_invoke(&result_object);
    l1109_assert_return_invoke(&result_object);
    l1110_assert_return_invoke(&result_object);
    l1111_assert_return_invoke(&result_object);
    l1112_assert_return_invoke(&result_object);
    l1113_assert_return_invoke(&result_object);
    l1114_assert_return_invoke(&result_object);
    l1115_assert_return_invoke(&result_object);
    l1116_assert_return_invoke(&result_object);
    l1117_assert_return_invoke(&result_object);
    l1118_assert_return_invoke(&result_object);
    l1119_assert_return_invoke(&result_object);
    l1120_assert_return_invoke(&result_object);
    l1121_assert_return_invoke(&result_object);
    l1122_assert_return_invoke(&result_object);
    l1123_assert_return_invoke(&result_object);
    l1124_assert_return_invoke(&result_object);
    l1125_assert_return_invoke(&result_object);
    l1126_assert_return_invoke(&result_object);
    l1127_assert_return_invoke(&result_object);
    l1128_assert_return_invoke(&result_object);
    l1129_assert_return_invoke(&result_object);
    l1130_assert_return_invoke(&result_object);
    l1131_assert_return_invoke(&result_object);
    l1132_assert_return_invoke(&result_object);
    l1133_assert_return_invoke(&result_object);
    l1134_assert_return_invoke(&result_object);
    l1135_assert_return_invoke(&result_object);
    l1136_assert_return_invoke(&result_object);
    l1137_assert_return_invoke(&result_object);
    l1138_assert_return_invoke(&result_object);
    l1139_assert_return_invoke(&result_object);
    l1140_assert_return_invoke(&result_object);
    l1141_assert_return_invoke(&result_object);
    l1142_assert_return_invoke(&result_object);
    l1143_assert_return_invoke(&result_object);
    l1144_assert_return_invoke(&result_object);
    l1145_assert_return_invoke(&result_object);
    l1146_assert_return_invoke(&result_object);
    l1147_assert_return_invoke(&result_object);
    l1148_assert_return_invoke(&result_object);
    l1149_assert_return_invoke(&result_object);
    l1150_assert_return_invoke(&result_object);
    l1151_assert_return_invoke(&result_object);
    l1152_assert_return_invoke(&result_object);
    l1153_assert_return_invoke(&result_object);
    l1154_assert_return_invoke(&result_object);
    l1155_assert_return_invoke(&result_object);
    l1156_assert_return_invoke(&result_object);
    l1157_assert_return_invoke(&result_object);
    l1158_assert_return_invoke(&result_object);
    l1159_assert_return_invoke(&result_object);
    l1160_assert_return_invoke(&result_object);
    l1161_assert_return_invoke(&result_object);
    l1162_assert_return_invoke(&result_object);
    l1163_assert_return_invoke(&result_object);
    l1164_assert_return_invoke(&result_object);
    l1165_assert_return_invoke(&result_object);
    l1166_assert_return_invoke(&result_object);
    l1167_assert_return_invoke(&result_object);
    l1168_assert_return_invoke(&result_object);
    l1169_assert_return_invoke(&result_object);
    l1170_assert_return_invoke(&result_object);
    l1171_assert_return_invoke(&result_object);
    l1172_assert_return_invoke(&result_object);
    l1173_assert_return_invoke(&result_object);
    l1174_assert_return_invoke(&result_object);
    l1175_assert_return_invoke(&result_object);
    l1176_assert_return_invoke(&result_object);
    l1177_assert_return_invoke(&result_object);
    l1178_assert_return_invoke(&result_object);
    l1179_assert_return_invoke(&result_object);
    l1180_assert_return_invoke(&result_object);
    l1181_assert_return_invoke(&result_object);
    l1182_assert_return_invoke(&result_object);
    l1183_assert_return_invoke(&result_object);
    l1184_assert_return_invoke(&result_object);
    l1185_assert_return_invoke(&result_object);
    l1186_assert_return_invoke(&result_object);
    l1187_assert_return_invoke(&result_object);
    l1188_assert_return_invoke(&result_object);
    l1189_assert_return_invoke(&result_object);
    l1190_assert_return_invoke(&result_object);
    l1191_assert_return_invoke(&result_object);
    l1192_assert_return_invoke(&result_object);
    l1193_assert_return_invoke(&result_object);
    l1194_assert_return_invoke(&result_object);
    l1195_assert_return_invoke(&result_object);
    l1196_assert_return_invoke(&result_object);
    l1197_assert_return_invoke(&result_object);
    l1198_assert_return_invoke(&result_object);
    l1199_assert_return_invoke(&result_object);
    l1200_assert_return_invoke(&result_object);
    l1201_assert_return_invoke(&result_object);
    l1202_assert_return_invoke(&result_object);
    l1203_assert_return_invoke(&result_object);
    l1204_assert_return_invoke(&result_object);
    l1205_assert_return_invoke(&result_object);
    l1206_assert_return_invoke(&result_object);
    l1207_assert_return_invoke(&result_object);
    l1208_assert_return_invoke(&result_object);
    l1209_assert_return_invoke(&result_object);
    l1210_assert_return_invoke(&result_object);
    l1211_assert_return_invoke(&result_object);
    l1212_assert_return_invoke(&result_object);
    l1213_assert_return_invoke(&result_object);
    l1214_assert_return_invoke(&result_object);
    l1215_assert_return_invoke(&result_object);
    l1216_assert_return_invoke(&result_object);
    l1217_assert_return_invoke(&result_object);
    l1218_assert_return_invoke(&result_object);
    l1219_assert_return_invoke(&result_object);
    l1220_assert_return_invoke(&result_object);
    l1221_assert_return_invoke(&result_object);
    l1222_assert_return_invoke(&result_object);
    l1223_assert_return_invoke(&result_object);
    l1224_assert_return_invoke(&result_object);
    l1225_assert_return_invoke(&result_object);
    l1226_assert_return_invoke(&result_object);
    l1227_assert_return_invoke(&result_object);
    l1228_assert_return_invoke(&result_object);
    l1229_assert_return_invoke(&result_object);
    l1230_assert_return_invoke(&result_object);
    l1231_assert_return_invoke(&result_object);
    l1232_assert_return_invoke(&result_object);
    l1233_assert_return_invoke(&result_object);
    l1234_assert_return_invoke(&result_object);
    l1235_assert_return_invoke(&result_object);
    l1236_assert_return_invoke(&result_object);
    l1237_assert_return_invoke(&result_object);
    l1238_assert_return_invoke(&result_object);
    l1239_assert_return_invoke(&result_object);
    l1240_assert_return_invoke(&result_object);
    l1241_assert_return_invoke(&result_object);
    l1242_assert_return_invoke(&result_object);
    l1243_assert_return_invoke(&result_object);
    l1244_assert_return_invoke(&result_object);
    l1245_assert_return_invoke(&result_object);
    l1246_assert_return_invoke(&result_object);
    l1247_assert_return_invoke(&result_object);
    l1248_assert_return_invoke(&result_object);
    l1249_assert_return_invoke(&result_object);
    l1250_assert_return_invoke(&result_object);
    l1251_assert_return_invoke(&result_object);
    l1252_assert_return_invoke(&result_object);
    l1253_assert_return_invoke(&result_object);
    l1254_assert_return_invoke(&result_object);
    l1255_assert_return_invoke(&result_object);
    l1256_assert_return_invoke(&result_object);
    l1257_assert_return_invoke(&result_object);
    l1258_assert_return_invoke(&result_object);
    l1259_assert_return_invoke(&result_object);
    l1260_assert_return_invoke(&result_object);
    l1261_assert_return_invoke(&result_object);
    l1262_assert_return_invoke(&result_object);
    l1263_assert_return_invoke(&result_object);
    l1264_assert_return_invoke(&result_object);
    l1265_assert_return_invoke(&result_object);
    l1266_assert_return_invoke(&result_object);
    l1267_assert_return_invoke(&result_object);
    l1268_assert_return_invoke(&result_object);
    l1269_assert_return_invoke(&result_object);
    l1270_assert_return_invoke(&result_object);
    l1271_assert_return_invoke(&result_object);
    l1272_assert_return_invoke(&result_object);
    l1273_assert_return_invoke(&result_object);
    l1274_assert_return_invoke(&result_object);
    l1275_assert_return_invoke(&result_object);
    l1276_assert_return_invoke(&result_object);
    l1277_assert_return_invoke(&result_object);
    l1278_assert_return_invoke(&result_object);
    l1279_assert_return_invoke(&result_object);
    l1280_assert_return_invoke(&result_object);
    l1281_assert_return_invoke(&result_object);
    l1282_assert_return_invoke(&result_object);
    l1283_assert_return_invoke(&result_object);
    l1284_assert_return_invoke(&result_object);
    l1285_assert_return_invoke(&result_object);
    l1286_assert_return_invoke(&result_object);
    l1287_assert_return_invoke(&result_object);
    l1288_assert_return_invoke(&result_object);
    l1289_assert_return_invoke(&result_object);
    l1290_assert_return_invoke(&result_object);
    l1291_assert_return_invoke(&result_object);
    l1292_assert_return_invoke(&result_object);
    l1293_assert_return_invoke(&result_object);
    l1294_assert_return_invoke(&result_object);
    l1295_assert_return_invoke(&result_object);
    l1296_assert_return_invoke(&result_object);
    l1297_assert_return_invoke(&result_object);
    l1298_assert_return_invoke(&result_object);
    l1299_assert_return_invoke(&result_object);
    l1300_assert_return_invoke(&result_object);
    l1301_assert_return_invoke(&result_object);
    l1302_assert_return_invoke(&result_object);
    l1303_assert_return_invoke(&result_object);
    l1304_assert_return_invoke(&result_object);
    l1305_assert_return_invoke(&result_object);
    l1306_assert_return_invoke(&result_object);
    l1307_assert_return_invoke(&result_object);
    l1308_assert_return_invoke(&result_object);
    l1309_assert_return_invoke(&result_object);
    l1310_assert_return_invoke(&result_object);
    l1311_assert_return_invoke(&result_object);
    l1312_assert_return_invoke(&result_object);
    l1313_assert_return_invoke(&result_object);
    l1314_assert_return_invoke(&result_object);
    l1315_assert_return_invoke(&result_object);
    l1316_assert_return_invoke(&result_object);
    l1317_assert_return_invoke(&result_object);
    l1318_assert_return_invoke(&result_object);
    l1319_assert_return_invoke(&result_object);
    l1320_assert_return_invoke(&result_object);
    l1321_assert_return_invoke(&result_object);
    l1322_assert_return_invoke(&result_object);
    l1323_assert_return_invoke(&result_object);
    l1324_assert_return_invoke(&result_object);
    l1325_assert_return_invoke(&result_object);
    l1326_assert_return_invoke(&result_object);
    l1327_assert_return_invoke(&result_object);
    l1328_assert_return_invoke(&result_object);
    l1329_assert_return_invoke(&result_object);
    l1330_assert_return_invoke(&result_object);
    l1331_assert_return_invoke(&result_object);
    l1332_assert_return_invoke(&result_object);
    l1333_assert_return_invoke(&result_object);
    l1334_assert_return_invoke(&result_object);
    l1335_assert_return_invoke(&result_object);
    l1336_assert_return_invoke(&result_object);
    l1337_assert_return_invoke(&result_object);
    l1338_assert_return_invoke(&result_object);
    l1339_assert_return_invoke(&result_object);
    l1340_assert_return_invoke(&result_object);
    l1341_assert_return_invoke(&result_object);
    l1342_assert_return_invoke(&result_object);
    l1343_assert_return_invoke(&result_object);
    l1344_assert_return_invoke(&result_object);
    l1345_assert_return_invoke(&result_object);
    l1346_assert_return_invoke(&result_object);
    l1347_assert_return_invoke(&result_object);
    l1348_assert_return_invoke(&result_object);
    l1349_assert_return_invoke(&result_object);
    l1350_assert_return_invoke(&result_object);
    l1351_assert_return_invoke(&result_object);
    l1352_assert_return_invoke(&result_object);
    l1353_assert_return_invoke(&result_object);
    l1354_assert_return_invoke(&result_object);
    l1355_assert_return_invoke(&result_object);
    l1356_assert_return_invoke(&result_object);
    l1357_assert_return_invoke(&result_object);
    l1358_assert_return_invoke(&result_object);
    l1359_assert_return_invoke(&result_object);
    l1360_assert_return_invoke(&result_object);
    l1361_assert_return_invoke(&result_object);
    l1362_assert_return_invoke(&result_object);
    l1363_assert_return_invoke(&result_object);
    l1364_assert_return_invoke(&result_object);
    l1365_assert_return_invoke(&result_object);
    l1366_assert_return_invoke(&result_object);
    l1367_assert_return_invoke(&result_object);
    l1368_assert_return_invoke(&result_object);
    l1369_assert_return_invoke(&result_object);
    l1370_assert_return_invoke(&result_object);
    l1371_assert_return_invoke(&result_object);
    l1372_assert_return_invoke(&result_object);
    l1373_assert_return_invoke(&result_object);
    l1374_assert_return_invoke(&result_object);
    l1375_assert_return_invoke(&result_object);
    l1376_assert_return_invoke(&result_object);
    l1377_assert_return_invoke(&result_object);
    l1378_assert_return_invoke(&result_object);
    l1379_assert_return_invoke(&result_object);
    l1380_assert_return_invoke(&result_object);
    l1381_assert_return_invoke(&result_object);
    l1382_assert_return_invoke(&result_object);
    l1383_assert_return_invoke(&result_object);
    l1384_assert_return_invoke(&result_object);
    l1385_assert_return_invoke(&result_object);
    l1386_assert_return_invoke(&result_object);
    l1387_assert_return_invoke(&result_object);
    l1388_assert_return_invoke(&result_object);
    l1389_assert_return_invoke(&result_object);
    l1390_assert_return_invoke(&result_object);
    l1391_assert_return_invoke(&result_object);
    l1392_assert_return_invoke(&result_object);
    l1393_assert_return_invoke(&result_object);
    l1394_assert_return_invoke(&result_object);
    l1395_assert_return_invoke(&result_object);
    l1396_assert_return_invoke(&result_object);
    l1397_assert_return_invoke(&result_object);
    l1398_assert_return_invoke(&result_object);
    l1399_assert_return_invoke(&result_object);
    l1400_assert_return_invoke(&result_object);
    l1401_assert_return_invoke(&result_object);
    l1402_assert_return_invoke(&result_object);
    l1403_assert_return_invoke(&result_object);
    l1404_assert_return_invoke(&result_object);
    l1405_assert_return_invoke(&result_object);
    l1406_assert_return_invoke(&result_object);
    l1407_assert_return_invoke(&result_object);
    l1408_assert_return_invoke(&result_object);
    l1409_assert_return_invoke(&result_object);
    l1410_assert_return_invoke(&result_object);
    l1411_assert_return_invoke(&result_object);
    l1412_assert_return_invoke(&result_object);
    l1413_assert_return_invoke(&result_object);
    l1414_assert_return_invoke(&result_object);
    l1415_assert_return_invoke(&result_object);
    l1416_assert_return_invoke(&result_object);
    l1417_assert_return_invoke(&result_object);
    l1418_assert_return_invoke(&result_object);
    l1419_assert_return_invoke(&result_object);
    l1420_assert_return_invoke(&result_object);
    l1421_assert_return_invoke(&result_object);
    l1422_assert_return_invoke(&result_object);
    l1423_assert_return_invoke(&result_object);
    l1424_assert_return_invoke(&result_object);
    l1425_assert_return_invoke(&result_object);
    l1426_assert_return_invoke(&result_object);
    l1427_assert_return_invoke(&result_object);
    l1428_assert_return_invoke(&result_object);
    l1429_assert_return_invoke(&result_object);
    l1430_assert_return_invoke(&result_object);
    l1431_assert_return_invoke(&result_object);
    l1432_assert_return_invoke(&result_object);
    l1433_assert_return_invoke(&result_object);
    l1434_assert_return_invoke(&result_object);
    l1435_assert_return_invoke(&result_object);
    l1436_assert_return_invoke(&result_object);
    l1437_assert_return_invoke(&result_object);
    l1438_assert_return_invoke(&result_object);
    l1439_assert_return_invoke(&result_object);
    l1440_assert_return_invoke(&result_object);
    l1441_assert_return_invoke(&result_object);
    l1442_assert_return_invoke(&result_object);
    l1443_assert_return_invoke(&result_object);
    l1444_assert_return_invoke(&result_object);
    l1445_assert_return_invoke(&result_object);
    l1446_assert_return_invoke(&result_object);
    l1447_assert_return_invoke(&result_object);
    l1448_assert_return_invoke(&result_object);
    l1449_assert_return_invoke(&result_object);
    l1450_assert_return_invoke(&result_object);
    l1451_assert_return_invoke(&result_object);
    l1452_assert_return_invoke(&result_object);
    l1453_assert_return_invoke(&result_object);
    l1454_assert_return_invoke(&result_object);
    l1455_assert_return_invoke(&result_object);
    l1456_assert_return_invoke(&result_object);
    l1457_assert_return_invoke(&result_object);
    l1458_assert_return_invoke(&result_object);
    l1459_assert_return_invoke(&result_object);
    l1460_assert_return_invoke(&result_object);
    l1461_assert_return_invoke(&result_object);
    l1462_assert_return_invoke(&result_object);
    l1463_assert_return_invoke(&result_object);
    l1464_assert_return_invoke(&result_object);
    l1465_assert_return_invoke(&result_object);
    l1466_assert_return_invoke(&result_object);
    l1467_assert_return_invoke(&result_object);
    l1468_assert_return_invoke(&result_object);
    l1469_assert_return_invoke(&result_object);
    l1470_assert_return_invoke(&result_object);
    l1471_assert_return_invoke(&result_object);
    l1472_assert_return_invoke(&result_object);
    l1473_assert_return_invoke(&result_object);
    l1474_assert_return_invoke(&result_object);
    l1475_assert_return_invoke(&result_object);
    l1476_assert_return_invoke(&result_object);
    l1477_assert_return_invoke(&result_object);
    l1478_assert_return_invoke(&result_object);
    l1479_assert_return_invoke(&result_object);
    l1480_assert_return_invoke(&result_object);
    l1481_assert_return_invoke(&result_object);
    l1482_assert_return_invoke(&result_object);
    l1483_assert_return_invoke(&result_object);
    l1484_assert_return_invoke(&result_object);
    l1485_assert_return_invoke(&result_object);
    l1486_assert_return_invoke(&result_object);
    l1487_assert_return_invoke(&result_object);
    l1488_assert_return_invoke(&result_object);
    l1489_assert_return_invoke(&result_object);
    l1490_assert_return_invoke(&result_object);
    l1491_assert_return_invoke(&result_object);
    l1492_assert_return_invoke(&result_object);
    l1493_assert_return_invoke(&result_object);
    l1494_assert_return_invoke(&result_object);
    l1495_assert_return_invoke(&result_object);
    l1496_assert_return_invoke(&result_object);
    l1497_assert_return_invoke(&result_object);
    l1498_assert_return_invoke(&result_object);
    l1499_assert_return_invoke(&result_object);
    l1500_assert_return_invoke(&result_object);
    l1501_assert_return_invoke(&result_object);
    l1502_assert_return_invoke(&result_object);
    l1503_assert_return_invoke(&result_object);
    l1504_assert_return_invoke(&result_object);
    l1505_assert_return_invoke(&result_object);
    l1506_assert_return_invoke(&result_object);
    l1507_assert_return_invoke(&result_object);
    l1508_assert_return_invoke(&result_object);
    l1509_assert_return_invoke(&result_object);
    l1510_assert_return_invoke(&result_object);
    l1511_assert_return_invoke(&result_object);
    l1512_assert_return_invoke(&result_object);
    l1513_assert_return_invoke(&result_object);
    l1514_assert_return_invoke(&result_object);
    l1515_assert_return_invoke(&result_object);
    l1516_assert_return_invoke(&result_object);
    l1517_assert_return_invoke(&result_object);
    l1518_assert_return_invoke(&result_object);
    l1519_assert_return_invoke(&result_object);
    l1520_assert_return_invoke(&result_object);
    l1521_assert_return_invoke(&result_object);
    l1522_assert_return_invoke(&result_object);
    l1523_assert_return_invoke(&result_object);
    l1524_assert_return_invoke(&result_object);
    l1525_assert_return_invoke(&result_object);
    l1526_assert_return_invoke(&result_object);
    l1527_assert_return_invoke(&result_object);
    l1528_assert_return_invoke(&result_object);
    l1529_assert_return_invoke(&result_object);
    l1530_assert_return_invoke(&result_object);
    l1531_assert_return_invoke(&result_object);
    l1532_assert_return_invoke(&result_object);
    l1533_assert_return_invoke(&result_object);
    l1534_assert_return_invoke(&result_object);
    l1535_assert_return_invoke(&result_object);
    l1536_assert_return_invoke(&result_object);
    l1537_assert_return_invoke(&result_object);
    l1538_assert_return_invoke(&result_object);
    l1539_assert_return_invoke(&result_object);
    l1540_assert_return_invoke(&result_object);
    l1541_assert_return_invoke(&result_object);
    l1542_assert_return_invoke(&result_object);
    l1543_assert_return_invoke(&result_object);
    l1544_assert_return_invoke(&result_object);
    l1545_assert_return_invoke(&result_object);
    l1546_assert_return_invoke(&result_object);
    l1547_assert_return_invoke(&result_object);
    l1548_assert_return_invoke(&result_object);
    l1549_assert_return_invoke(&result_object);
    l1550_assert_return_invoke(&result_object);
    l1551_assert_return_invoke(&result_object);
    l1552_assert_return_invoke(&result_object);
    l1553_assert_return_invoke(&result_object);
    l1554_assert_return_invoke(&result_object);
    l1555_assert_return_invoke(&result_object);
    l1556_assert_return_invoke(&result_object);
    l1557_assert_return_invoke(&result_object);
    l1558_assert_return_invoke(&result_object);
    l1559_assert_return_invoke(&result_object);
    l1560_assert_return_invoke(&result_object);
    l1561_assert_return_invoke(&result_object);
    l1562_assert_return_invoke(&result_object);
    l1563_assert_return_invoke(&result_object);
    l1564_assert_return_invoke(&result_object);
    l1565_assert_return_invoke(&result_object);
    l1566_assert_return_invoke(&result_object);
    l1567_assert_return_invoke(&result_object);
    l1568_assert_return_invoke(&result_object);
    l1569_assert_return_invoke(&result_object);
    l1570_assert_return_invoke(&result_object);
    l1571_assert_return_invoke(&result_object);
    l1572_assert_return_invoke(&result_object);
    l1573_assert_return_invoke(&result_object);
    l1574_assert_return_invoke(&result_object);
    l1575_assert_return_invoke(&result_object);
    l1576_assert_return_invoke(&result_object);
    l1577_assert_return_invoke(&result_object);
    l1578_assert_return_invoke(&result_object);
    l1579_assert_return_invoke(&result_object);
    l1580_assert_return_invoke(&result_object);
    l1581_assert_return_invoke(&result_object);
    l1582_assert_return_invoke(&result_object);
    l1583_assert_return_invoke(&result_object);
    l1584_assert_return_invoke(&result_object);
    l1585_assert_return_invoke(&result_object);
    l1586_assert_return_invoke(&result_object);
    l1587_assert_return_invoke(&result_object);
    l1588_assert_return_invoke(&result_object);
    l1589_assert_return_invoke(&result_object);
    l1590_assert_return_invoke(&result_object);
    l1591_assert_return_invoke(&result_object);
    l1592_assert_return_invoke(&result_object);
    l1593_assert_return_invoke(&result_object);
    l1594_assert_return_invoke(&result_object);
    l1595_assert_return_invoke(&result_object);
    l1596_assert_return_invoke(&result_object);
    l1597_assert_return_invoke(&result_object);
    l1598_assert_return_invoke(&result_object);
    l1599_assert_return_invoke(&result_object);
    l1600_assert_return_invoke(&result_object);
    l1601_assert_return_invoke(&result_object);
    l1602_assert_return_invoke(&result_object);
    l1603_assert_return_invoke(&result_object);
    l1604_assert_return_invoke(&result_object);
    l1605_assert_return_invoke(&result_object);
    l1606_assert_return_invoke(&result_object);
    l1607_assert_return_invoke(&result_object);
    l1608_assert_return_invoke(&result_object);
    l1609_assert_return_invoke(&result_object);
    l1610_assert_return_invoke(&result_object);
    l1611_assert_return_invoke(&result_object);
    l1612_assert_return_invoke(&result_object);
    l1613_assert_return_invoke(&result_object);
    l1614_assert_return_invoke(&result_object);
    l1615_assert_return_invoke(&result_object);
    l1616_assert_return_invoke(&result_object);
    l1617_assert_return_invoke(&result_object);
    l1618_assert_return_invoke(&result_object);
    l1619_assert_return_invoke(&result_object);
    l1620_assert_return_invoke(&result_object);
    l1621_assert_return_invoke(&result_object);
    l1622_assert_return_invoke(&result_object);
    l1623_assert_return_invoke(&result_object);
    l1624_assert_return_invoke(&result_object);
    l1625_assert_return_invoke(&result_object);
    l1626_assert_return_invoke(&result_object);
    l1627_assert_return_invoke(&result_object);
    l1628_assert_return_invoke(&result_object);
    l1629_assert_return_invoke(&result_object);
    l1630_assert_return_invoke(&result_object);
    l1631_assert_return_invoke(&result_object);
    l1632_assert_return_invoke(&result_object);
    l1633_assert_return_invoke(&result_object);
    l1634_assert_return_invoke(&result_object);
    l1635_assert_return_invoke(&result_object);
    l1636_assert_return_invoke(&result_object);
    l1637_assert_return_invoke(&result_object);
    l1638_assert_return_invoke(&result_object);
    l1639_assert_return_invoke(&result_object);
    l1640_assert_return_invoke(&result_object);
    l1641_assert_return_invoke(&result_object);
    l1642_assert_return_invoke(&result_object);
    l1643_assert_return_invoke(&result_object);
    l1644_assert_return_invoke(&result_object);
    l1645_assert_return_invoke(&result_object);
    l1646_assert_return_invoke(&result_object);
    l1647_assert_return_invoke(&result_object);
    l1648_assert_return_invoke(&result_object);
    l1649_assert_return_invoke(&result_object);
    l1650_assert_return_invoke(&result_object);
    l1651_assert_return_invoke(&result_object);
    l1652_assert_return_invoke(&result_object);
    l1653_assert_return_invoke(&result_object);
    l1654_assert_return_invoke(&result_object);
    l1655_assert_return_invoke(&result_object);
    l1656_assert_return_invoke(&result_object);
    l1657_assert_return_invoke(&result_object);
    l1658_assert_return_invoke(&result_object);
    l1659_assert_return_invoke(&result_object);
    l1660_assert_return_invoke(&result_object);
    l1661_assert_return_invoke(&result_object);
    l1662_assert_return_invoke(&result_object);
    l1663_assert_return_invoke(&result_object);
    l1664_assert_return_invoke(&result_object);
    l1665_assert_return_invoke(&result_object);
    l1666_assert_return_invoke(&result_object);
    l1667_assert_return_invoke(&result_object);
    l1668_assert_return_invoke(&result_object);
    l1669_assert_return_invoke(&result_object);
    l1670_assert_return_invoke(&result_object);
    l1671_assert_return_invoke(&result_object);
    l1672_assert_return_invoke(&result_object);
    l1673_assert_return_invoke(&result_object);
    l1674_assert_return_invoke(&result_object);
    l1675_assert_return_invoke(&result_object);
    l1676_assert_return_invoke(&result_object);
    l1677_assert_return_invoke(&result_object);
    l1678_assert_return_invoke(&result_object);
    l1679_assert_return_invoke(&result_object);
    l1680_assert_return_invoke(&result_object);
    l1681_assert_return_invoke(&result_object);
    l1682_assert_return_invoke(&result_object);
    l1683_assert_return_invoke(&result_object);
    l1684_assert_return_invoke(&result_object);
    l1685_assert_return_invoke(&result_object);
    l1686_assert_return_invoke(&result_object);
    l1687_assert_return_invoke(&result_object);
    l1688_assert_return_invoke(&result_object);
    l1689_assert_return_invoke(&result_object);
    l1690_assert_return_invoke(&result_object);
    l1691_assert_return_invoke(&result_object);
    l1692_assert_return_invoke(&result_object);
    l1693_assert_return_invoke(&result_object);
    l1694_assert_return_invoke(&result_object);
    l1695_assert_return_invoke(&result_object);
    l1696_assert_return_invoke(&result_object);
    l1697_assert_return_invoke(&result_object);
    l1698_assert_return_invoke(&result_object);
    l1699_assert_return_invoke(&result_object);
    l1700_assert_return_invoke(&result_object);
    l1701_assert_return_invoke(&result_object);
    l1702_assert_return_invoke(&result_object);
    l1703_assert_return_invoke(&result_object);
    l1704_assert_return_invoke(&result_object);
    l1705_assert_return_invoke(&result_object);
    l1706_assert_return_invoke(&result_object);
    l1707_assert_return_invoke(&result_object);
    l1708_assert_return_invoke(&result_object);
    l1709_assert_return_invoke(&result_object);
    l1710_assert_return_invoke(&result_object);
    l1711_assert_return_invoke(&result_object);
    l1712_assert_return_invoke(&result_object);
    l1713_assert_return_invoke(&result_object);
    l1714_assert_return_invoke(&result_object);
    l1715_assert_return_invoke(&result_object);
    l1716_assert_return_invoke(&result_object);
    l1717_assert_return_invoke(&result_object);
    l1718_assert_return_invoke(&result_object);
    l1719_assert_return_invoke(&result_object);
    l1720_assert_return_invoke(&result_object);
    l1721_assert_return_invoke(&result_object);
    l1722_assert_return_invoke(&result_object);
    l1723_assert_return_invoke(&result_object);
    l1724_assert_return_invoke(&result_object);
    l1725_assert_return_invoke(&result_object);
    l1726_assert_return_invoke(&result_object);
    l1727_assert_return_invoke(&result_object);
    l1728_assert_return_invoke(&result_object);
    l1729_assert_return_invoke(&result_object);
    l1730_assert_return_invoke(&result_object);
    l1731_assert_return_invoke(&result_object);
    l1732_assert_return_invoke(&result_object);
    l1733_assert_return_invoke(&result_object);
    l1734_assert_return_invoke(&result_object);
    l1735_assert_return_invoke(&result_object);
    l1736_assert_return_invoke(&result_object);
    l1737_assert_return_invoke(&result_object);
    l1738_assert_return_invoke(&result_object);
    l1739_assert_return_invoke(&result_object);
    l1740_assert_return_invoke(&result_object);
    l1741_assert_return_invoke(&result_object);
    l1742_assert_return_invoke(&result_object);
    l1743_assert_return_invoke(&result_object);
    l1744_assert_return_invoke(&result_object);
    l1745_assert_return_invoke(&result_object);
    l1746_assert_return_invoke(&result_object);
    l1747_assert_return_invoke(&result_object);
    l1748_assert_return_invoke(&result_object);
    l1749_assert_return_invoke(&result_object);
    l1750_assert_return_invoke(&result_object);
    l1751_assert_return_invoke(&result_object);
    l1752_assert_return_invoke(&result_object);
    l1753_assert_return_invoke(&result_object);
    l1754_assert_return_invoke(&result_object);
    l1755_assert_return_invoke(&result_object);
    l1756_assert_return_invoke(&result_object);
    l1757_assert_return_invoke(&result_object);
    l1758_assert_return_invoke(&result_object);
    l1759_assert_return_invoke(&result_object);
    l1760_assert_return_invoke(&result_object);
    l1761_assert_return_invoke(&result_object);
    l1762_assert_return_invoke(&result_object);
    l1763_assert_return_invoke(&result_object);
    l1764_assert_return_invoke(&result_object);
    l1765_assert_return_invoke(&result_object);
    l1766_assert_return_invoke(&result_object);
    l1767_assert_return_invoke(&result_object);
    l1768_assert_return_invoke(&result_object);
    l1769_assert_return_invoke(&result_object);
    l1770_assert_return_invoke(&result_object);
    l1771_assert_return_invoke(&result_object);
    l1772_assert_return_invoke(&result_object);
    l1773_assert_return_invoke(&result_object);
    l1774_assert_return_invoke(&result_object);
    l1775_assert_return_invoke(&result_object);
    l1776_assert_return_invoke(&result_object);
    l1777_assert_return_invoke(&result_object);
    l1778_assert_return_invoke(&result_object);
    l1779_assert_return_invoke(&result_object);
    l1780_assert_return_invoke(&result_object);
    l1781_assert_return_invoke(&result_object);
    l1782_assert_return_invoke(&result_object);
    l1783_assert_return_invoke(&result_object);
    l1784_assert_return_invoke(&result_object);
    l1785_assert_return_invoke(&result_object);
    l1786_assert_return_invoke(&result_object);
    l1787_assert_return_invoke(&result_object);
    l1788_assert_return_invoke(&result_object);
    l1789_assert_return_invoke(&result_object);
    l1790_assert_return_invoke(&result_object);
    l1791_assert_return_invoke(&result_object);
    l1792_assert_return_invoke(&result_object);
    l1793_assert_return_invoke(&result_object);
    l1794_assert_return_invoke(&result_object);
    l1795_assert_return_invoke(&result_object);
    l1796_assert_return_invoke(&result_object);
    l1797_assert_return_invoke(&result_object);
    l1798_assert_return_invoke(&result_object);
    l1799_assert_return_invoke(&result_object);
    l1800_assert_return_invoke(&result_object);
    l1801_assert_return_invoke(&result_object);
    l1802_assert_return_invoke(&result_object);
    l1803_assert_return_invoke(&result_object);
    l1804_assert_return_invoke(&result_object);
    l1805_assert_return_invoke(&result_object);
    l1806_assert_return_invoke(&result_object);
    l1807_assert_return_invoke(&result_object);
    l1808_assert_return_invoke(&result_object);
    l1809_assert_return_invoke(&result_object);
    l1810_assert_return_invoke(&result_object);
    l1811_assert_return_invoke(&result_object);
    l1812_assert_return_invoke(&result_object);
    l1813_assert_return_invoke(&result_object);
    l1814_assert_return_invoke(&result_object);
    l1815_assert_return_invoke(&result_object);
    l1816_assert_return_invoke(&result_object);
    l1817_assert_return_invoke(&result_object);
    l1818_assert_return_invoke(&result_object);
    l1819_assert_return_invoke(&result_object);
    l1820_assert_return_invoke(&result_object);
    l1821_assert_return_invoke(&result_object);
    l1822_assert_return_invoke(&result_object);
    l1823_assert_return_invoke(&result_object);
    l1824_assert_return_invoke(&result_object);
    l1825_assert_return_invoke(&result_object);
    l1826_assert_return_invoke(&result_object);
    l1827_assert_return_invoke(&result_object);
    l1828_assert_return_invoke(&result_object);
    l1829_assert_return_invoke(&result_object);
    l1830_assert_return_invoke(&result_object);
    l1831_assert_return_invoke(&result_object);
    l1832_assert_return_invoke(&result_object);
    l1833_assert_return_invoke(&result_object);
    l1834_assert_return_invoke(&result_object);
    l1835_assert_return_invoke(&result_object);
    l1836_assert_return_invoke(&result_object);
    l1837_assert_return_invoke(&result_object);
    l1838_assert_return_invoke(&result_object);
    l1839_assert_return_invoke(&result_object);
    l1840_assert_return_invoke(&result_object);
    l1841_assert_return_invoke(&result_object);
    l1842_assert_return_invoke(&result_object);
    l1843_assert_return_invoke(&result_object);
    l1844_assert_return_invoke(&result_object);
    l1845_assert_return_invoke(&result_object);
    l1846_assert_return_invoke(&result_object);
    l1847_assert_return_invoke(&result_object);
    l1848_assert_return_invoke(&result_object);
    l1849_assert_return_invoke(&result_object);
    l1850_assert_return_invoke(&result_object);
    l1851_assert_return_invoke(&result_object);
    l1852_assert_return_invoke(&result_object);
    l1853_assert_return_invoke(&result_object);
    l1854_assert_return_invoke(&result_object);
    l1855_assert_return_invoke(&result_object);
    l1856_assert_return_invoke(&result_object);
    l1857_assert_return_invoke(&result_object);
    l1858_assert_return_invoke(&result_object);
    l1859_assert_return_invoke(&result_object);
    l1860_assert_return_invoke(&result_object);
    l1861_assert_return_invoke(&result_object);
    l1862_assert_return_invoke(&result_object);
    l1863_assert_return_invoke(&result_object);
    l1864_assert_return_invoke(&result_object);
    l1865_assert_return_invoke(&result_object);
    l1866_assert_return_invoke(&result_object);
    l1867_assert_return_invoke(&result_object);
    l1868_assert_return_invoke(&result_object);
    l1869_assert_return_invoke(&result_object);
    l1870_assert_return_invoke(&result_object);
    l1871_assert_return_invoke(&result_object);
    l1872_assert_return_invoke(&result_object);
    l1873_assert_return_invoke(&result_object);
    l1874_assert_return_invoke(&result_object);
    l1875_assert_return_invoke(&result_object);
    l1876_assert_return_invoke(&result_object);
    l1877_assert_return_invoke(&result_object);
    l1878_assert_return_invoke(&result_object);
    l1879_assert_return_invoke(&result_object);
    l1880_assert_return_invoke(&result_object);
    l1881_assert_return_invoke(&result_object);
    l1882_assert_return_invoke(&result_object);
    l1883_assert_return_invoke(&result_object);
    l1884_assert_return_invoke(&result_object);
    l1885_assert_return_invoke(&result_object);
    l1886_assert_return_invoke(&result_object);
    l1887_assert_return_invoke(&result_object);
    l1888_assert_return_invoke(&result_object);
    l1889_assert_return_invoke(&result_object);
    l1890_assert_return_invoke(&result_object);
    l1891_assert_return_invoke(&result_object);
    l1892_assert_return_invoke(&result_object);
    l1893_assert_return_invoke(&result_object);
    l1894_assert_return_invoke(&result_object);
    l1895_assert_return_invoke(&result_object);
    l1896_assert_return_invoke(&result_object);
    l1897_assert_return_invoke(&result_object);
    l1898_assert_return_invoke(&result_object);
    l1899_assert_return_invoke(&result_object);
    l1900_assert_return_invoke(&result_object);
    l1901_assert_return_invoke(&result_object);
    l1902_assert_return_invoke(&result_object);
    l1903_assert_return_invoke(&result_object);
    l1904_assert_return_invoke(&result_object);
    l1905_assert_return_invoke(&result_object);
    l1906_assert_return_invoke(&result_object);
    l1907_assert_return_invoke(&result_object);
    l1908_assert_return_invoke(&result_object);
    l1909_assert_return_invoke(&result_object);
    l1910_assert_return_invoke(&result_object);
    l1911_assert_return_invoke(&result_object);
    l1912_assert_return_invoke(&result_object);
    l1913_assert_return_invoke(&result_object);
    l1914_assert_return_invoke(&result_object);
    l1915_assert_return_invoke(&result_object);
    l1916_assert_return_invoke(&result_object);
    l1917_assert_return_invoke(&result_object);
    l1918_assert_return_invoke(&result_object);
    l1919_assert_return_invoke(&result_object);
    l1920_assert_return_invoke(&result_object);
    l1921_assert_return_invoke(&result_object);
    l1922_assert_return_invoke(&result_object);
    l1923_assert_return_invoke(&result_object);
    l1924_assert_return_invoke(&result_object);
    l1925_assert_return_invoke(&result_object);
    l1926_assert_return_invoke(&result_object);
    l1927_assert_return_invoke(&result_object);
    l1928_assert_return_invoke(&result_object);
    l1929_assert_return_invoke(&result_object);
    l1930_assert_return_invoke(&result_object);
    l1931_assert_return_invoke(&result_object);
    l1932_assert_return_invoke(&result_object);
    l1933_assert_return_invoke(&result_object);
    l1934_assert_return_invoke(&result_object);
    l1935_assert_return_invoke(&result_object);
    l1936_assert_return_invoke(&result_object);
    l1937_assert_return_invoke(&result_object);
    l1938_assert_return_invoke(&result_object);
    l1939_assert_return_invoke(&result_object);
    l1940_assert_return_invoke(&result_object);
    l1941_assert_return_invoke(&result_object);
    l1942_assert_return_invoke(&result_object);
    l1943_assert_return_invoke(&result_object);
    l1944_assert_return_invoke(&result_object);
    l1945_assert_return_invoke(&result_object);
    l1946_assert_return_invoke(&result_object);
    l1947_assert_return_invoke(&result_object);
    l1948_assert_return_invoke(&result_object);
    l1949_assert_return_invoke(&result_object);
    l1950_assert_return_invoke(&result_object);
    l1951_assert_return_invoke(&result_object);
    l1952_assert_return_invoke(&result_object);
    l1953_assert_return_invoke(&result_object);
    l1954_assert_return_invoke(&result_object);
    l1955_assert_return_invoke(&result_object);
    l1956_assert_return_invoke(&result_object);
    l1957_assert_return_invoke(&result_object);
    l1958_assert_return_invoke(&result_object);
    l1959_assert_return_invoke(&result_object);
    l1960_assert_return_invoke(&result_object);
    l1961_assert_return_invoke(&result_object);
    l1962_assert_return_invoke(&result_object);
    l1963_assert_return_invoke(&result_object);
    l1964_assert_return_invoke(&result_object);
    l1965_assert_return_invoke(&result_object);
    l1966_assert_return_invoke(&result_object);
    l1967_assert_return_invoke(&result_object);
    l1968_assert_return_invoke(&result_object);
    l1969_assert_return_invoke(&result_object);
    l1970_assert_return_invoke(&result_object);
    l1971_assert_return_invoke(&result_object);
    l1972_assert_return_invoke(&result_object);
    l1973_assert_return_invoke(&result_object);
    l1974_assert_return_invoke(&result_object);
    l1975_assert_return_invoke(&result_object);
    l1976_assert_return_invoke(&result_object);
    l1977_assert_return_invoke(&result_object);
    l1978_assert_return_invoke(&result_object);
    l1979_assert_return_invoke(&result_object);
    l1980_assert_return_invoke(&result_object);
    l1981_assert_return_invoke(&result_object);
    l1982_assert_return_invoke(&result_object);
    l1983_assert_return_invoke(&result_object);
    l1984_assert_return_invoke(&result_object);
    l1985_assert_return_invoke(&result_object);
    l1986_assert_return_invoke(&result_object);
    l1987_assert_return_invoke(&result_object);
    l1988_assert_return_invoke(&result_object);
    l1989_assert_return_invoke(&result_object);
    l1990_assert_return_invoke(&result_object);
    l1991_assert_return_invoke(&result_object);
    l1992_assert_return_invoke(&result_object);
    l1993_assert_return_invoke(&result_object);
    l1994_assert_return_invoke(&result_object);
    l1995_assert_return_invoke(&result_object);
    l1996_assert_return_invoke(&result_object);
    l1997_assert_return_invoke(&result_object);
    l1998_assert_return_invoke(&result_object);
    l1999_assert_return_invoke(&result_object);
    l2000_assert_return_invoke(&result_object);
    l2001_assert_return_invoke(&result_object);
    l2002_assert_return_invoke(&result_object);
    l2003_assert_return_invoke(&result_object);
    l2004_assert_return_invoke(&result_object);
    l2005_assert_return_invoke(&result_object);
    l2006_assert_return_invoke(&result_object);
    l2007_assert_return_invoke(&result_object);
    l2008_assert_return_invoke(&result_object);
    l2009_assert_return_invoke(&result_object);
    l2010_assert_return_invoke(&result_object);
    l2011_assert_return_invoke(&result_object);
    l2012_assert_return_invoke(&result_object);
    l2013_assert_return_invoke(&result_object);
    l2014_assert_return_invoke(&result_object);
    l2015_assert_return_invoke(&result_object);
    l2016_assert_return_invoke(&result_object);
    l2017_assert_return_invoke(&result_object);
    l2018_assert_return_invoke(&result_object);
    l2019_assert_return_invoke(&result_object);
    l2020_assert_return_invoke(&result_object);
    l2021_assert_return_invoke(&result_object);
    l2022_assert_return_invoke(&result_object);
    l2023_assert_return_invoke(&result_object);
    l2024_assert_return_invoke(&result_object);
    l2025_assert_return_invoke(&result_object);
    l2026_assert_return_invoke(&result_object);
    l2027_assert_return_invoke(&result_object);
    l2028_assert_return_invoke(&result_object);
    l2029_assert_return_invoke(&result_object);
    l2030_assert_return_invoke(&result_object);
    l2031_assert_return_invoke(&result_object);
    l2032_assert_return_invoke(&result_object);
    l2033_assert_return_invoke(&result_object);
    l2034_assert_return_invoke(&result_object);
    l2035_assert_return_invoke(&result_object);
    l2036_assert_return_invoke(&result_object);
    l2037_assert_return_invoke(&result_object);
    l2038_assert_return_invoke(&result_object);
    l2039_assert_return_invoke(&result_object);
    l2040_assert_return_invoke(&result_object);
    l2041_assert_return_invoke(&result_object);
    l2042_assert_return_invoke(&result_object);
    l2043_assert_return_invoke(&result_object);
    l2044_assert_return_invoke(&result_object);
    l2045_assert_return_invoke(&result_object);
    l2046_assert_return_invoke(&result_object);
    l2047_assert_return_invoke(&result_object);
    l2048_assert_return_invoke(&result_object);
    l2049_assert_return_invoke(&result_object);
    l2050_assert_return_invoke(&result_object);
    l2051_assert_return_invoke(&result_object);
    l2052_assert_return_invoke(&result_object);
    l2053_assert_return_invoke(&result_object);
    l2054_assert_return_invoke(&result_object);
    l2055_assert_return_invoke(&result_object);
    l2056_assert_return_invoke(&result_object);
    l2057_assert_return_invoke(&result_object);
    l2058_assert_return_invoke(&result_object);
    l2059_assert_return_invoke(&result_object);
    l2060_assert_return_invoke(&result_object);
    l2061_assert_return_invoke(&result_object);
    l2062_assert_return_invoke(&result_object);
    l2063_assert_return_invoke(&result_object);
    l2064_assert_return_invoke(&result_object);
    l2065_assert_return_invoke(&result_object);
    l2066_assert_return_invoke(&result_object);
    l2067_assert_return_invoke(&result_object);
    l2068_assert_return_invoke(&result_object);
    l2069_assert_return_invoke(&result_object);
    l2070_assert_return_invoke(&result_object);
    l2071_assert_return_invoke(&result_object);
    l2072_assert_return_invoke(&result_object);
    l2073_assert_return_invoke(&result_object);
    l2074_assert_return_invoke(&result_object);
    l2075_assert_return_invoke(&result_object);
    l2076_assert_return_invoke(&result_object);
    l2077_assert_return_invoke(&result_object);
    l2078_assert_return_invoke(&result_object);
    l2079_assert_return_invoke(&result_object);
    l2080_assert_return_invoke(&result_object);
    l2081_assert_return_invoke(&result_object);
    l2082_assert_return_invoke(&result_object);
    l2083_assert_return_invoke(&result_object);
    l2084_assert_return_invoke(&result_object);
    l2085_assert_return_invoke(&result_object);
    l2086_assert_return_invoke(&result_object);
    l2087_assert_return_invoke(&result_object);
    l2088_assert_return_invoke(&result_object);
    l2089_assert_return_invoke(&result_object);
    l2090_assert_return_invoke(&result_object);
    l2091_assert_return_invoke(&result_object);
    l2092_assert_return_invoke(&result_object);
    l2093_assert_return_invoke(&result_object);
    l2094_assert_return_invoke(&result_object);
    l2095_assert_return_invoke(&result_object);
    l2096_assert_return_invoke(&result_object);
    l2097_assert_return_invoke(&result_object);
    l2098_assert_return_invoke(&result_object);
    l2099_assert_return_invoke(&result_object);
    l2100_assert_return_invoke(&result_object);
    l2101_assert_return_invoke(&result_object);
    l2102_assert_return_invoke(&result_object);
    l2103_assert_return_invoke(&result_object);
    l2104_assert_return_invoke(&result_object);
    l2105_assert_return_invoke(&result_object);
    l2106_assert_return_invoke(&result_object);
    l2107_assert_return_invoke(&result_object);
    l2108_assert_return_invoke(&result_object);
    l2109_assert_return_invoke(&result_object);
    l2110_assert_return_invoke(&result_object);
    l2111_assert_return_invoke(&result_object);
    l2112_assert_return_invoke(&result_object);
    l2113_assert_return_invoke(&result_object);
    l2114_assert_return_invoke(&result_object);
    l2115_assert_return_invoke(&result_object);
    l2116_assert_return_invoke(&result_object);
    l2117_assert_return_invoke(&result_object);
    l2118_assert_return_invoke(&result_object);
    l2119_assert_return_invoke(&result_object);
    l2120_assert_return_invoke(&result_object);
    l2121_assert_return_invoke(&result_object);
    l2122_assert_return_invoke(&result_object);
    l2123_assert_return_invoke(&result_object);
    l2124_assert_return_invoke(&result_object);
    l2125_assert_return_invoke(&result_object);
    l2126_assert_return_invoke(&result_object);
    l2127_assert_return_invoke(&result_object);
    l2128_assert_return_invoke(&result_object);
    l2129_assert_return_invoke(&result_object);
    l2130_assert_return_invoke(&result_object);
    l2131_assert_return_invoke(&result_object);
    l2132_assert_return_invoke(&result_object);
    l2133_assert_return_invoke(&result_object);
    l2134_assert_return_invoke(&result_object);
    l2135_assert_return_invoke(&result_object);
    l2136_assert_return_invoke(&result_object);
    l2137_assert_return_invoke(&result_object);
    l2138_assert_return_invoke(&result_object);
    l2139_assert_return_invoke(&result_object);
    l2140_assert_return_invoke(&result_object);
    l2141_assert_return_invoke(&result_object);
    l2142_assert_return_invoke(&result_object);
    l2143_assert_return_invoke(&result_object);
    l2144_assert_return_invoke(&result_object);
    l2145_assert_return_invoke(&result_object);
    l2146_assert_return_invoke(&result_object);
    l2147_assert_return_invoke(&result_object);
    l2148_assert_return_invoke(&result_object);
    l2149_assert_return_invoke(&result_object);
    l2150_assert_return_invoke(&result_object);
    l2151_assert_return_invoke(&result_object);
    l2152_assert_return_invoke(&result_object);
    l2153_assert_return_invoke(&result_object);
    l2154_assert_return_invoke(&result_object);
    l2155_assert_return_invoke(&result_object);
    l2156_assert_return_invoke(&result_object);
    l2157_assert_return_invoke(&result_object);
    l2158_assert_return_invoke(&result_object);
    l2159_assert_return_invoke(&result_object);
    l2160_assert_return_invoke(&result_object);
    l2161_assert_return_invoke(&result_object);
    l2162_assert_return_invoke(&result_object);
    l2163_assert_return_invoke(&result_object);
    l2164_assert_return_invoke(&result_object);
    l2165_assert_return_invoke(&result_object);
    l2166_assert_return_invoke(&result_object);
    l2167_assert_return_invoke(&result_object);
    l2168_assert_return_invoke(&result_object);
    l2169_assert_return_invoke(&result_object);
    l2170_assert_return_invoke(&result_object);
    l2171_assert_return_invoke(&result_object);
    l2172_assert_return_invoke(&result_object);
    l2173_assert_return_invoke(&result_object);
    l2174_assert_return_invoke(&result_object);
    l2175_assert_return_invoke(&result_object);
    l2176_assert_return_invoke(&result_object);
    l2177_assert_return_invoke(&result_object);
    l2178_assert_return_invoke(&result_object);
    l2179_assert_return_invoke(&result_object);
    l2180_assert_return_invoke(&result_object);
    l2181_assert_return_invoke(&result_object);
    l2182_assert_return_invoke(&result_object);
    l2183_assert_return_invoke(&result_object);
    l2184_assert_return_invoke(&result_object);
    l2185_assert_return_invoke(&result_object);
    l2186_assert_return_invoke(&result_object);
    l2187_assert_return_invoke(&result_object);
    l2188_assert_return_invoke(&result_object);
    l2189_assert_return_invoke(&result_object);
    l2190_assert_return_invoke(&result_object);
    l2191_assert_return_invoke(&result_object);
    l2192_assert_return_invoke(&result_object);
    l2193_assert_return_invoke(&result_object);
    l2194_assert_return_invoke(&result_object);
    l2195_assert_return_invoke(&result_object);
    l2196_assert_return_invoke(&result_object);
    l2197_assert_return_invoke(&result_object);
    l2198_assert_return_invoke(&result_object);
    l2199_assert_return_invoke(&result_object);
    l2200_assert_return_invoke(&result_object);
    l2201_assert_return_invoke(&result_object);
    l2202_assert_return_invoke(&result_object);
    l2203_assert_return_invoke(&result_object);
    l2204_assert_return_invoke(&result_object);
    l2205_assert_return_invoke(&result_object);
    l2206_assert_return_invoke(&result_object);
    l2207_assert_return_invoke(&result_object);
    l2208_assert_return_invoke(&result_object);
    l2209_assert_return_invoke(&result_object);
    l2210_assert_return_invoke(&result_object);
    l2211_assert_return_invoke(&result_object);
    l2212_assert_return_invoke(&result_object);
    l2213_assert_return_invoke(&result_object);
    l2214_assert_return_invoke(&result_object);
    l2215_assert_return_invoke(&result_object);
    l2216_assert_return_invoke(&result_object);
    l2217_assert_return_invoke(&result_object);
    l2218_assert_return_invoke(&result_object);
    l2219_assert_return_invoke(&result_object);
    l2220_assert_return_invoke(&result_object);
    l2221_assert_return_invoke(&result_object);
    l2222_assert_return_invoke(&result_object);
    l2223_assert_return_invoke(&result_object);
    l2224_assert_return_invoke(&result_object);
    l2225_assert_return_invoke(&result_object);
    l2226_assert_return_invoke(&result_object);
    l2227_assert_return_invoke(&result_object);
    l2228_assert_return_invoke(&result_object);
    l2229_assert_return_invoke(&result_object);
    l2230_assert_return_invoke(&result_object);
    l2231_assert_return_invoke(&result_object);
    l2232_assert_return_invoke(&result_object);
    l2233_assert_return_invoke(&result_object);
    l2234_assert_return_invoke(&result_object);
    l2235_assert_return_invoke(&result_object);
    l2236_assert_return_invoke(&result_object);
    l2237_assert_return_invoke(&result_object);
    l2238_assert_return_invoke(&result_object);
    l2239_assert_return_invoke(&result_object);
    l2240_assert_return_invoke(&result_object);
    l2241_assert_return_invoke(&result_object);
    l2242_assert_return_invoke(&result_object);
    l2243_assert_return_invoke(&result_object);
    l2244_assert_return_invoke(&result_object);
    l2245_assert_return_invoke(&result_object);
    l2246_assert_return_invoke(&result_object);
    l2247_assert_return_invoke(&result_object);
    l2248_assert_return_invoke(&result_object);
    l2249_assert_return_invoke(&result_object);
    l2250_assert_return_invoke(&result_object);
    l2251_assert_return_invoke(&result_object);
    l2252_assert_return_invoke(&result_object);
    l2253_assert_return_invoke(&result_object);
    l2254_assert_return_invoke(&result_object);
    l2255_assert_return_invoke(&result_object);
    l2256_assert_return_invoke(&result_object);
    l2257_assert_return_invoke(&result_object);
    l2258_assert_return_invoke(&result_object);
    l2259_assert_return_invoke(&result_object);
    l2260_assert_return_invoke(&result_object);
    l2261_assert_return_invoke(&result_object);
    l2262_assert_return_invoke(&result_object);
    l2263_assert_return_invoke(&result_object);
    l2264_assert_return_invoke(&result_object);
    l2265_assert_return_invoke(&result_object);
    l2266_assert_return_invoke(&result_object);
    l2267_assert_return_invoke(&result_object);
    l2268_assert_return_invoke(&result_object);
    l2269_assert_return_invoke(&result_object);
    l2270_assert_return_invoke(&result_object);
    l2271_assert_return_invoke(&result_object);
    l2272_assert_return_invoke(&result_object);
    l2273_assert_return_invoke(&result_object);
    l2274_assert_return_invoke(&result_object);
    l2275_assert_return_invoke(&result_object);
    l2276_assert_return_invoke(&result_object);
    l2277_assert_return_invoke(&result_object);
    l2278_assert_return_invoke(&result_object);
    l2279_assert_return_invoke(&result_object);
    l2280_assert_return_invoke(&result_object);
    l2281_assert_return_invoke(&result_object);
    l2282_assert_return_invoke(&result_object);
    l2283_assert_return_invoke(&result_object);
    l2284_assert_return_invoke(&result_object);
    l2285_assert_return_invoke(&result_object);
    l2286_assert_return_invoke(&result_object);
    l2287_assert_return_invoke(&result_object);
    l2288_assert_return_invoke(&result_object);
    l2289_assert_return_invoke(&result_object);
    l2290_assert_return_invoke(&result_object);
    l2291_assert_return_invoke(&result_object);
    l2292_assert_return_invoke(&result_object);
    l2293_assert_return_invoke(&result_object);
    l2294_assert_return_invoke(&result_object);
    l2295_assert_return_invoke(&result_object);
    l2296_assert_return_invoke(&result_object);
    l2297_assert_return_invoke(&result_object);
    l2298_assert_return_invoke(&result_object);
    l2299_assert_return_invoke(&result_object);
    l2300_assert_return_invoke(&result_object);
    l2301_assert_return_invoke(&result_object);
    l2302_assert_return_invoke(&result_object);
    l2303_assert_return_invoke(&result_object);
    l2304_assert_return_invoke(&result_object);
    l2305_assert_return_invoke(&result_object);
    l2306_assert_return_invoke(&result_object);
    l2307_assert_return_invoke(&result_object);
    l2308_assert_return_invoke(&result_object);
    l2309_assert_return_invoke(&result_object);
    l2310_assert_return_invoke(&result_object);
    l2311_assert_return_invoke(&result_object);
    l2312_assert_return_invoke(&result_object);
    l2313_assert_return_invoke(&result_object);
    l2314_assert_return_invoke(&result_object);
    l2315_assert_return_invoke(&result_object);
    l2316_assert_return_invoke(&result_object);
    l2317_assert_return_invoke(&result_object);
    l2318_assert_return_invoke(&result_object);
    l2319_assert_return_invoke(&result_object);
    l2320_assert_return_invoke(&result_object);
    l2321_assert_return_invoke(&result_object);
    l2322_assert_return_invoke(&result_object);
    l2323_assert_return_invoke(&result_object);
    l2324_assert_return_invoke(&result_object);
    l2325_assert_return_invoke(&result_object);
    l2326_assert_return_invoke(&result_object);
    l2327_assert_return_invoke(&result_object);
    l2328_assert_return_invoke(&result_object);
    l2329_assert_return_invoke(&result_object);
    l2330_assert_return_invoke(&result_object);
    l2331_assert_return_invoke(&result_object);
    l2332_assert_return_invoke(&result_object);
    l2333_assert_return_invoke(&result_object);
    l2334_assert_return_invoke(&result_object);
    l2335_assert_return_invoke(&result_object);
    l2336_assert_return_invoke(&result_object);
    l2337_assert_return_invoke(&result_object);
    l2338_assert_return_invoke(&result_object);
    l2339_assert_return_invoke(&result_object);
    l2340_assert_return_invoke(&result_object);
    l2341_assert_return_invoke(&result_object);
    l2342_assert_return_invoke(&result_object);
    l2343_assert_return_invoke(&result_object);
    l2344_assert_return_invoke(&result_object);
    l2345_assert_return_invoke(&result_object);
    l2346_assert_return_invoke(&result_object);
    l2347_assert_return_invoke(&result_object);
    l2348_assert_return_invoke(&result_object);
    l2349_assert_return_invoke(&result_object);
    l2350_assert_return_invoke(&result_object);
    l2351_assert_return_invoke(&result_object);
    l2352_assert_return_invoke(&result_object);
    l2353_assert_return_invoke(&result_object);
    l2354_assert_return_invoke(&result_object);
    l2355_assert_return_invoke(&result_object);
    l2356_assert_return_invoke(&result_object);
    l2357_assert_return_invoke(&result_object);
    l2358_assert_return_invoke(&result_object);
    l2359_assert_return_invoke(&result_object);
    l2360_assert_return_invoke(&result_object);
    l2361_assert_return_invoke(&result_object);
    l2362_assert_return_invoke(&result_object);
    l2363_assert_return_invoke(&result_object);
    l2364_assert_return_invoke(&result_object);
    l2365_assert_return_invoke(&result_object);
    l2366_assert_return_invoke(&result_object);
    l2367_assert_return_invoke(&result_object);
    l2368_assert_return_invoke(&result_object);
    l2369_assert_return_invoke(&result_object);
    l2370_assert_return_invoke(&result_object);
    l2371_assert_return_invoke(&result_object);
    l2372_assert_return_invoke(&result_object);
    l2373_assert_return_invoke(&result_object);
    l2374_assert_return_invoke(&result_object);
    l2375_assert_return_invoke(&result_object);
    l2376_assert_return_invoke(&result_object);
    l2377_assert_return_invoke(&result_object);
    l2378_assert_return_invoke(&result_object);
    l2379_assert_return_invoke(&result_object);
    l2380_assert_return_invoke(&result_object);
    l2381_assert_return_invoke(&result_object);
    l2382_assert_return_invoke(&result_object);
    l2383_assert_return_invoke(&result_object);
    l2384_assert_return_invoke(&result_object);
    l2385_assert_return_invoke(&result_object);
    l2386_assert_return_invoke(&result_object);
    l2387_assert_return_invoke(&result_object);
    l2388_assert_return_invoke(&result_object);
    l2389_assert_return_invoke(&result_object);
    l2390_assert_return_invoke(&result_object);
    l2391_assert_return_invoke(&result_object);
    l2392_assert_return_invoke(&result_object);
    l2393_assert_return_invoke(&result_object);
    l2394_assert_return_invoke(&result_object);
    l2395_assert_return_invoke(&result_object);
    l2396_assert_return_invoke(&result_object);
    l2397_assert_return_invoke(&result_object);
    l2398_assert_return_invoke(&result_object);
    l2399_assert_return_invoke(&result_object);
    l2400_assert_return_invoke(&result_object);
    l2401_assert_return_invoke(&result_object);
    l2402_assert_return_invoke(&result_object);
    l2403_assert_return_invoke(&result_object);
    l2404_assert_return_invoke(&result_object);
    l2405_assert_return_invoke(&result_object);
    l2406_assert_return_invoke(&result_object);
    l2407_assert_return_invoke(&result_object);
    l2408_assert_return_invoke(&result_object);
    l2409_assert_return_invoke(&result_object);
    l2410_assert_return_invoke(&result_object);
    l2411_assert_return_invoke(&result_object);
    l2412_assert_return_invoke(&result_object);
}
