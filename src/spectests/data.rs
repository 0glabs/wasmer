// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/data.wast
#![allow(
    warnings,
    dead_code
)]
use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, VmCtx, Export};
use super::_common::spectest_importobject;
use wabt::wat2wasm;


// Line 5
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (memory (;0;) 1)
      (data (i32.const 0) \"\")
      (data (i32.const 1) \"abcd\")
      (data (i32.const 0) \"\")
      (data (i32.const 0) \"abc\")
      (data (i32.const 0) \"\")
      (data (i32.const 1) \"abcd\")
      (data (i32.const 0) \"\")
      (data (i32.const 0) \"abc\")
      (data (i32.const 0) \"\")
      (data (i32.const 1) \"abcd\")
      (data (i32.const 0) \"\")
      (data (i32.const 0) \"abc\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 23
fn create_module_2() -> ResultObject {
    let module_str = "(module
      (memory (;0;) 1)
      (data (i32.const 0) \"a\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 27
fn create_module_3() -> ResultObject {
    let module_str = "(module
      (import \"spectest\" \"memory\" (memory (;0;) 1))
      (data (i32.const 0) \"a\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 32
fn create_module_4() -> ResultObject {
    let module_str = "(module
      (memory (;0;) 1)
      (data (i32.const 0) \"a\")
      (data (i32.const 3) \"b\")
      (data (i32.const 100) \"cde\")
      (data (i32.const 5) \"x\")
      (data (i32.const 3) \"c\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 40
fn create_module_5() -> ResultObject {
    let module_str = "(module
      (import \"spectest\" \"memory\" (memory (;0;) 1))
      (data (i32.const 0) \"a\")
      (data (i32.const 1) \"b\")
      (data (i32.const 2) \"cde\")
      (data (i32.const 3) \"f\")
      (data (i32.const 2) \"g\")
      (data (i32.const 1) \"h\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 50
fn create_module_6() -> ResultObject {
    let module_str = "(module
      (import \"spectest\" \"global_i32\" (global (;0;) i32))
      (memory (;0;) 1)
      (data (get_global 0) \"a\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 55
fn create_module_7() -> ResultObject {
    let module_str = "(module
      (import \"spectest\" \"global_i32\" (global (;0;) i32))
      (import \"spectest\" \"memory\" (memory (;0;) 1))
      (data (get_global 0) \"a\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 61
fn create_module_8() -> ResultObject {
    let module_str = "(module
      (import \"spectest\" \"global_i32\" (global (;0;) i32))
      (memory (;0;) 1)
      (data (get_global 0) \"a\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 66
fn create_module_9() -> ResultObject {
    let module_str = "(module
      (import \"spectest\" \"global_i32\" (global (;0;) i32))
      (import \"spectest\" \"memory\" (memory (;0;) 1))
      (data (get_global 0) \"a\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 78
fn create_module_10() -> ResultObject {
    let module_str = "(module
      (memory (;0;) 1)
      (data (i32.const 0) \"a\")
      (data (i32.const 65535) \"b\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 83
fn create_module_11() -> ResultObject {
    let module_str = "(module
      (import \"spectest\" \"memory\" (memory (;0;) 1))
      (data (i32.const 0) \"a\")
      (data (i32.const 65535) \"b\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 89
fn create_module_12() -> ResultObject {
    let module_str = "(module
      (memory (;0;) 2)
      (data (i32.const 131071) \"a\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 94
fn create_module_13() -> ResultObject {
    let module_str = "(module
      (memory (;0;) 0)
      (data (i32.const 0) \"\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 98
fn create_module_14() -> ResultObject {
    let module_str = "(module
      (import \"spectest\" \"memory\" (memory (;0;) 0))
      (data (i32.const 0) \"\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 103
fn create_module_15() -> ResultObject {
    let module_str = "(module
      (memory (;0;) 0 0)
      (data (i32.const 0) \"\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 108
fn create_module_16() -> ResultObject {
    let module_str = "(module
      (memory (;0;) 1)
      (data (i32.const 65536) \"\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 113
fn create_module_17() -> ResultObject {
    let module_str = "(module
      (memory (;0;) 0)
      (data (i32.const 0) \"\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 117
fn create_module_18() -> ResultObject {
    let module_str = "(module
      (import \"spectest\" \"memory\" (memory (;0;) 0))
      (data (i32.const 0) \"\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 122
fn create_module_19() -> ResultObject {
    let module_str = "(module
      (memory (;0;) 0 0)
      (data (i32.const 0) \"\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 127
fn create_module_20() -> ResultObject {
    let module_str = "(module
      (import \"spectest\" \"memory\" (memory (;0;) 0))
      (data (i32.const 0) \"a\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 132
fn create_module_21() -> ResultObject {
    let module_str = "(module
      (import \"spectest\" \"memory\" (memory (;0;) 0 3))
      (data (i32.const 0) \"a\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 137
fn create_module_22() -> ResultObject {
    let module_str = "(module
      (import \"spectest\" \"global_i32\" (global (;0;) i32))
      (import \"spectest\" \"memory\" (memory (;0;) 0))
      (data (get_global 0) \"a\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 143
fn create_module_23() -> ResultObject {
    let module_str = "(module
      (import \"spectest\" \"global_i32\" (global (;0;) i32))
      (import \"spectest\" \"memory\" (memory (;0;) 0 3))
      (data (get_global 0) \"a\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 149
fn create_module_24() -> ResultObject {
    let module_str = "(module
      (import \"spectest\" \"memory\" (memory (;0;) 0))
      (data (i32.const 1) \"a\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 154
fn create_module_25() -> ResultObject {
    let module_str = "(module
      (import \"spectest\" \"memory\" (memory (;0;) 0 3))
      (data (i32.const 1) \"a\"))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 162

// Line 170

// Line 178

// Line 186

// Line 194

// Line 211

// Line 220

// Line 227

// Line 235

// Line 243

// Line 251

// Line 258

// Line 266

// Line 273

// Line 283
#[test]
fn c39_l283_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 11, 6, 1, 0, 65, 0, 11, 0];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 292
#[test]
fn c40_l292_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 5, 3, 1, 0, 1, 11, 6, 1, 0, 66, 0, 11, 0];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 300
#[test]
fn c41_l300_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 5, 3, 1, 0, 1, 11, 7, 1, 0, 65, 0, 104, 11, 0];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 308
#[test]
fn c42_l308_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 5, 3, 1, 0, 1, 11, 5, 1, 0, 1, 11, 0];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 316
#[test]
fn c43_l316_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 5, 3, 1, 0, 1, 11, 7, 1, 0, 1, 65, 0, 11, 0];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 324
#[test]
fn c44_l324_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 5, 3, 1, 0, 1, 11, 7, 1, 0, 65, 0, 1, 11, 0];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}
