// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/func_ptrs.wast
#![allow(
    warnings,
    dead_code
)]
use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, VmCtx, Export};
use super::_common::spectest_importobject;
use wabt::wat2wasm;


// Line 1
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func))
      (type (;1;) (func))
      (type (;2;) (func))
      (type (;3;) (func (result i32)))
      (type (;4;) (func (result i32)))
      (type (;5;) (func (param i32) (result i32)))
      (type (;6;) (func (param i32)))
      (import \"spectest\" \"print_i32\" (func (;0;) (type 6)))
      (func (;1;) (type 0))
      (func (;2;) (type 1))
      (func (;3;) (type 4) (result i32)
        i32.const 13)
      (func (;4;) (type 5) (param i32) (result i32)
        get_local 0
        i32.const 1
        i32.add)
      (func (;5;) (type 5) (param i32) (result i32)
        get_local 0
        i32.const 2
        i32.sub)
      (func (;6;) (type 6) (param i32)
        get_local 0
        call 0)
      (export \"one\" (func 3))
      (export \"two\" (func 4))
      (export \"three\" (func 5))
      (export \"four\" (func 6)))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 27
fn l27_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l27_action_invoke");
    let func_index = match result_object.module.info.exports.get("one") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&vm_context);
    assert_eq!(result, 13 as i32);
}

// Line 28
fn l28_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l28_action_invoke");
    let func_index = match result_object.module.info.exports.get("two") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(13 as i32, &vm_context);
    assert_eq!(result, 14 as i32);
}

// Line 29
fn l29_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l29_action_invoke");
    let func_index = match result_object.module.info.exports.get("three") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(13 as i32, &vm_context);
    assert_eq!(result, 11 as i32);
}

// Line 30
fn l30_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l30_action_invoke");
    let func_index = match result_object.module.info.exports.get("four") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(83 as i32, &vm_context);
    
}

// Line 32
#[test]
fn l32_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 9, 6, 1, 0, 65, 0, 11, 0];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 33
#[test]
fn l33_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 9, 7, 1, 0, 65, 0, 11, 1, 0, 10, 4, 1, 2, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 36
#[test]
fn l36_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 4, 4, 1, 112, 0, 1, 9, 6, 1, 0, 66, 0, 11, 0];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 40
#[test]
fn l40_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 4, 4, 1, 112, 0, 1, 9, 7, 1, 0, 65, 0, 104, 11, 0];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 44
#[test]
fn l44_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 4, 4, 1, 112, 0, 1, 9, 5, 1, 0, 1, 11, 0];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 48
#[test]
fn l48_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 3, 2, 1, 42, 10, 4, 1, 2, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 49
#[test]
fn l49_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 2, 22, 1, 8, 115, 112, 101, 99, 116, 101, 115, 116, 9, 112, 114, 105, 110, 116, 95, 105, 51, 50, 0, 43];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 51

#[test]
fn test_module_1() {
    let result_object = create_module_1();
    let vm_context = result_object.instance.generate_context();
    // We group the calls together
    l27_action_invoke(&result_object, &vm_context);
    l28_action_invoke(&result_object, &vm_context);
    l29_action_invoke(&result_object, &vm_context);
    l30_action_invoke(&result_object, &vm_context);
}
fn create_module_2() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (result i32)))
      (type (;1;) (func (result i32)))
      (type (;2;) (func (param i32) (result i32)))
      (func (;0;) (type 0) (result i32)
        i32.const 1)
      (func (;1;) (type 0) (result i32)
        i32.const 2)
      (func (;2;) (type 0) (result i32)
        i32.const 3)
      (func (;3;) (type 1) (result i32)
        i32.const 4)
      (func (;4;) (type 1) (result i32)
        i32.const 5)
      (func (;5;) (type 2) (param i32) (result i32)
        get_local 0
        call_indirect (type 0))
      (func (;6;) (type 2) (param i32) (result i32)
        get_local 0
        call_indirect (type 1))
      (table (;0;) 7 7 anyfunc)
      (export \"callt\" (func 5))
      (export \"callu\" (func 6))
      (elem (i32.const 0) 0 1 2 3 4 0 2))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 71
fn l71_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l71_action_invoke");
    let func_index = match result_object.module.info.exports.get("callt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 72
fn l72_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l72_action_invoke");
    let func_index = match result_object.module.info.exports.get("callt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 73
fn l73_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l73_action_invoke");
    let func_index = match result_object.module.info.exports.get("callt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2 as i32, &vm_context);
    assert_eq!(result, 3 as i32);
}

// Line 74
fn l74_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l74_action_invoke");
    let func_index = match result_object.module.info.exports.get("callt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(3 as i32, &vm_context);
    assert_eq!(result, 4 as i32);
}

// Line 75
fn l75_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l75_action_invoke");
    let func_index = match result_object.module.info.exports.get("callt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4 as i32, &vm_context);
    assert_eq!(result, 5 as i32);
}

// Line 76
fn l76_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l76_action_invoke");
    let func_index = match result_object.module.info.exports.get("callt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 77
fn l77_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l77_action_invoke");
    let func_index = match result_object.module.info.exports.get("callt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6 as i32, &vm_context);
    assert_eq!(result, 3 as i32);
}

// Line 78

// Line 79

// Line 80

// Line 82
fn l82_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l82_action_invoke");
    let func_index = match result_object.module.info.exports.get("callu") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 83
fn l83_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l83_action_invoke");
    let func_index = match result_object.module.info.exports.get("callu") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

// Line 84
fn l84_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l84_action_invoke");
    let func_index = match result_object.module.info.exports.get("callu") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2 as i32, &vm_context);
    assert_eq!(result, 3 as i32);
}

// Line 85
fn l85_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l85_action_invoke");
    let func_index = match result_object.module.info.exports.get("callu") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(3 as i32, &vm_context);
    assert_eq!(result, 4 as i32);
}

// Line 86
fn l86_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l86_action_invoke");
    let func_index = match result_object.module.info.exports.get("callu") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4 as i32, &vm_context);
    assert_eq!(result, 5 as i32);
}

// Line 87
fn l87_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l87_action_invoke");
    let func_index = match result_object.module.info.exports.get("callu") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 88
fn l88_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l88_action_invoke");
    let func_index = match result_object.module.info.exports.get("callu") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6 as i32, &vm_context);
    assert_eq!(result, 3 as i32);
}

// Line 89

// Line 90

// Line 91

// Line 93

#[test]
fn test_module_2() {
    let result_object = create_module_2();
    let vm_context = result_object.instance.generate_context();
    // We group the calls together
    l71_action_invoke(&result_object, &vm_context);
    l72_action_invoke(&result_object, &vm_context);
    l73_action_invoke(&result_object, &vm_context);
    l74_action_invoke(&result_object, &vm_context);
    l75_action_invoke(&result_object, &vm_context);
    l76_action_invoke(&result_object, &vm_context);
    l77_action_invoke(&result_object, &vm_context);
    l82_action_invoke(&result_object, &vm_context);
    l83_action_invoke(&result_object, &vm_context);
    l84_action_invoke(&result_object, &vm_context);
    l85_action_invoke(&result_object, &vm_context);
    l86_action_invoke(&result_object, &vm_context);
    l87_action_invoke(&result_object, &vm_context);
    l88_action_invoke(&result_object, &vm_context);
}
fn create_module_3() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (result i32)))
      (type (;1;) (func (param i32) (result i32)))
      (func (;0;) (type 0) (result i32)
        i32.const 1)
      (func (;1;) (type 0) (result i32)
        i32.const 2)
      (func (;2;) (type 1) (param i32) (result i32)
        get_local 0
        call_indirect (type 0))
      (table (;0;) 2 2 anyfunc)
      (export \"callt\" (func 2))
      (elem (i32.const 0) 0 1))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 105
fn l105_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l105_action_invoke");
    let func_index = match result_object.module.info.exports.get("callt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 106
fn l106_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l106_action_invoke");
    let func_index = match result_object.module.info.exports.get("callt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &vm_context);
    assert_eq!(result, 2 as i32);
}

#[test]
fn test_module_3() {
    let result_object = create_module_3();
    let vm_context = result_object.instance.generate_context();
    // We group the calls together
    l105_action_invoke(&result_object, &vm_context);
    l106_action_invoke(&result_object, &vm_context);
}
