// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/i64_.wast
#![allow(
    warnings,
    dead_code
)]
use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, VmCtx, Export};
use super::_common::spectest_importobject;
use wabt::wat2wasm;


// Line 3
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param i64 i64) (result i64)))
      (type (;1;) (func (param i64) (result i64)))
      (type (;2;) (func (param i64) (result i32)))
      (type (;3;) (func (param i64 i64) (result i32)))
      (func (;0;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.add)
      (func (;1;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.sub)
      (func (;2;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.mul)
      (func (;3;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.div_s)
      (func (;4;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.div_u)
      (func (;5;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.rem_s)
      (func (;6;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.rem_u)
      (func (;7;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.and)
      (func (;8;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.or)
      (func (;9;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.xor)
      (func (;10;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.shl)
      (func (;11;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.shr_s)
      (func (;12;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.shr_u)
      (func (;13;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.rotl)
      (func (;14;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.rotr)
      (func (;15;) (type 1) (param i64) (result i64)
        get_local 0
        i64.clz)
      (func (;16;) (type 1) (param i64) (result i64)
        get_local 0
        i64.ctz)
      (func (;17;) (type 1) (param i64) (result i64)
        get_local 0
        i64.popcnt)
      (func (;18;) (type 2) (param i64) (result i32)
        get_local 0
        i64.eqz)
      (func (;19;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.eq)
      (func (;20;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.ne)
      (func (;21;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.lt_s)
      (func (;22;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.lt_u)
      (func (;23;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.le_s)
      (func (;24;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.le_u)
      (func (;25;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.gt_s)
      (func (;26;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.gt_u)
      (func (;27;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.ge_s)
      (func (;28;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.ge_u)
      (export \"add\" (func 0))
      (export \"sub\" (func 1))
      (export \"mul\" (func 2))
      (export \"div_s\" (func 3))
      (export \"div_u\" (func 4))
      (export \"rem_s\" (func 5))
      (export \"rem_u\" (func 6))
      (export \"and\" (func 7))
      (export \"or\" (func 8))
      (export \"xor\" (func 9))
      (export \"shl\" (func 10))
      (export \"shr_s\" (func 11))
      (export \"shr_u\" (func 12))
      (export \"rotl\" (func 13))
      (export \"rotr\" (func 14))
      (export \"clz\" (func 15))
      (export \"ctz\" (func 16))
      (export \"popcnt\" (func 17))
      (export \"eqz\" (func 18))
      (export \"eq\" (func 19))
      (export \"ne\" (func 20))
      (export \"lt_s\" (func 21))
      (export \"lt_u\" (func 22))
      (export \"le_s\" (func 23))
      (export \"le_u\" (func 24))
      (export \"gt_s\" (func 25))
      (export \"gt_u\" (func 26))
      (export \"ge_s\" (func 27))
      (export \"ge_u\" (func 28)))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

// Line 35
fn l35_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l35_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 2 as i64);
}

// Line 36
fn l36_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l36_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 37
fn l37_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l37_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, -2 as i64);
}

// Line 38
fn l38_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l38_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 39
fn l39_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l39_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 1 as i64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 40
fn l40_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l40_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 9223372036854775807 as i64);
}

// Line 41
fn l41_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l41_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 42
fn l42_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l42_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1073741823 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1073741824 as i64);
}

// Line 44
fn l44_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l44_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 45
fn l45_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l45_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 46
fn l46_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l46_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 47
fn l47_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l47_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -1 as i64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 48
fn l48_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l48_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 9223372036854775807 as i64);
}

// Line 49
fn l49_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l49_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 50
fn l50_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l50_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1073741823 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 1073741824 as i64);
}

// Line 52
fn l52_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l52_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 53
fn l53_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l53_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 54
fn l54_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l54_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 55
fn l55_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l55_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1152921504606846976 as i64, 4096 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 56
fn l56_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l56_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 57
fn l57_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l57_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 58
fn l58_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l58_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -1 as i64, &vm_context);
    assert_eq!(result, -9223372036854775807 as i64);
}

// Line 59
fn l59_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l59_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(81985529216486895 as i64, -81985529216486896 as i64, &vm_context);
    assert_eq!(result, 2465395958572223728 as i64);
}

// Line 60
fn l60_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l60_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 62

// Line 63

// Line 64

// Line 65
fn l65_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l65_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 66
fn l66_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l66_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 67
fn l67_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l67_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 68
fn l68_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l68_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 69
fn l69_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l69_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 2 as i64, &vm_context);
    assert_eq!(result, -4611686018427387904 as i64);
}

// Line 70
fn l70_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l70_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775807 as i64, 1000 as i64, &vm_context);
    assert_eq!(result, -9223372036854775 as i64);
}

// Line 71
fn l71_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l71_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i64, 2 as i64, &vm_context);
    assert_eq!(result, 2 as i64);
}

// Line 72
fn l72_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l72_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-5 as i64, 2 as i64, &vm_context);
    assert_eq!(result, -2 as i64);
}

// Line 73
fn l73_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l73_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i64, -2 as i64, &vm_context);
    assert_eq!(result, -2 as i64);
}

// Line 74
fn l74_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l74_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-5 as i64, -2 as i64, &vm_context);
    assert_eq!(result, 2 as i64);
}

// Line 75
fn l75_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l75_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(7 as i64, 3 as i64, &vm_context);
    assert_eq!(result, 2 as i64);
}

// Line 76
fn l76_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l76_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-7 as i64, 3 as i64, &vm_context);
    assert_eq!(result, -2 as i64);
}

// Line 77
fn l77_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l77_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(7 as i64, -3 as i64, &vm_context);
    assert_eq!(result, -2 as i64);
}

// Line 78
fn l78_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l78_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-7 as i64, -3 as i64, &vm_context);
    assert_eq!(result, 2 as i64);
}

// Line 79
fn l79_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l79_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(11 as i64, 5 as i64, &vm_context);
    assert_eq!(result, 2 as i64);
}

// Line 80
fn l80_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l80_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(17 as i64, 7 as i64, &vm_context);
    assert_eq!(result, 2 as i64);
}

// Line 82

// Line 83

// Line 84
fn l84_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l84_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 85
fn l85_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l85_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 86
fn l86_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l86_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 87
fn l87_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l87_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 88
fn l88_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l88_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 2 as i64, &vm_context);
    assert_eq!(result, 4611686018427387904 as i64);
}

// Line 89
fn l89_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l89_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-8074936608141340688 as i64, 4294967297 as i64, &vm_context);
    assert_eq!(result, 2414874607 as i64);
}

// Line 90
fn l90_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l90_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775807 as i64, 1000 as i64, &vm_context);
    assert_eq!(result, 9223372036854775 as i64);
}

// Line 91
fn l91_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l91_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i64, 2 as i64, &vm_context);
    assert_eq!(result, 2 as i64);
}

// Line 92
fn l92_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l92_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-5 as i64, 2 as i64, &vm_context);
    assert_eq!(result, 9223372036854775805 as i64);
}

// Line 93
fn l93_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l93_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i64, -2 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 94
fn l94_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l94_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-5 as i64, -2 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 95
fn l95_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l95_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(7 as i64, 3 as i64, &vm_context);
    assert_eq!(result, 2 as i64);
}

// Line 96
fn l96_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l96_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(11 as i64, 5 as i64, &vm_context);
    assert_eq!(result, 2 as i64);
}

// Line 97
fn l97_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l97_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(17 as i64, 7 as i64, &vm_context);
    assert_eq!(result, 2 as i64);
}

// Line 99

// Line 100

// Line 101
fn l101_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l101_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 102
fn l102_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l102_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 103
fn l103_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l103_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 104
fn l104_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l104_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 105
fn l105_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l105_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 106
fn l106_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l106_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 107
fn l107_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l107_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 2 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 108
fn l108_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l108_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775807 as i64, 1000 as i64, &vm_context);
    assert_eq!(result, -807 as i64);
}

// Line 109
fn l109_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l109_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i64, 2 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 110
fn l110_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l110_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-5 as i64, 2 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 111
fn l111_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l111_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i64, -2 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 112
fn l112_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l112_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-5 as i64, -2 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 113
fn l113_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l113_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(7 as i64, 3 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 114
fn l114_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l114_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-7 as i64, 3 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 115
fn l115_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l115_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(7 as i64, -3 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 116
fn l116_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l116_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-7 as i64, -3 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 117
fn l117_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l117_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(11 as i64, 5 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 118
fn l118_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l118_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(17 as i64, 7 as i64, &vm_context);
    assert_eq!(result, 3 as i64);
}

// Line 120

// Line 121

// Line 122
fn l122_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l122_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 123
fn l123_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l123_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 124
fn l124_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l124_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 125
fn l125_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l125_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 126
fn l126_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l126_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 2 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 127
fn l127_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l127_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-8074936608141340688 as i64, 4294967297 as i64, &vm_context);
    assert_eq!(result, 2147483649 as i64);
}

// Line 128
fn l128_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l128_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775807 as i64, 1000 as i64, &vm_context);
    assert_eq!(result, 809 as i64);
}

// Line 129
fn l129_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l129_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i64, 2 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 130
fn l130_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l130_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-5 as i64, 2 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 131
fn l131_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l131_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i64, -2 as i64, &vm_context);
    assert_eq!(result, 5 as i64);
}

// Line 132
fn l132_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l132_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-5 as i64, -2 as i64, &vm_context);
    assert_eq!(result, -5 as i64);
}

// Line 133
fn l133_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l133_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(7 as i64, 3 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 134
fn l134_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l134_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(11 as i64, 5 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 135
fn l135_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l135_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(17 as i64, 7 as i64, &vm_context);
    assert_eq!(result, 3 as i64);
}

// Line 137
fn l137_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l137_action_invoke");
    let func_index = match result_object.module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 138
fn l138_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l138_action_invoke");
    let func_index = match result_object.module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 139
fn l139_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l139_action_invoke");
    let func_index = match result_object.module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 140
fn l140_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l140_action_invoke");
    let func_index = match result_object.module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 141
fn l141_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l141_action_invoke");
    let func_index = match result_object.module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 142
fn l142_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l142_action_invoke");
    let func_index = match result_object.module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 9223372036854775807 as i64);
}

// Line 143
fn l143_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l143_action_invoke");
    let func_index = match result_object.module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4042326015 as i64, 4294963440 as i64, &vm_context);
    assert_eq!(result, 4042322160 as i64);
}

// Line 144
fn l144_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l144_action_invoke");
    let func_index = match result_object.module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 146
fn l146_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l146_action_invoke");
    let func_index = match result_object.module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 147
fn l147_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l147_action_invoke");
    let func_index = match result_object.module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 148
fn l148_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l148_action_invoke");
    let func_index = match result_object.module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 149
fn l149_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l149_action_invoke");
    let func_index = match result_object.module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 150
fn l150_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l150_action_invoke");
    let func_index = match result_object.module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 151
fn l151_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l151_action_invoke");
    let func_index = match result_object.module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 152
fn l152_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l152_action_invoke");
    let func_index = match result_object.module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4042326015 as i64, 4294963440 as i64, &vm_context);
    assert_eq!(result, 4294967295 as i64);
}

// Line 153
fn l153_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l153_action_invoke");
    let func_index = match result_object.module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 155
fn l155_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l155_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 156
fn l156_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l156_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 157
fn l157_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l157_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 158
fn l158_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l158_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 159
fn l159_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l159_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 160
fn l160_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l160_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 161
fn l161_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l161_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 9223372036854775807 as i64);
}

// Line 162
fn l162_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l162_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 163
fn l163_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l163_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4042326015 as i64, 4294963440 as i64, &vm_context);
    assert_eq!(result, 252645135 as i64);
}

// Line 164
fn l164_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l164_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 166
fn l166_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l166_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 2 as i64);
}

// Line 167
fn l167_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l167_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 168
fn l168_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l168_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 1 as i64, &vm_context);
    assert_eq!(result, -2 as i64);
}

// Line 169
fn l169_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l169_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, -2 as i64);
}

// Line 170
fn l170_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l170_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 171
fn l171_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l171_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4611686018427387904 as i64, 1 as i64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 172
fn l172_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l172_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 63 as i64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 173
fn l173_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l173_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 64 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 174
fn l174_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l174_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 65 as i64, &vm_context);
    assert_eq!(result, 2 as i64);
}

// Line 175
fn l175_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l175_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 176
fn l176_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l176_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 178
fn l178_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l178_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 179
fn l179_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l179_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 180
fn l180_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l180_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 181
fn l181_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l181_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 4611686018427387903 as i64);
}

// Line 182
fn l182_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l182_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 1 as i64, &vm_context);
    assert_eq!(result, -4611686018427387904 as i64);
}

// Line 183
fn l183_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l183_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4611686018427387904 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 2305843009213693952 as i64);
}

// Line 184
fn l184_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l184_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 64 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 185
fn l185_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l185_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 65 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 186
fn l186_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l186_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 187
fn l187_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l187_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 188
fn l188_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l188_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 189
fn l189_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l189_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 63 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 190
fn l190_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l190_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 64 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 191
fn l191_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l191_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 65 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 192
fn l192_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l192_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 193
fn l193_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l193_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 194
fn l194_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l194_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 196
fn l196_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l196_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 197
fn l197_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l197_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 198
fn l198_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l198_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 9223372036854775807 as i64);
}

// Line 199
fn l199_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l199_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 4611686018427387903 as i64);
}

// Line 200
fn l200_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l200_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 4611686018427387904 as i64);
}

// Line 201
fn l201_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l201_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4611686018427387904 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 2305843009213693952 as i64);
}

// Line 202
fn l202_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l202_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 64 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 203
fn l203_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l203_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 65 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 204
fn l204_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l204_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 205
fn l205_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l205_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 206
fn l206_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l206_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 207
fn l207_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l207_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 63 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 208
fn l208_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l208_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 64 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 209
fn l209_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l209_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 65 as i64, &vm_context);
    assert_eq!(result, 9223372036854775807 as i64);
}

// Line 210
fn l210_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l210_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 211
fn l211_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l211_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 212
fn l212_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l212_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 214
fn l214_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l214_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 2 as i64);
}

// Line 215
fn l215_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l215_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 216
fn l216_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l216_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 217
fn l217_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l217_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 64 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 218
fn l218_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l218_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6067025490386449714 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 6312693092936652189 as i64);
}

// Line 219
fn l219_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l219_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-144115184384868352 as i64, 4 as i64, &vm_context);
    assert_eq!(result, -2305842950157893617 as i64);
}

// Line 220
fn l220_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l220_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6067173104435169271 as i64, 53 as i64, &vm_context);
    assert_eq!(result, 87109505680009935 as i64);
}

// Line 221
fn l221_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l221_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6066028401059725156 as i64, 63 as i64, &vm_context);
    assert_eq!(result, 6190357836324913230 as i64);
}

// Line 222
fn l222_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l222_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6067173104435169271 as i64, 245 as i64, &vm_context);
    assert_eq!(result, 87109505680009935 as i64);
}

// Line 223
fn l223_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l223_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6067067139002042359 as i64, -19 as i64, &vm_context);
    assert_eq!(result, -3530481836149793302 as i64);
}

// Line 224
fn l224_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l224_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6066028401059725156 as i64, -9223372036854775745 as i64, &vm_context);
    assert_eq!(result, 6190357836324913230 as i64);
}

// Line 225
fn l225_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l225_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 63 as i64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 226
fn l226_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l226_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 228
fn l228_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l228_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 229
fn l229_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l229_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 230
fn l230_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l230_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, -1 as i64);
}

// Line 231
fn l231_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l231_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 64 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 232
fn l232_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l232_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6067025490386449714 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 6189859291661550951 as i64);
}

// Line 233
fn l233_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l233_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-144115184384868352 as i64, 4 as i64, &vm_context);
    assert_eq!(result, 1143914305582792704 as i64);
}

// Line 234
fn l234_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l234_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6067173104435169271 as i64, 53 as i64, &vm_context);
    assert_eq!(result, 7534987797011123550 as i64);
}

// Line 235
fn l235_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l235_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6066028401059725156 as i64, 63 as i64, &vm_context);
    assert_eq!(result, 6314687271590101305 as i64);
}

// Line 236
fn l236_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l236_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6067173104435169271 as i64, 245 as i64, &vm_context);
    assert_eq!(result, 7534987797011123550 as i64);
}

// Line 237
fn l237_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l237_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6067067139002042359 as i64, -19 as i64, &vm_context);
    assert_eq!(result, -7735078922541506965 as i64);
}

// Line 238
fn l238_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l238_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6066028401059725156 as i64, -9223372036854775745 as i64, &vm_context);
    assert_eq!(result, 6314687271590101305 as i64);
}

// Line 239
fn l239_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l239_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 63 as i64, &vm_context);
    assert_eq!(result, 2 as i64);
}

// Line 240
fn l240_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l240_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 63 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 242
fn l242_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l242_action_invoke");
    let func_index = match result_object.module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 243
fn l243_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l243_action_invoke");
    let func_index = match result_object.module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 64 as i64);
}

// Line 244
fn l244_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l244_action_invoke");
    let func_index = match result_object.module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(32768 as i64, &vm_context);
    assert_eq!(result, 48 as i64);
}

// Line 245
fn l245_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l245_action_invoke");
    let func_index = match result_object.module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(255 as i64, &vm_context);
    assert_eq!(result, 56 as i64);
}

// Line 246
fn l246_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l246_action_invoke");
    let func_index = match result_object.module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 247
fn l247_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l247_action_invoke");
    let func_index = match result_object.module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &vm_context);
    assert_eq!(result, 63 as i64);
}

// Line 248
fn l248_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l248_action_invoke");
    let func_index = match result_object.module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2 as i64, &vm_context);
    assert_eq!(result, 62 as i64);
}

// Line 249
fn l249_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l249_action_invoke");
    let func_index = match result_object.module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 251
fn l251_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l251_action_invoke");
    let func_index = match result_object.module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 252
fn l252_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l252_action_invoke");
    let func_index = match result_object.module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 64 as i64);
}

// Line 253
fn l253_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l253_action_invoke");
    let func_index = match result_object.module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(32768 as i64, &vm_context);
    assert_eq!(result, 15 as i64);
}

// Line 254
fn l254_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l254_action_invoke");
    let func_index = match result_object.module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65536 as i64, &vm_context);
    assert_eq!(result, 16 as i64);
}

// Line 255
fn l255_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l255_action_invoke");
    let func_index = match result_object.module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 63 as i64);
}

// Line 256
fn l256_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l256_action_invoke");
    let func_index = match result_object.module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 258
fn l258_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l258_action_invoke");
    let func_index = match result_object.module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, 64 as i64);
}

// Line 259
fn l259_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l259_action_invoke");
    let func_index = match result_object.module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 0 as i64);
}

// Line 260
fn l260_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l260_action_invoke");
    let func_index = match result_object.module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(32768 as i64, &vm_context);
    assert_eq!(result, 1 as i64);
}

// Line 261
fn l261_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l261_action_invoke");
    let func_index = match result_object.module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223231297218904064 as i64, &vm_context);
    assert_eq!(result, 4 as i64);
}

// Line 262
fn l262_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l262_action_invoke");
    let func_index = match result_object.module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 63 as i64);
}

// Line 263
fn l263_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l263_action_invoke");
    let func_index = match result_object.module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6148914692668172971 as i64, &vm_context);
    assert_eq!(result, 32 as i64);
}

// Line 264
fn l264_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l264_action_invoke");
    let func_index = match result_object.module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-7378697629197489494 as i64, &vm_context);
    assert_eq!(result, 32 as i64);
}

// Line 265
fn l265_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l265_action_invoke");
    let func_index = match result_object.module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2401053088876216593 as i64, &vm_context);
    assert_eq!(result, 48 as i64);
}

// Line 267
fn l267_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l267_action_invoke");
    let func_index = match result_object.module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 268
fn l268_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l268_action_invoke");
    let func_index = match result_object.module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 269
fn l269_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l269_action_invoke");
    let func_index = match result_object.module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 270
fn l270_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l270_action_invoke");
    let func_index = match result_object.module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 271
fn l271_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l271_action_invoke");
    let func_index = match result_object.module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 273
fn l273_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l273_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 274
fn l274_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l274_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 275
fn l275_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l275_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 276
fn l276_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l276_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 277
fn l277_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l277_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 278
fn l278_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l278_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 279
fn l279_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l279_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 280
fn l280_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l280_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 281
fn l281_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l281_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 282
fn l282_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l282_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 283
fn l283_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l283_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 284
fn l284_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l284_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 285
fn l285_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l285_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 286
fn l286_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l286_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 288
fn l288_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l288_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 289
fn l289_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l289_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 290
fn l290_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l290_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 291
fn l291_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l291_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 292
fn l292_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l292_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 293
fn l293_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l293_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 294
fn l294_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l294_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 295
fn l295_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l295_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 296
fn l296_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l296_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 297
fn l297_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l297_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 298
fn l298_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l298_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 299
fn l299_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l299_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 300
fn l300_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l300_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 301
fn l301_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l301_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 303
fn l303_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l303_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 304
fn l304_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l304_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 305
fn l305_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l305_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 306
fn l306_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l306_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 307
fn l307_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l307_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 308
fn l308_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l308_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 309
fn l309_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l309_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 310
fn l310_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l310_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 311
fn l311_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l311_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 312
fn l312_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l312_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 313
fn l313_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l313_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 314
fn l314_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l314_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 315
fn l315_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l315_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 316
fn l316_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l316_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 318
fn l318_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l318_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 319
fn l319_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l319_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 320
fn l320_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l320_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 321
fn l321_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l321_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 322
fn l322_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l322_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 323
fn l323_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l323_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 324
fn l324_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l324_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 325
fn l325_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l325_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 326
fn l326_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l326_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 327
fn l327_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l327_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 328
fn l328_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l328_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 329
fn l329_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l329_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 330
fn l330_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l330_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 331
fn l331_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l331_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 333
fn l333_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l333_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 334
fn l334_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l334_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 335
fn l335_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l335_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 336
fn l336_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l336_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 337
fn l337_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l337_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 338
fn l338_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l338_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 339
fn l339_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l339_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 340
fn l340_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l340_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 341
fn l341_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l341_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 342
fn l342_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l342_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 343
fn l343_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l343_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 344
fn l344_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l344_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 345
fn l345_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l345_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 346
fn l346_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l346_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 348
fn l348_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l348_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 349
fn l349_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l349_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 350
fn l350_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l350_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 351
fn l351_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l351_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 352
fn l352_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l352_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 353
fn l353_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l353_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 354
fn l354_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l354_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 355
fn l355_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l355_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 356
fn l356_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l356_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 357
fn l357_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l357_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 358
fn l358_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l358_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 359
fn l359_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l359_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 360
fn l360_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l360_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 361
fn l361_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l361_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 363
fn l363_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l363_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 364
fn l364_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l364_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 365
fn l365_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l365_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 366
fn l366_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l366_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 367
fn l367_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l367_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 368
fn l368_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l368_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 369
fn l369_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l369_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 370
fn l370_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l370_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 371
fn l371_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l371_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 372
fn l372_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l372_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 373
fn l373_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l373_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 374
fn l374_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l374_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 375
fn l375_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l375_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 376
fn l376_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l376_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 378
fn l378_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l378_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 379
fn l379_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l379_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 380
fn l380_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l380_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 381
fn l381_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l381_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 382
fn l382_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l382_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 383
fn l383_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l383_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 384
fn l384_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l384_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 385
fn l385_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l385_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 386
fn l386_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l386_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 387
fn l387_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l387_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 388
fn l388_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l388_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 389
fn l389_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l389_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 390
fn l390_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l390_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 391
fn l391_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l391_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 393
fn l393_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l393_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 394
fn l394_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l394_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 395
fn l395_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l395_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 396
fn l396_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l396_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 397
fn l397_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l397_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 398
fn l398_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l398_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 399
fn l399_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l399_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 400
fn l400_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l400_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 401
fn l401_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l401_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 402
fn l402_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l402_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 403
fn l403_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l403_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 404
fn l404_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l404_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 405
fn l405_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l405_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 406
fn l406_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l406_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 408
fn l408_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l408_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 409
fn l409_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l409_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 410
fn l410_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l410_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 411
fn l411_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l411_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 412
fn l412_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l412_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 413
fn l413_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l413_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 414
fn l414_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l414_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 415
fn l415_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l415_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 416
fn l416_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l416_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 417
fn l417_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l417_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 418
fn l418_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l418_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

// Line 419
fn l419_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l419_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 420
fn l420_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l420_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &vm_context);
    assert_eq!(result, 1 as i32);
}

// Line 421
fn l421_action_invoke(result_object: &ResultObject, vm_context: &VmCtx) {
    println!("Executing function {}", "l421_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &VmCtx) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &vm_context);
    assert_eq!(result, 0 as i32);
}

#[test]
fn test_module_1() {
    let result_object = create_module_1();
    let vm_context = result_object.instance.generate_context();
    // We group the calls together
    l35_action_invoke(&result_object, &vm_context);
    l36_action_invoke(&result_object, &vm_context);
    l37_action_invoke(&result_object, &vm_context);
    l38_action_invoke(&result_object, &vm_context);
    l39_action_invoke(&result_object, &vm_context);
    l40_action_invoke(&result_object, &vm_context);
    l41_action_invoke(&result_object, &vm_context);
    l42_action_invoke(&result_object, &vm_context);
    l44_action_invoke(&result_object, &vm_context);
    l45_action_invoke(&result_object, &vm_context);
    l46_action_invoke(&result_object, &vm_context);
    l47_action_invoke(&result_object, &vm_context);
    l48_action_invoke(&result_object, &vm_context);
    l49_action_invoke(&result_object, &vm_context);
    l50_action_invoke(&result_object, &vm_context);
    l52_action_invoke(&result_object, &vm_context);
    l53_action_invoke(&result_object, &vm_context);
    l54_action_invoke(&result_object, &vm_context);
    l55_action_invoke(&result_object, &vm_context);
    l56_action_invoke(&result_object, &vm_context);
    l57_action_invoke(&result_object, &vm_context);
    l58_action_invoke(&result_object, &vm_context);
    l59_action_invoke(&result_object, &vm_context);
    l60_action_invoke(&result_object, &vm_context);
    l65_action_invoke(&result_object, &vm_context);
    l66_action_invoke(&result_object, &vm_context);
    l67_action_invoke(&result_object, &vm_context);
    l68_action_invoke(&result_object, &vm_context);
    l69_action_invoke(&result_object, &vm_context);
    l70_action_invoke(&result_object, &vm_context);
    l71_action_invoke(&result_object, &vm_context);
    l72_action_invoke(&result_object, &vm_context);
    l73_action_invoke(&result_object, &vm_context);
    l74_action_invoke(&result_object, &vm_context);
    l75_action_invoke(&result_object, &vm_context);
    l76_action_invoke(&result_object, &vm_context);
    l77_action_invoke(&result_object, &vm_context);
    l78_action_invoke(&result_object, &vm_context);
    l79_action_invoke(&result_object, &vm_context);
    l80_action_invoke(&result_object, &vm_context);
    l84_action_invoke(&result_object, &vm_context);
    l85_action_invoke(&result_object, &vm_context);
    l86_action_invoke(&result_object, &vm_context);
    l87_action_invoke(&result_object, &vm_context);
    l88_action_invoke(&result_object, &vm_context);
    l89_action_invoke(&result_object, &vm_context);
    l90_action_invoke(&result_object, &vm_context);
    l91_action_invoke(&result_object, &vm_context);
    l92_action_invoke(&result_object, &vm_context);
    l93_action_invoke(&result_object, &vm_context);
    l94_action_invoke(&result_object, &vm_context);
    l95_action_invoke(&result_object, &vm_context);
    l96_action_invoke(&result_object, &vm_context);
    l97_action_invoke(&result_object, &vm_context);
    l101_action_invoke(&result_object, &vm_context);
    l102_action_invoke(&result_object, &vm_context);
    l103_action_invoke(&result_object, &vm_context);
    l104_action_invoke(&result_object, &vm_context);
    l105_action_invoke(&result_object, &vm_context);
    l106_action_invoke(&result_object, &vm_context);
    l107_action_invoke(&result_object, &vm_context);
    l108_action_invoke(&result_object, &vm_context);
    l109_action_invoke(&result_object, &vm_context);
    l110_action_invoke(&result_object, &vm_context);
    l111_action_invoke(&result_object, &vm_context);
    l112_action_invoke(&result_object, &vm_context);
    l113_action_invoke(&result_object, &vm_context);
    l114_action_invoke(&result_object, &vm_context);
    l115_action_invoke(&result_object, &vm_context);
    l116_action_invoke(&result_object, &vm_context);
    l117_action_invoke(&result_object, &vm_context);
    l118_action_invoke(&result_object, &vm_context);
    l122_action_invoke(&result_object, &vm_context);
    l123_action_invoke(&result_object, &vm_context);
    l124_action_invoke(&result_object, &vm_context);
    l125_action_invoke(&result_object, &vm_context);
    l126_action_invoke(&result_object, &vm_context);
    l127_action_invoke(&result_object, &vm_context);
    l128_action_invoke(&result_object, &vm_context);
    l129_action_invoke(&result_object, &vm_context);
    l130_action_invoke(&result_object, &vm_context);
    l131_action_invoke(&result_object, &vm_context);
    l132_action_invoke(&result_object, &vm_context);
    l133_action_invoke(&result_object, &vm_context);
    l134_action_invoke(&result_object, &vm_context);
    l135_action_invoke(&result_object, &vm_context);
    l137_action_invoke(&result_object, &vm_context);
    l138_action_invoke(&result_object, &vm_context);
    l139_action_invoke(&result_object, &vm_context);
    l140_action_invoke(&result_object, &vm_context);
    l141_action_invoke(&result_object, &vm_context);
    l142_action_invoke(&result_object, &vm_context);
    l143_action_invoke(&result_object, &vm_context);
    l144_action_invoke(&result_object, &vm_context);
    l146_action_invoke(&result_object, &vm_context);
    l147_action_invoke(&result_object, &vm_context);
    l148_action_invoke(&result_object, &vm_context);
    l149_action_invoke(&result_object, &vm_context);
    l150_action_invoke(&result_object, &vm_context);
    l151_action_invoke(&result_object, &vm_context);
    l152_action_invoke(&result_object, &vm_context);
    l153_action_invoke(&result_object, &vm_context);
    l155_action_invoke(&result_object, &vm_context);
    l156_action_invoke(&result_object, &vm_context);
    l157_action_invoke(&result_object, &vm_context);
    l158_action_invoke(&result_object, &vm_context);
    l159_action_invoke(&result_object, &vm_context);
    l160_action_invoke(&result_object, &vm_context);
    l161_action_invoke(&result_object, &vm_context);
    l162_action_invoke(&result_object, &vm_context);
    l163_action_invoke(&result_object, &vm_context);
    l164_action_invoke(&result_object, &vm_context);
    l166_action_invoke(&result_object, &vm_context);
    l167_action_invoke(&result_object, &vm_context);
    l168_action_invoke(&result_object, &vm_context);
    l169_action_invoke(&result_object, &vm_context);
    l170_action_invoke(&result_object, &vm_context);
    l171_action_invoke(&result_object, &vm_context);
    l172_action_invoke(&result_object, &vm_context);
    l173_action_invoke(&result_object, &vm_context);
    l174_action_invoke(&result_object, &vm_context);
    l175_action_invoke(&result_object, &vm_context);
    l176_action_invoke(&result_object, &vm_context);
    l178_action_invoke(&result_object, &vm_context);
    l179_action_invoke(&result_object, &vm_context);
    l180_action_invoke(&result_object, &vm_context);
    l181_action_invoke(&result_object, &vm_context);
    l182_action_invoke(&result_object, &vm_context);
    l183_action_invoke(&result_object, &vm_context);
    l184_action_invoke(&result_object, &vm_context);
    l185_action_invoke(&result_object, &vm_context);
    l186_action_invoke(&result_object, &vm_context);
    l187_action_invoke(&result_object, &vm_context);
    l188_action_invoke(&result_object, &vm_context);
    l189_action_invoke(&result_object, &vm_context);
    l190_action_invoke(&result_object, &vm_context);
    l191_action_invoke(&result_object, &vm_context);
    l192_action_invoke(&result_object, &vm_context);
    l193_action_invoke(&result_object, &vm_context);
    l194_action_invoke(&result_object, &vm_context);
    l196_action_invoke(&result_object, &vm_context);
    l197_action_invoke(&result_object, &vm_context);
    l198_action_invoke(&result_object, &vm_context);
    l199_action_invoke(&result_object, &vm_context);
    l200_action_invoke(&result_object, &vm_context);
    l201_action_invoke(&result_object, &vm_context);
    l202_action_invoke(&result_object, &vm_context);
    l203_action_invoke(&result_object, &vm_context);
    l204_action_invoke(&result_object, &vm_context);
    l205_action_invoke(&result_object, &vm_context);
    l206_action_invoke(&result_object, &vm_context);
    l207_action_invoke(&result_object, &vm_context);
    l208_action_invoke(&result_object, &vm_context);
    l209_action_invoke(&result_object, &vm_context);
    l210_action_invoke(&result_object, &vm_context);
    l211_action_invoke(&result_object, &vm_context);
    l212_action_invoke(&result_object, &vm_context);
    l214_action_invoke(&result_object, &vm_context);
    l215_action_invoke(&result_object, &vm_context);
    l216_action_invoke(&result_object, &vm_context);
    l217_action_invoke(&result_object, &vm_context);
    l218_action_invoke(&result_object, &vm_context);
    l219_action_invoke(&result_object, &vm_context);
    l220_action_invoke(&result_object, &vm_context);
    l221_action_invoke(&result_object, &vm_context);
    l222_action_invoke(&result_object, &vm_context);
    l223_action_invoke(&result_object, &vm_context);
    l224_action_invoke(&result_object, &vm_context);
    l225_action_invoke(&result_object, &vm_context);
    l226_action_invoke(&result_object, &vm_context);
    l228_action_invoke(&result_object, &vm_context);
    l229_action_invoke(&result_object, &vm_context);
    l230_action_invoke(&result_object, &vm_context);
    l231_action_invoke(&result_object, &vm_context);
    l232_action_invoke(&result_object, &vm_context);
    l233_action_invoke(&result_object, &vm_context);
    l234_action_invoke(&result_object, &vm_context);
    l235_action_invoke(&result_object, &vm_context);
    l236_action_invoke(&result_object, &vm_context);
    l237_action_invoke(&result_object, &vm_context);
    l238_action_invoke(&result_object, &vm_context);
    l239_action_invoke(&result_object, &vm_context);
    l240_action_invoke(&result_object, &vm_context);
    l242_action_invoke(&result_object, &vm_context);
    l243_action_invoke(&result_object, &vm_context);
    l244_action_invoke(&result_object, &vm_context);
    l245_action_invoke(&result_object, &vm_context);
    l246_action_invoke(&result_object, &vm_context);
    l247_action_invoke(&result_object, &vm_context);
    l248_action_invoke(&result_object, &vm_context);
    l249_action_invoke(&result_object, &vm_context);
    l251_action_invoke(&result_object, &vm_context);
    l252_action_invoke(&result_object, &vm_context);
    l253_action_invoke(&result_object, &vm_context);
    l254_action_invoke(&result_object, &vm_context);
    l255_action_invoke(&result_object, &vm_context);
    l256_action_invoke(&result_object, &vm_context);
    l258_action_invoke(&result_object, &vm_context);
    l259_action_invoke(&result_object, &vm_context);
    l260_action_invoke(&result_object, &vm_context);
    l261_action_invoke(&result_object, &vm_context);
    l262_action_invoke(&result_object, &vm_context);
    l263_action_invoke(&result_object, &vm_context);
    l264_action_invoke(&result_object, &vm_context);
    l265_action_invoke(&result_object, &vm_context);
    l267_action_invoke(&result_object, &vm_context);
    l268_action_invoke(&result_object, &vm_context);
    l269_action_invoke(&result_object, &vm_context);
    l270_action_invoke(&result_object, &vm_context);
    l271_action_invoke(&result_object, &vm_context);
    l273_action_invoke(&result_object, &vm_context);
    l274_action_invoke(&result_object, &vm_context);
    l275_action_invoke(&result_object, &vm_context);
    l276_action_invoke(&result_object, &vm_context);
    l277_action_invoke(&result_object, &vm_context);
    l278_action_invoke(&result_object, &vm_context);
    l279_action_invoke(&result_object, &vm_context);
    l280_action_invoke(&result_object, &vm_context);
    l281_action_invoke(&result_object, &vm_context);
    l282_action_invoke(&result_object, &vm_context);
    l283_action_invoke(&result_object, &vm_context);
    l284_action_invoke(&result_object, &vm_context);
    l285_action_invoke(&result_object, &vm_context);
    l286_action_invoke(&result_object, &vm_context);
    l288_action_invoke(&result_object, &vm_context);
    l289_action_invoke(&result_object, &vm_context);
    l290_action_invoke(&result_object, &vm_context);
    l291_action_invoke(&result_object, &vm_context);
    l292_action_invoke(&result_object, &vm_context);
    l293_action_invoke(&result_object, &vm_context);
    l294_action_invoke(&result_object, &vm_context);
    l295_action_invoke(&result_object, &vm_context);
    l296_action_invoke(&result_object, &vm_context);
    l297_action_invoke(&result_object, &vm_context);
    l298_action_invoke(&result_object, &vm_context);
    l299_action_invoke(&result_object, &vm_context);
    l300_action_invoke(&result_object, &vm_context);
    l301_action_invoke(&result_object, &vm_context);
    l303_action_invoke(&result_object, &vm_context);
    l304_action_invoke(&result_object, &vm_context);
    l305_action_invoke(&result_object, &vm_context);
    l306_action_invoke(&result_object, &vm_context);
    l307_action_invoke(&result_object, &vm_context);
    l308_action_invoke(&result_object, &vm_context);
    l309_action_invoke(&result_object, &vm_context);
    l310_action_invoke(&result_object, &vm_context);
    l311_action_invoke(&result_object, &vm_context);
    l312_action_invoke(&result_object, &vm_context);
    l313_action_invoke(&result_object, &vm_context);
    l314_action_invoke(&result_object, &vm_context);
    l315_action_invoke(&result_object, &vm_context);
    l316_action_invoke(&result_object, &vm_context);
    l318_action_invoke(&result_object, &vm_context);
    l319_action_invoke(&result_object, &vm_context);
    l320_action_invoke(&result_object, &vm_context);
    l321_action_invoke(&result_object, &vm_context);
    l322_action_invoke(&result_object, &vm_context);
    l323_action_invoke(&result_object, &vm_context);
    l324_action_invoke(&result_object, &vm_context);
    l325_action_invoke(&result_object, &vm_context);
    l326_action_invoke(&result_object, &vm_context);
    l327_action_invoke(&result_object, &vm_context);
    l328_action_invoke(&result_object, &vm_context);
    l329_action_invoke(&result_object, &vm_context);
    l330_action_invoke(&result_object, &vm_context);
    l331_action_invoke(&result_object, &vm_context);
    l333_action_invoke(&result_object, &vm_context);
    l334_action_invoke(&result_object, &vm_context);
    l335_action_invoke(&result_object, &vm_context);
    l336_action_invoke(&result_object, &vm_context);
    l337_action_invoke(&result_object, &vm_context);
    l338_action_invoke(&result_object, &vm_context);
    l339_action_invoke(&result_object, &vm_context);
    l340_action_invoke(&result_object, &vm_context);
    l341_action_invoke(&result_object, &vm_context);
    l342_action_invoke(&result_object, &vm_context);
    l343_action_invoke(&result_object, &vm_context);
    l344_action_invoke(&result_object, &vm_context);
    l345_action_invoke(&result_object, &vm_context);
    l346_action_invoke(&result_object, &vm_context);
    l348_action_invoke(&result_object, &vm_context);
    l349_action_invoke(&result_object, &vm_context);
    l350_action_invoke(&result_object, &vm_context);
    l351_action_invoke(&result_object, &vm_context);
    l352_action_invoke(&result_object, &vm_context);
    l353_action_invoke(&result_object, &vm_context);
    l354_action_invoke(&result_object, &vm_context);
    l355_action_invoke(&result_object, &vm_context);
    l356_action_invoke(&result_object, &vm_context);
    l357_action_invoke(&result_object, &vm_context);
    l358_action_invoke(&result_object, &vm_context);
    l359_action_invoke(&result_object, &vm_context);
    l360_action_invoke(&result_object, &vm_context);
    l361_action_invoke(&result_object, &vm_context);
    l363_action_invoke(&result_object, &vm_context);
    l364_action_invoke(&result_object, &vm_context);
    l365_action_invoke(&result_object, &vm_context);
    l366_action_invoke(&result_object, &vm_context);
    l367_action_invoke(&result_object, &vm_context);
    l368_action_invoke(&result_object, &vm_context);
    l369_action_invoke(&result_object, &vm_context);
    l370_action_invoke(&result_object, &vm_context);
    l371_action_invoke(&result_object, &vm_context);
    l372_action_invoke(&result_object, &vm_context);
    l373_action_invoke(&result_object, &vm_context);
    l374_action_invoke(&result_object, &vm_context);
    l375_action_invoke(&result_object, &vm_context);
    l376_action_invoke(&result_object, &vm_context);
    l378_action_invoke(&result_object, &vm_context);
    l379_action_invoke(&result_object, &vm_context);
    l380_action_invoke(&result_object, &vm_context);
    l381_action_invoke(&result_object, &vm_context);
    l382_action_invoke(&result_object, &vm_context);
    l383_action_invoke(&result_object, &vm_context);
    l384_action_invoke(&result_object, &vm_context);
    l385_action_invoke(&result_object, &vm_context);
    l386_action_invoke(&result_object, &vm_context);
    l387_action_invoke(&result_object, &vm_context);
    l388_action_invoke(&result_object, &vm_context);
    l389_action_invoke(&result_object, &vm_context);
    l390_action_invoke(&result_object, &vm_context);
    l391_action_invoke(&result_object, &vm_context);
    l393_action_invoke(&result_object, &vm_context);
    l394_action_invoke(&result_object, &vm_context);
    l395_action_invoke(&result_object, &vm_context);
    l396_action_invoke(&result_object, &vm_context);
    l397_action_invoke(&result_object, &vm_context);
    l398_action_invoke(&result_object, &vm_context);
    l399_action_invoke(&result_object, &vm_context);
    l400_action_invoke(&result_object, &vm_context);
    l401_action_invoke(&result_object, &vm_context);
    l402_action_invoke(&result_object, &vm_context);
    l403_action_invoke(&result_object, &vm_context);
    l404_action_invoke(&result_object, &vm_context);
    l405_action_invoke(&result_object, &vm_context);
    l406_action_invoke(&result_object, &vm_context);
    l408_action_invoke(&result_object, &vm_context);
    l409_action_invoke(&result_object, &vm_context);
    l410_action_invoke(&result_object, &vm_context);
    l411_action_invoke(&result_object, &vm_context);
    l412_action_invoke(&result_object, &vm_context);
    l413_action_invoke(&result_object, &vm_context);
    l414_action_invoke(&result_object, &vm_context);
    l415_action_invoke(&result_object, &vm_context);
    l416_action_invoke(&result_object, &vm_context);
    l417_action_invoke(&result_object, &vm_context);
    l418_action_invoke(&result_object, &vm_context);
    l419_action_invoke(&result_object, &vm_context);
    l420_action_invoke(&result_object, &vm_context);
    l421_action_invoke(&result_object, &vm_context);
}
