// Extracted from https://github.com/WebAssembly/WASI/blob/main/phases/old/snapshot_0/witx/typenames.witx







//   ;;; A region of memory for scatter/gather reads.
//   (typename $iovec
//     (record
//       ;;; The address of the buffer to be filled.
//       (field $buf (@witx pointer u8))
//       ;;; The length of the buffer to be filled.
//       (field $buf_len $size)
//     )
//   )
//   
//   ;;; A region of memory for scatter/gather writes.
//   (typename $ciovec
//     (record
//       ;;; The address of the buffer to be written.
//       (field $buf (@witx const_pointer u8))
//       ;;; The length of the buffer to be written.
//       (field $buf_len $size)
//     )
//   )
//   
//   (typename $iovec_array (list $iovec))
//   (typename $ciovec_array (list $ciovec))
//   
//   ;;; Relative offset within a file.
//   (typename $filedelta s64)
//   
//   ;;; The position relative to which to set the offset of the file descriptor.
//   (typename $whence
//     (enum (@witx tag u8)
//       ;;; Seek relative to current position.
//       $cur
//       ;;; Seek relative to end-of-file.
//       $end
//       ;;; Seek relative to start-of-file.
//       $set
//     )
//   )

//   ;;; Number of hard links to an inode.
//   (typename $linkcount u32)
//   
//   ;;; File attributes.
//   (typename $filestat
//     (record
//       ;;; Device ID of device containing the file.
//       (field $dev $device)
//       ;;; File serial number.
//       (field $ino $inode)
//       ;;; File type.
//       (field $filetype $filetype)
//       ;;; Number of hard links to the file.
//       (field $nlink $linkcount)
//       ;;; For regular files, the file size in bytes. For symbolic links, the length in bytes of the pathname contained in the symbolic link.
//       (field $size $filesize)
//       ;;; Last data access timestamp.
//       (field $atim $timestamp)
//       ;;; Last data modification timestamp.
//       (field $mtim $timestamp)
//       ;;; Last file status change timestamp.
//       (field $ctim $timestamp)
//     )
//   )


//   ;;; The contents of a `subscription` when the variant is
//   ;;; `eventtype::fd_read` or `eventtype::fd_write`.
//   (typename $subscription_fd_readwrite
//     (record
//       ;;; The file descriptor on which to wait for it to become ready for reading or writing.
//       (field $file_descriptor $fd)
//     )
//   )
//   
//   ;;; The contents of a `subscription`.
//   (typename $subscription_u
//     (union (@witx tag $eventtype)
//       $subscription_clock
//       $subscription_fd_readwrite
//       $subscription_fd_readwrite
//     )
//   )
//   
//   ;;; Subscription to an event.
//   (typename $subscription
//     (record
//       ;;; User-provided value that is attached to the subscription in the
//       ;;; implementation and returned through `event::userdata`.
//       (field $userdata $userdata)
//       ;;; The type of the event to which to subscribe.
//       (field $u $subscription_u)
//     )
//   )
//   
//   ;;; Exit code generated by a process when exiting.
//   (typename $exitcode u32)
//   
//   ;;; Signal condition.
//   (typename $signal
//     (enum (@witx tag u8)
//       ;;; No signal. Note that POSIX has special semantics for `kill(pid, 0)`,
//       ;;; so this value is reserved.
//       $none
//       ;;; Hangup.
//       ;;; Action: Terminates the process.
//       $hup
//       ;;; Terminate interrupt signal.
//       ;;; Action: Terminates the process.
//       $int
//       ;;; Terminal quit signal.
//       ;;; Action: Terminates the process.
//       $quit
//       ;;; Illegal instruction.
//       ;;; Action: Terminates the process.
//       $ill
//       ;;; Trace/breakpoint trap.
//       ;;; Action: Terminates the process.
//       $trap
//       ;;; Process abort signal.
//       ;;; Action: Terminates the process.
//       $abrt
//       ;;; Access to an undefined portion of a memory object.
//       ;;; Action: Terminates the process.
//       $bus
//       ;;; Erroneous arithmetic operation.
//       ;;; Action: Terminates the process.
//       $fpe
//       ;;; Kill.
//       ;;; Action: Terminates the process.
//       $kill
//       ;;; User-defined signal 1.
//       ;;; Action: Terminates the process.
//       $usr1
//       ;;; Invalid memory reference.
//       ;;; Action: Terminates the process.
//       $segv
//       ;;; User-defined signal 2.
//       ;;; Action: Terminates the process.
//       $usr2
//       ;;; Write on a pipe with no one to read it.
//       ;;; Action: Ignored.
//       $pipe
//       ;;; Alarm clock.
//       ;;; Action: Terminates the process.
//       $alrm
//       ;;; Termination signal.
//       ;;; Action: Terminates the process.
//       $term
//       ;;; Child process terminated, stopped, or continued.
//       ;;; Action: Ignored.
//       $chld
//       ;;; Continue executing, if stopped.
//       ;;; Action: Continues executing, if stopped.
//       $cont
//       ;;; Stop executing.
//       ;;; Action: Stops executing.
//       $stop
//       ;;; Terminal stop signal.
//       ;;; Action: Stops executing.
//       $tstp
//       ;;; Background process attempting read.
//       ;;; Action: Stops executing.
//       $ttin
//       ;;; Background process attempting write.
//       ;;; Action: Stops executing.
//       $ttou
//       ;;; High bandwidth data is available at a socket.
//       ;;; Action: Ignored.
//       $urg
//       ;;; CPU time limit exceeded.
//       ;;; Action: Terminates the process.
//       $xcpu
//       ;;; File size limit exceeded.
//       ;;; Action: Terminates the process.
//       $xfsz
//       ;;; Virtual timer expired.
//       ;;; Action: Terminates the process.
//       $vtalrm
//       ;;; Profiling timer expired.
//       ;;; Action: Terminates the process.
//       $prof
//       ;;; Window changed.
//       ;;; Action: Ignored.
//       $winch
//       ;;; I/O possible.
//       ;;; Action: Terminates the process.
//       $poll
//       ;;; Power failure.
//       ;;; Action: Terminates the process.
//       $pwr
//       ;;; Bad system call.
//       ;;; Action: Terminates the process.
//       $sys
//     )
//   )
//   
//   ;;; Flags provided to `sock_recv`.
//   (typename $riflags
//     (flags (@witx repr u16)
//       ;;; Returns the message without removing it from the socket's receive queue.
//       $recv_peek
//       ;;; On byte-stream sockets, block until the full amount of data can be returned.
//       $recv_waitall
//     )
//   )
//   
//   ;;; Flags returned by `sock_recv`.
//   (typename $roflags
//     (flags (@witx repr u16)
//       ;;; Returned by `sock_recv`: Message data has been truncated.
//       $recv_data_truncated
//     )
//   )
//   
//   ;;; Flags provided to `sock_send`. As there are currently no flags
//   ;;; defined, it must be set to zero.
//   (typename $siflags u16)
//   
//   ;;; Which channels on a socket to shut down.
//   (typename $sdflags
//     (flags (@witx repr u8)
//       ;;; Disables further receive operations.
//       $rd
//       ;;; Disables further send operations.
//       $wr
//     )
//   )

//   ;;; The contents of a $prestat when type is `preopentype::dir`.
//   (typename $prestat_dir
//     (record
//       ;;; The length of the directory name for use with `fd_prestat_dir_name`.
//       (field $pr_name_len $size)
//     )
//   )
//   
//   ;;; Information about a pre-opened capability.
//   (typename $prestat
//     (union (@witx tag $preopentype)
//       $prestat_dir
//     )
//   )
