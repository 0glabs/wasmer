// Extracted from https://github.com/WebAssembly/wasi-io/blob/main/standard/io/witx/typenames.witx












//    ;;; A region of memory for scatter/gather reads.
//    (typename $iovec
//      (record
//        ;;; The address of the buffer to be filled.
//        (field $buf (@witx pointer u8))
//        ;;; The length of the buffer to be filled.
//        (field $buf_len $size)
//      )
//    )
//    
//    ;;; A region of memory for scatter/gather writes.
//    (typename $ciovec
//      (record
//        ;;; The address of the buffer to be written.
//        (field $buf (@witx const_pointer u8))
//        ;;; The length of the buffer to be written.
//        (field $buf_len $size)
//      )
//    )
//    
//    (typename $iovec_array (list $iovec))
//    (typename $ciovec_array (list $ciovec))
//    
//    ;;; Relative offset within a file.
//    (typename $filedelta s64)
//    
//    ;;; The position relative to which to set the offset of the file descriptor.
//    (typename $whence
//      (enum (@witx tag u8)
//        ;;; Seek relative to start-of-file.
//        $set
//        ;;; Seek relative to current position.
//        $cur
//        ;;; Seek relative to end-of-file.
//        $end
//      )
//    )

//    ;;; Number of hard links to an inode.
//    (typename $linkcount u64)
//    
//    ;;; File permissions. This represents the permissions associated with a
//    ;;; file in a filesystem, and don't fully reflect all the conditions
//    ;;; which determine whether a given WASI program can access the file.
//    (typename $permissions
//      (flags (@witx repr u8)
//        ;;; For files, permission to read the file.
//        ;;; For directories, permission to do `readdir` and access files
//        ;;; within the directory.
//        ;;;
//        ;;; Note: This is similar to the read bit being set on files, and the
//        ;;; read *and* execute bits being set on directories, in POSIX.
//        $read
//    
//        ;;; For files, permission to mutate the file.
//        ;;; For directories, permission to create, remove, and rename items
//        ;;; within the directory.
//        $write
//    
//        ;;; For files, permission to "execute" the file, using whatever
//        ;;; concept of "executing" the host filesystem has.
//        ;;; This flag is not valid for directories.
//        $execute
//    
//        ;;; For filesystems which have a concept of multiple "users", this flag
//        ;;; indicates that the file is only accessible by the effective "user"
//        ;;; that the WASI store uses to access the filesystem, and inaccessible
//        ;;; to other "users".
//        $private
//      )
//    )
//    
//    ;;; File attributes.
//    (typename $filestat
//      (record
//        ;;; Device ID of device containing the file.
//        (field $dev $device)
//        ;;; File serial number.
//        (field $ino $inode)
//        ;;; File type.
//        (field $filetype $filetype)
//        ;;; File permissions.
//        (field $permissions $permissions)
//        ;;; Number of hard links to the file.
//        (field $nlink $linkcount)
//        ;;; For regular files, the file size in bytes. For symbolic links, the length in bytes of the pathname contained in the symbolic link.
//        (field $size $filesize)
//        ;;; Last data access timestamp.
//        (field $atim $timestamp)
//        ;;; Last data modification timestamp.
//        (field $mtim $timestamp)
//        ;;; Last file status change timestamp.
//        (field $ctim $timestamp)
//      )
//    )
//    



//    ;;; The contents of a `subscription` when type is type is
//    ;;; `eventtype::fd_read` or `eventtype::fd_write`.
//    (typename $subscription_fd_readwrite
//      (record
//        ;;; The file descriptor on which to wait for it to become ready for reading or writing.
//        (field $fd $fd)
//      )
//    )
//    
//    ;;; The contents of a `subscription`.
//    (typename $subscription_u
//      (union (@witx tag $eventtype)
//        $subscription_clock
//        $subscription_fd_readwrite
//        $subscription_fd_readwrite
//      )
//    )
//    
//    ;;; Subscription to an event.
//    (typename $subscription
//      (record
//        ;;; User-provided value that is attached to the subscription in the
//        ;;; implementation and returned through `event::userdata`.
//        (field $userdata $userdata)
//        ;;; The type of the event to which to subscribe, and the contents of the subscription.
//        (field $u $subscription_u)
//      )
//    )
//    
//    ;;; Exit code generated by a program when exiting.
//    (typename $exitcode u8)
//    
//    ;;; Indicate the program exited successfully.
//    ;;;
//    ;;; Note: This is similar to `EXIT_SUCCESS` in POSIX.
//    (@witx const $exitcode $success 0)
//    
//    ;;; Indicate the program exited unsuccessfully.
//    ;;;
//    ;;; Note: This is similar to `EXIT_FAILURE` in POSIX.
//    (@witx const $exitcode $failure 1)
//    
//    ;;; Flags provided to `sock_recv`.
//    (typename $riflags
//      (flags (@witx repr u16)
//        ;;; Returns the message without removing it from the socket's receive queue.
//        $recv_peek
//        ;;; On byte-stream sockets, block until the full amount of data can be returned.
//        $recv_waitall
//      )
//    )
//    
//    ;;; Flags returned by `sock_recv`.
//    (typename $roflags
//      (flags (@witx repr u16)
//        ;;; Returned by `sock_recv`: Message data has been truncated.
//        $recv_data_truncated
//      )
//    )
//    
//    ;;; Flags provided to `sock_send`. As there are currently no flags
//    ;;; defined, it must be set to zero.
//    (typename $siflags u16)
//    
//    ;;; Which channels on a socket to shut down.
//    (typename $sdflags
//      (flags (@witx repr u8)
//        ;;; Disables further receive operations.
//        $rd
//        ;;; Disables further send operations.
//        $wr
//      )
//    )

//    ;;; The contents of a `prestat` when its type is `preopentype::dir`.
//    (typename $prestat_dir
//      (record
//        ;;; The length of the directory name for use with `fd_prestat_dir_name`.
//        (field $pr_name_len $size)
//      )
//    )
//    
//    ;;; Information about a pre-opened capability.
//    (typename $prestat
//      (union (@witx tag $preopentype)
//        ;;; When type is `preopentype::dir`:
//        $prestat_dir
//      )
//    )
